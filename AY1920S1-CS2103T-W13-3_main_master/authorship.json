[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d StudyBuddyPro"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-W13-3/main[image:https://travis-ci.org/se-edu/addressbook-level3.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/damithc/addressbook-level3[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-W13-3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-W13-3/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* StudyBuddy is a desktop app to aid our studies."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* It is intended for *students in the School of Computing* at the *National University of Singapore*."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* Being highly familiar working with CLI, Computing Students can greatly benefit from the app to manage their studies efficiently and faster than traditional GUI apps."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* This project is built upon the AddressBook-Level3 project created by https://se-education.org[SE-EDU initiative]."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* The logo of StudyBuddyPro is made with credits to https://logomakr.com/[logomakr]."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 1,
      "ckb055": 8,
      "Sahilgat": 1,
      "-": 29
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    archiveName \u003d \u0027studyBuddy-v1.3.1.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 154,
      "Sam-limyr": 1
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "StudyBuddyPro was developed by the https://github.com/AY1920S1-CS2103T-W13-3[W13-3] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d Lim Yu Rong, Samuel"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "image::sam-limyr.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "{empty}[http://github.com/Sam-limyr[github]] [\u003c\u003csam-limyr#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Responsibilities: Notes feature"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d Chen Kaibin"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "image::ckb055.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "{empty}[http://github.com/ckb055[github]] [\u003c\u003cckb055#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Responsibilities: Tagging and Cheatsheet feature"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d Jasmine Yeo Jia Min"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "image::jaesimin.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "{empty}[http://github.com/jaesimin[github]] [\u003c\u003cjaesimin#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Responsibilities: Cheatsheet feature"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d Chan Jun Ren"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "image::chanjunren.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "{empty}[http://github.com/chanjunren[github]] [\u003c\u003cchanjunren#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Responsibilities: Flashcard feature and Graphic User Interface (GUI)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d Sahil S/O Sanjeev Gathani"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "image::sahilgat.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "{empty}[http://github.com/Sahilgat[github]] [\u003c\u003csahilgat#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Responsibilities: Flashcard feature"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 5,
      "Sahilgat": 6,
      "-": 32,
      "Sam-limyr": 12
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/se-edu/addressbook-level3/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "* *Email us* : You can also reach our team lead at `limyr.samuel@u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 1,
      "-": 6
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d StudyBuddyPro - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":important-caption: :heavy_exclamation_mark:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-W13-3/main"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "By: `Team AY1920S1-CS2103T-W13-3`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Welcome to StudyBuddyPro!"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "StudyBuddyPro is a desktop-based application with a Graphical User Interface (GUI). It is intended for students in the School of Computing at National University of Singapore (NUS) who prefer to work with a Command Line Interface (CLI)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "StudyBuddyPro aims to lessen target users\u0027 revision time consumption without compromising the quality of studies. The application provides a centralized platform for them to revise using flashcards, take notes and generate cheatsheets."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "This Developer Guide (DG) is written for anyone who wishes to contribute to our project. In here, you will find StudyBuddyPro\u0027s information for set-ups, its architectures and its key features."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "If you wish to know more details about StudyBuddyPro, please do not hesitate to"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "https://ay1920s1-cs2103t-w13-3.github.io/main/ContactUs.html[contact us]!"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Callouts Signs"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Do refer to the signs below that will be used across the documents for references. These will prove to be useful when you are reading this document."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Indicates information that are to be adhere as potential problems may be encountered if you are not careful."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Indicates information that are crucial to understand so that you will be able to follow the flow of the document. Confusion may arise if you do not grasp the information here."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Indicates information that are note-worthy. Do read them for more information and better understandings."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Indicates additional information that are helpful. Fret not, tips can be good to know but are not vital."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Syntax"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Do refer to _Table 1_ below for the various syntax that will be used across the documents for references. These will prove to be useful when you are reading this document."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".Syntax Table"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[options \u003d \"header\"]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "| Syntax | Usage"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "| *`exampleCommand`*  | Indicates technical terms like _commands_, _classes_ and _methods_"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "| link:#1[link] | Indicates internal/external links"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "These syntax will be used in any context across the document. Possible places that they may appear are in _examples_, _explanations_ and _descriptions_. Take note of these syntax as they may have different meaning compared to normal texts!"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "For example, `switch` is a command for you to type in the CLI so that the function can be executed. However, \u0027switch\u0027 in plain text can mean the switch device itself or to switch amongst some things."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "An example of `switch` versus \u0027switch\u0027:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "- ... `switch` to toggle between the features ..."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "- ... is able to switch between features ..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Do refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e to set up our StudyBuddyPro on your device(s)!"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The following sections will show how StudyBuddyPro is being constructed in details."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The _figure_ below displays the high-level design of our StudyBuddy Pro."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The architecture diagram describes the relationships between the components, and here is a quick overview of each component:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "For example, the `Logic` component in _Figure 2_ defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The `logic` component\u0027s class diagram shows the relationships between the components it interacts with. Also, it provides the flow of the actions with arrows."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d How the application modes works?"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The _StudyBuddy Pro_ application has 3 modes for all the features: Flashcard, Cheatsheet and Notes."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The users use `switch` command to switch between the modes."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "In each mode, the users will interact with only the modes\u0027 commands, unless it is a _global_ command."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "- `switch fc` - switches to flashcard mode"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "- `switch cs` - switches to cheatsheet mode"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "- `switch notes` - switches to notes mode"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The following _figure_ is an activity diagram that describes the execution of the `switch` command."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".Activity Diagram of `Switch` command execution"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::jasmineDiagrams/SwitchActivityDiagram.png[]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "From the activity diagram above, it shows the logic flow of the actions taken when user executes the `switch` command. Also, it shows the checks taken placed to verify the command that was parsed."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The _figure_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Assuming that the user is currently in the _flashcard_ mode."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".Sequence diagram of component interactions for `delete 1` command"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The above sequence diagram illustrates the relationships between each components in the StudyBuddyPro\u0027s architecture. The sections below will give more details of each of those components."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d User Interface (UI) component"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "This section describes the behaviour of the `UI` component in details."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The _figure_ below portrays the internal structures of the `UI` components and their interactions."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".Class diagram of the structure of the `UI` Component"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The class diagram above draws out the relationships between the internal components and their flow of actions."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The segment below provides more details of the `UI` components and its API\u0027s link."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `ActivityWindow`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "This section describes the behaviour of the `logic` component in details."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The _figure_ below portrays the internal structures of the `logic` components and their interactions."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".Class diagram of the structure of the `logic` Component"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The class diagram above draws out the relationships between the internal components and their flow of actions."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The segment below provides more details of the `logic` components and its API\u0027s link."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".  `Logic` uses the `StudyBuddyParser` class to parse the user command."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a cheatsheet)."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The _figure_ below is the sequence diagram for the interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Assuming that the user is in the _flashcard_ mode."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".Sequence diagram for the interactions Inside the `logic` Component for the `delete 1` Command"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The lifeline for `DeleteFlashcardCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The above sequence diagram clearly portrays the execution of the `delete 1` command with relevant _methods_ being called. Also, it provides the action flow and _return variables_ accordingly."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* stores the StudyBuddyBook data."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "This section describes the behaviour of the `storage` component in details."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The _figure_ below portrays the internal structures of the `storage` components and their interactions."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".Class diagram of the structure of the `Storage` Component"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The class diagram above draws out the relationships between the internal components and their flow of actions."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The segment below provides more details of the `storage` components and its API\u0027s link."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* can save the StudyBuddyBook data in json format and read it back."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Classes used by multiple components are in the `seedu.studybuddy.commons` package."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d\u003d\u003d Tagging Feature"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ckb055"
        },
        "content": "** The current implementation of StudyBuddyItems in StudyBuddyPro is such that it contains a Set of Tags."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ckb055"
        },
        "content": "** The following objects of each individual feature shares similar Tagging behaviour, as shown in the class diagram below."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ckb055"
        },
        "content": "image::kaibindiagrams/studyBuddyItemClassDiagram.png[]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ckb055"
        },
        "content": "** As explained in the class diagram above, each StudyBuddyItem is limited to a total number of 10 tags."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ckb055"
        },
        "content": "** It is designed as such to prevent users from over-cluttering the result display when they view items that have too many tags."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ckb055"
        },
        "content": "** To reduce confusion for the user, all tags will be converted to lower-case upon initialization."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How tag predicates are implemented"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ckb055"
        },
        "content": "image::kaibindiagrams/tagPredicateClassDiagram.png[]"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ckb055"
        },
        "content": "_Diagram 6: Class Diagram of how StudyBuddyItemContainsTagPredicate is implemented_"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* The above class diagram shows how tag predicates are being implemented."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* The set of tags that is stored in `StudyBuddyItemContainsTagPredicate` refers to the tags specified by the user."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ckb055"
        },
        "content": "image::kaibindiagrams/tagPredicateCodeSnippet.png[]"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ckb055"
        },
        "content": "_Diagram 7 : Code Snippet of `StudyBuddyItemContainsTagPredicate#test()`_"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* The current implementation is that test() only returns true if *all* tags specified by the user matches the current Item."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* As such, there will be more correctness when auto-generating cheatsheets and filtering flashcards, as seen in the following example."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ckb055"
        },
        "content": "** If a user wishes to generate a cheatsheet and pull items with tags [cs2100] and [difficult], it would strictly only pull difficult CS2100 contents, and not pull other items"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ckb055"
        },
        "content": "that might have tags containing [difficult]."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d\u003d\u003d\u003d Usage of Tags"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d a. To search for items"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ckb055"
        },
        "content": "** Inside each feature"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ckb055"
        },
        "content": "*** The user is able to specify a tag name to get a list view of all the items with that specified tag in the mode they are currently in (e.g. `filter tag/cs2100`)."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ckb055"
        },
        "content": "** Searching using Tags globally"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ckb055"
        },
        "content": "*** The user is also able to indicate a tag name get a list view of all the StudyBuddyItems across all 3 modes in StudyBuddyPro (e.g. `filterall tag/ma1521`)."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ckb055"
        },
        "content": "** Currently, the user is able to specify multiple tags in his/her query (e.g. `filter tag/cs2100 tag/difficult`)."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ckb055"
        },
        "content": "** If multiple tags are specified, only items that match all the specified tags will be listed."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ckb055"
        },
        "content": "** The sequence diagram below shows how listing all items across StudyBuddyPro by a specified tag works."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ckb055"
        },
        "content": "image::kaibindiagrams/ListAllByTagSequenceDiagram.png[]"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ckb055"
        },
        "content": "Diagram 8 : Sequence diagram of filtering all StudyBuddyItems by a tag."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d b. For Auto-generation of CheatSheets"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ckb055"
        },
        "content": "** Upon adding a cheatsheet, the cheatsheet will make use of tags to automatically pull contents from other features of StudyBuddyPro."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ckb055"
        },
        "content": "** StudyBuddyItems with tags that match the user\u0027s input will be pulled over."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ckb055"
        },
        "content": "** This feature will be further elaborated in the next section, Section 4.4."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d c. For TimeTrial Mode"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ckb055"
        },
        "content": "** The TimeTrial Mode of the flashcard feature, will make use of the tagging feature."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ckb055"
        },
        "content": "** It will do so by filtering out flashcards with tags that match the user\u0027s input."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ckb055"
        },
        "content": "** For instance, if a user wishes to revise only important flashcards, he/she could enter the following command, `timetrial important`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ckb055"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ckb055"
        },
        "content": "The syntax used here is slightly different. The user need not specify the `tag/` keyword to indicate that the item is a tag."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ckb055"
        },
        "content": "** The TimeTrial feature will be further elaborated in Section 4.5."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d\u003d\u003d\u003d [Proposed] Future improvements"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ckb055"
        },
        "content": "** Supporting deletion of Tags"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ckb055"
        },
        "content": "*** Allow the user to delete a specified Tag."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ckb055"
        },
        "content": "*** All StudyBuddyItems must be updated in response to the deletion."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ckb055"
        },
        "content": "*** A proposed implementation would be to store all Tags in a Global Data Structure, and have each StudyBuddyItem reference to that Data Structure."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ckb055"
        },
        "content": "*** As such, we can apply an Observer pattern to update each StudyBuddyItem upon deletion of a tag."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "tag::cheatsheetAutomation[]"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Customizable Auto-generated Cheatsheet Feature"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "All the operations assume the user is in the _cheatsheet_ mode."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "This feature has a two-step implementation."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The first step is to auto-generate cheatsheet, and the second step is to enable removal of contents in the generated cheatsheet."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Step 1: Auto-generation"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The auto-generation mechanism is used in the `AddCheatSheetCommand` during creation of the cheatsheet."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "After creation, the cheatsheet is then stored in the `studyBuddyBook`."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "It is involved in the following operations:"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "- `AddCheatSheetCommand#execute()` -- Creates the cheatsheet"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "- `AddCheatSheetCommand#getRelevantContents()` -- Gets all the contents from _flashcard_ and _notes_ according to the _tags_ specified"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The first operation is exposed in the `Model` interface as `Model#setCheatSheet()`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The following _figure_ shows a high-level view of how the auto-generation operation works."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".Sequence diagram to illustrate auto-generation operation"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::jasmineDiagrams/AddCheatSheetSequenceDiagram.png[]"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "From the sequence diagram above, it portrays the relationships between the components to execute the creation mechanism. The _figure_ below explains the details within the sequence diagram."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".Detailed sequence diagram for retrieval of tagged contents"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::jasmineDiagrams/AddCheatSheetDetailedSequenceDiagram.png[]"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The above sequence diagram shows the complete action flow for the execution of methods."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Here is a brief summary of the steps taken to create the cheatsheet:"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "1. A new _cheatsheet_ object is created with the parsed _title_ and _tags_."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "2. Another new _cheatsheet_ object is created with the relevant contents extracted according to the _tags_ specified."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "3. The first _cheatsheet_ object is replaced with the second _cheatsheet_ object while retaining its _title_ and _tags_."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Different _cheatsheet_ objects are created to ensure that the _cheatsheet_ object itself is not modifiable."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Step 2: Customizing contents"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The customization is based on the contents that the user wants to remove. The customization feature is used in the `EditCheatSheetCommand` during the editing of the cheatsheet. After the customization, the cheatsheet is then stored in the `studyBuddyBook`."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "It is involved in the following operations:"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "- `EditCheatSheetCommand#execute()` -- Edits the cheatsheet"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "- `EditCheatSheetCommand#updateContents()` -- Retrieves the contents to be retained in the cheatsheet"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The first operation is exposed in the `Model` interface as `Model#setCheatSheet()`."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The following _figure_ shows the activity flow how the customization feature works using an example command called `edit 1 c/1 c/3 c/7`."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The index provided after `c/` indicates the content to be _removed_, not to be _retained_."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".Activity diagram of the `edit` command for the removal of contents"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::jasmineDiagrams/EditCheatSheetCommandActivityDiagram.png[pdfwidth\u003d50%,scaledwidth\u003d50%]"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The activity diagram above shows the general flow of customization of cheatsheet feature. The changes for _contents_ have to come first before the changes for _tags_. This is to ensure that the _contents_ are still relevant to the _tags_ specified. An example is provided below."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".Example of tags and contents in a cheatsheet titled \"An Example\""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|Tag | Content"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|tag1"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|content1"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|tag2"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|content2"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|tag2"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|content3"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "According to the above table, the system will be able to remove _tag2_ first before _content2_ if the order of removal is not followed. This may result in *potential errors* in the system as _content2_ may not be found or the position of it is being replaced with another content."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How auto-generation is implemented"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* **Alternative 1 (current choice):** Replacing the newly created cheatsheet with another cheatsheet object containing all the relevant contents"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "** Pros: Retains the object originality and easier to implement."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "** Cons: Invoking the edit method to create a new cheatsheet object may be complicated and messy."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* **Alternative 2:** Reformat the way the `add` function works and abstract it such that it will be generalized."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "** Pros: Codes may be cleaner and easier to understand."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "** Cons: Harder to implement. More abstraction and modifications have to be done. Might change the format of the system."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How customization of contents is implemented"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* **Alternative 1 (current choice):** Places all contents that are not within the indexes specified by users into a new cheatsheet object and the targeted cheatsheet object with the respective changes."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "** Pros: Retains the object originality and easier to implement."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "** Cons: Large amount of contents may result in longer processing time as it loops to find all contents not removed. It is messier to comprehend."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* **Alternative 2:** Reformat the way the `edit` function works and abstract it such that it will be generalized."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "** Pros: Codes may be cleaner and easier to understand."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "** Cons: Harder to implement. More abstraction and modifications have to be done."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "end::cheatsheetAutomation[]"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d [Proposed] Future improvements"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "- Alerts users of possible duplications of contents"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "- Allows users to gauge the size of the contents (whether if it fits in single-sided or double-sided A4 paper)"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "- Allows users to export the cheatsheets"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "- Allows updates of cheatsheet"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    -- Currently, contents are taken upon creation. Hence, any objects with specified tags will not be added into the cheatsheet after the creation of the cheatsheet."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003d\u003d\u003d Flashcards Time Trial Feature"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "The following commands assume that the user is in the _flashcard_ mode."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "a.\tThe time trial mechanism is facilitated by the `FlashcardTabWindowController`, and mainly uses the `Timeline`, `KeyFrame` and `KeyValue` class from the JavaFX package to support its functionality."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "The following _figure_ shows a class diagram of the relevant classes of the time trial feature."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "image::jrImages/TimeTrialClassDiagram.png[]"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "The following _figure_ is an activity diagram of the flow of events when a user attempts to start a time trial."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "image::jrImages/TimeTrialActivityDiagram.png[]"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "b.\tGiven below is an example usage scenario and how the time trial mechanism behaves at each step."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "c. Upon initialization of the StudyBuddy and switching to the Flashcard window, the `StudyBuddyParser`’s function enum will be set to parse `Flashcard` commands."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "d.\tThe user executes (timetrial cs2100), and the `StartTimeTrialCommand` retrieves a List of flashcards with the associated `Tag` through the `Model#getTaggedFlashcards`, which is then passed into the `FlashcardTabWindowController`."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "e.\tThe `FlashcardTabWindowController` then calls the `FlashcardTabWindowController#startTimeTrial`, which in turns construct a `Timeline` with the following added for 3 flashcards:"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "1.\tA `KeyFrame` to call the `FlashcardTabWindowController#loadTimeTrial` method, which displays the question of the flashcard on the window, with a `KeyValue` that starts the timer on the screen."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "2.\tA `KeyFrame` to call the `FlashcardTabWindowController#showFlashcardAns` method, which hides the Timer and flashes the answer of the flashcard for a set period of time."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "3.\tA `KeyFrame` is then added to the timeline to call the `FlashcardTabWindowController#resetViews` method, which in turn empties the qnsTextArea and ansTextArea. [TO BE REFORMATTED]"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "The following _figure_ shows the sequence diagram of when the command `timetrial cs2103t` is executed."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "image::jrImages/TimeTrialSequenceDiagram.png[]"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How the timetrial is implemented"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "* **Alternative 1 (current choice):** 1.\tUsing the `TimeLine` class to set the timer"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "object."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "** Pros: Tidier and easier to understand."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "** Cons: Have to read up on the API and learn about the relevant classes such as `KeyFrame` and `KeyValue`"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "* **Alternative 2:** Looping `Thread.sleep()` to set the timer"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "** Pros: Easier to implement"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "** Cons: Code will be messier and harder to read"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to continue the time trial"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "* **Alternative 1 (current choice): Each flashcard and its’ respective answer is displayed for a set period of time before the next flashcard**"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "** Pros: Easier to implement"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "** Cons: Inflexible as user can only view the answer for a set amount of time"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "* **Alternative 2:** Allowing users to input commands to display the flashcard answer / move on to the next flashcard"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "** Pros: Better flow of time trial feature and improved user experience"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "** Cons: Hard to implement"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003d\u003d\u003d\u003d [Proposed] Future improvements"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "** Allowing users to set their own time limit for each flashcard in the time trial mode"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "*** Command will be inputted to set the duration of the timer for each flashcard"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "** Allowing users to decide when to move on to the next flashcard"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "*** Question will still be shown for a fixed period of time, but a command will be required to move on to the next flashcard instead of just flashing the answer for a set amount of time"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d\u003d Remind Feature"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "For this section, a _due flashcard_ refers to a flashcard that is due for revision today."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "In other words, the current date (according to the user\u0027s system date) matches the date the"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "flashcard was next supposed to be viewed for optimum revision. Similarly, an _overdue flashcard_"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "refers to a flashcard whose view date for optimum revision was _before_ the current date. Further"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "details on how the optimum revision date is calculated is provided in this section!"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "This feature aims to help the user stay on track with the user\u0027s revision schedule through two"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "other sub-features. The first sub-feature is the `remind` command which helps the user"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "keep track of which flashcards are due (or overdue) for revision. The second sub-feature is"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "integrated with the `exit` command, and automatically asks the user for confirmation if they"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "wish to exit StudyBuddyPro if the user still has due or overdue flashcards left for revision."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "An activity diagram summarizing how the remind feature works can be found below."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "{To be completed soon}"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "image:: to be added + caption"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation of `remind` command"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "The following commands assume that the user is in the _flashcard_ mode."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "The  remind feature is facilitated by ``"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "image::remindDiagrams/RemindFeatureRelevantClassDiagram.png[]"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of utility attributes or classes to keep track of number of times a `Flashcard` object was"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "viewed."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "* **Alternative 1 (current choice):** Design a new `ViewCount` class and make a `Flashcard` object store a `ViewCount`"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "object."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "* **Alternative 2:** Use an integer attribute field in `Flashcard` object"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "** Pros: Easier to maintain: The addition of a new class increases overall coupling compared to adding a single new"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "attribute."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "** Cons: Bad OOP practice and makes it difficult to implement future changes"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect:"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "* **Alternative 1 (current choice):**"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "* **Alternative 2:**"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d\u003d\u003d [Proposed] Future improvements"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "** Improved formula for reminding"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "*** Take into account other factors such as user confidence level or number of times flashcard was answered correctly"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "or incorrectly to create a more dynamic reminding schedule."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "** Link to `exit` command"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "*** Checks if the user viewed all flashcards to be revised on the day."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "*** If some of the relevant flashcards were not viewed, reminds user about remaining flashcards and stalls"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "application exit."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "*** User can either go back into StudyBuddyPro and view the relevant flashcards or supply an `exit` command again to"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "close the application."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "** More statistics for motivation"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "*** Tracks how often user viewed flashcards on time and how many flashcards users missed viewing on the relevant"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "deadline."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation of `exit` command"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "// end::remind[]"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d Add Tags Within Notes feature"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "`Notes` are used in the creation of `CheatSheet` objects as well as in general use of StudyBuddyPro. This Add Tags"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Within Notes feature allows for the addition of tags within the content of the `Note`, to allow more precise"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "highlighting and tagging of information."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "All the operations assume that the user is in the _notes_ mode."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d Design Implementation of Notes"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "`Notes` contain a `Title` and a `Content`, with optional `Tags` and `NoteFragments`, as shown in the diagram below:"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "image::samDiagrams/NoteModelClassDiagram.png[]"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "`Notes` are `StudyBuddyItems`, and can contain any number of `NoteFragments`. `NoteFragment` objects are used to"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "represent the specific areas within a `Note` that have been tagged. Each tag within a `Note` is referred to as a *note"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "fragment tag* (which is represented by a `NoteFragment` object)."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "NOTE: Note fragment tags should not be confused with `Tags`."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "`NoteFragments` contain:"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** A `Title` that is the same as their parent `Note`"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** A `Content` that is a substring of their parent `Note`"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Any indicated `Tags` that are independent of their parent `Note`"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "`NoteFragments` are viewed or used in the following situations:"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Viewable through the `filter` and `filterall` commands"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Usable through `add` commands in _cheatsheet_ mode (see Section 4.4)"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d Usages of Notes"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "`Notes` can be used to:"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Store information under a title"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Categorize information via the use of `Tags`"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Provide information to `CheatSheets` for collation"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "`Notes` can currently be:"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Added to `StudyBuddyBook`"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Deleted from `StudyBuddyBook`"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Viewed raw or cleaned from `StudyBuddyBook`"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Viewed using `filter` from `StudyBuddyBook`"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d Design Implementation of the Add Tags Within Notes feature"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "The Add Tags Within Notes feature was implemented in the following way:"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Creation of a `NoteFragment` class that represents one tag within a `Note`"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Have each `Note` contain any number of `NoteFragments` in a list"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Upon addition of a `Note`, parse its `Content` to check for any note fragment tags within it"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Create any required `NoteFragment` objects and add them to the list in their parent `Note`"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Since `NoteFragments` are contained within `Notes`, when a `Note` is deleted, its `NoteFragments` will be deleted as well."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "There are four main methods that involve `NoteFragments`. They are listed below:"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** `NoteFeatureUtil#parseNoteFragmentsFromNote()`: Used by `Note` to create `NoteFragments`."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** `ModelManager#collectTaggedItems()`: Used in the `filterall` command."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** `ModelManager#collectTaggedNotes()`: Used in the _notes_ `filter` command."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** `AddCheatSheetCommand#getRelevantContents()`: Used to generate `CheatSheets`."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Out of these four methods, only `NoteFeatureUtil#parseNoteFragmentsFromNote()` is aware of the `NoteFragment` class."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "The other three methods are only aware of the `Note` class."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "The implementation of these four methods is shown below:"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation of `NoteFeatureUtil#parseNoteFragmentsFromNote()`:"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "The method of parsing `Content` in `NoteFeatureUtil#parseNoteFragmentsFromNote()` relies on the use of `Prefixes`"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "around each note fragment tag. Each note fragment tag is specified with a start (\"/\\*\") and end (\"*/\") marker, and"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "its `Content` and `Tags` are also represented with the `Prefixes` \u0027C/\u0027 and \u0027TAG/\u0027."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Example usage:"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "add t/About Notes c/Notes can be /* C/highlighted TAG/highlight TAG/important */ if needed. tag/about"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u0027C/\u0027 and \u0027TAG/\u0027 have to be used instead of the default \u0027c/\u0027 and \u0027tag/\u0027 because otherwise the note fragment tag would"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "raise an error (since only one \u0027c/\u0027 tag is allowed per command)."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "New note added:"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Title: About Notes"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Content: Notes can be /* C/highlighted TAG/highlight TAG/important */ if needed."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Tags: [about]"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Note fragment tags detected:"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Title: About Notes"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Content: highlighted"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Tags: [important][highlight]"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "A `Note` has been added with the `Content` of \"Notes can be highlighted if needed.\", and a note fragment tag with"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "`Content` \"highlighted\" and two `Tags` \"cs2100\" and \"important\". Despite this, the `Note` itself is instead tagged"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "with the `Tag` \"about\"."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "When an `add` command is made:"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Only the `Prefixes` \u0027t/\u0027, \u0027c/\u0027, and \u0027tag/\u0027 are identified and parsed."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** A `Note` is then created with the desired `Title`, `Content`, and `Tags`."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** After creation, the `Content` of the `Note` is parsed immediately for the `Prefixes` \u0027/\\*\u0027, \u0027*/\u0027, \u0027C/\u0027, and \u0027TAG/\u0027"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** All four `Prefixes` must be present for the note fragment tag to be considered valid. Otherwise, an exception is"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "thrown."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "The sequence diagram below describes the process of adding a new note that contains a note fragment tag:"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003cINSERT SEQUENCE DIAGRAM HERE, and refer to it below\u003e"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation of `NoteFragments` in `list` command:"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "When `Notes` are listed, `NoteFragments` do not appear in the list of resulting `Notes`. This is because the"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "`ListCommand#execute()` method uses `ModelManager#updatedFilteredNoteList()`, which does not check for any"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "`NoteFragments` within `Notes`. This is illustrated in the \u003cWHAT KIND OF\u003e diagram below:"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003cSOME DIAGRAM SHOWING CALLING OF LISTCOMMAND FOR NOTE - but is this necessary? Would need to refer to it after the text\u003e"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "This decision is made because the `list` command already lists all `Notes`, and therefore it would be unnecessary to"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "also list all `NoteFragments`, as `NoteFragments` form a subset of `Notes`."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation of `NoteFragments` in `filter` command:"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "When `Notes` are filtered, the method `ModelManager#collectTaggedNotes()` is used, which checks for any valid tags in"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "`NoteFragments` within the `Note` as it checks each `Note`."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "However, `ModelManager` uses the method `Note#getFilteredNoteFragments()` to achieve this, and therefore is not"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "aware of the existence of `NoteFragments`. This is illustrated in the \u003cWHAT KIND OF\u003e diagram below:"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003cSOME DIAGRAM SHOWING CALLING OF FILTERCOMMAND FOR NOTE - but is this necessary? Would need to refer to it after the"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "text\u003e"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "This diagram can be contrasted with the \u003cWHICH NUMBER?\u003e diagram above, which uses a different method \u003cDESCRIBE\u003e that"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "does not account for `NoteFragments`."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "The separation between `Notes` and `NoteFragments` in the `filter` command allows for more finely-tuned viewing of"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "specific tagged details. For instance:"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** A small portion of a long `Note` can be tagged out as \u0027important\u0027."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Different parts of the same `Note` can be given different `Tags` like \u0027CS2103T\u0027 or \u0027CS2100\u0027, even as the entire"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "`Note` is tagged under a larger category like \u0027CS\u0027."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation of `NoteFragments` in `filterall` command:"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "When all `StudyBuddyItems` are filtered, the method `ModeManager#collectTaggedItems()` is used, which performs a"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "similar task to `ModelManager#collectTaggedNotes()`, but also collects `Flashcard` and `CheatSheet` objects as well."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "The reasoning for this decision is similar to that in the `filter` command."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation of `NoteFragments` in `add` command in `CheatSheets`:"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "When a `CheatSheet` is created, the method `AddCheatSheetCommand#getRelevantContent()` is used to filter out all"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "`Notes` and `NoteFragments` that contain the specified `Tags`. Again, `AddCheatSheetCommand` uses the method"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "`Note#getFilteredNoteFragments()` to obtain the filtered list of `NoteFragments`, and is therefore unaware of the"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "existence of `NoteFragment`."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Since the `Tags` stored in `Notes` and `NoteFragments` are independent of each other, they are filtered in the same"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "way as in the `filter` command. As a result, it is possible for a `NoteFragment` to be included in a `CheatSheet`"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "even when its parent `Note` is not."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations of the Add Tags Within Notes feature"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Container location for `NoteFragment`"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Alternative 1 (current choice): Each `Note` contains a `List\u003cNoteFragment\u003e`:"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "*** Pros: Much easier maintenance, since `NoteFragments` are automatically deleted with the deletion of their parent"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "`Note`."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "*** Cons: O(n^2^) search time for `filter` commands, as all `NoteFragments` in each `Note` in the `UniqueNoteList`"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "must be searched through to filter them out."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Alternative 2: Separate `UniqueNoteFragmentList` from `UniqueNoteList`:"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "*** Pros: O(n) search time for `filter` commands, as the `UniqueNoteFragmentList` exists separately from the"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "`UniqueNoteList`."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "*** Cons: Difficult to maintain; deletion of a parent Note requires searching the `UniqueNoteFragmentList` for any"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "child `NoteFragments` to delete as well."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d Usages of the Add Tags Within Notes feature"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Use in `filter` and `filterall` to make the GUI less cluttered"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Use in `filter` to highlight specific sections of `Notes`"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Use in `add` for `CheatSheets` for more parsimonious usage of space"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d (Proposed) Future Improvements for v2.0"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d `edit` command for `Notes`"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "This feature will allow for users to edit their `Notes`, by specifying a new `Title`, `Content`, or `Tags`."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d (Proposed) Implementation"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Expected inputs:"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "*** The original `Title` of the `Note` to be edited"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "*** One or more fields that the user wants to edit"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Create an `EditCommandParser` to parse the input command using `ArgumentTokenizer`"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Create an `EditCommand` which contains `EditCommand#execute()`"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "*** This method creates a new `Note` which contains all old fields, then replaces any old field with a new field, if"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "it is made available"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Example usage:"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    edit Old Title t/New Title"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "This would result in the `Note` which was originally called \u0027Old Title\u0027 having its `Title` changed to \u0027New Title\u0027."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Since no two `Notes` are allowed to have the same `Title`, it is a unique identifier of the `Note` to be edited."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Method of editing"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Alternative 1: Create a new `Note` object"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "*** Pros: Is more defensive, since only a shallow copy of the `Note` object is returned."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "*** Cons: Longer command run time, as a new `Note` object needs to be created first, and then edited."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Alternative 2: Edit the exiting `Note` object"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "*** Pros: Command will run faster, since no new `Note` object needs to be created."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "*** Cons: Is not defensively programmed, as `Notes` should be immutable."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Please do refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e for more information about this section!"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Please do refer to the guide \u003c\u003cTesting#, here\u003e\u003e for more information about this section!"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Please do refer to the guide \u003c\u003cDevOps#, here\u003e\u003e for more information about this section!"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Appendixes"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The following sections will be titled as \u0027_Appendix_\u0027 followed by an alphabet in alphabetical order to denote the different appendixes."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The following is an example of an appendix heading."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "*Appendix Z: ABC*"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "- Alphabet \u0027Z\u0027 indicates its placing in the order of appendixes"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "- Phrase \u0027ABC\u0027 indicates the title of the appendix"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* is a Computer Science major student in NUS"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "* is a visual learner that benefits from using flashcards"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "* can benefit from better organization of notes"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "*Value proposition*: integrate flashcards and note compilers for CS students better than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* * *` |user |have as much information on hand as possible |get all the information I have collected and tagged as part of my revision and ensure that I have all the necessary information at hand."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* * *` |user |save time in creating cheatsheet | spend more time on revision"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* * *` |user |tailor the information I have in my cheatsheet |choose which types of tags I want to include in my cheatsheet."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* * *` |user |familiarise with some common programs from the pre-set flashcards in the question bank |learn more useful tips and snippets of information"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* * *` |user |quickly store tutorial questions for revision |just store a screenshot of the question for future reference"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* * *` |user |lighten the weight of my bag |cure my back pain from carrying a heavy bag and still store my notes conveniently."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* * *` |user |find my notes efficiently for reference |write as much notes as possible during studies without worries"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* * *` |user who constantly misplace notes |keep myself more organized |effectively see what notes are missing"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* * *` |user |sort and skim through long lists of notes quickly |take notes during class without missing out important pointers"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* * *` |user |take charge of my learning by having multiple “filters” or “levels” to my learning |be a proactive learner"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* * *` |user who is forgetful |practice spaced retention |better memorize and recall the topics"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* * *` |user |better understand or memorize the topics |improve my results"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* * *` |university educator teaching multiple modules |easily categorize and organize the notes I create for my students |easily search by the tags for relevant notes"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* *` |user |make cheatsheets from exams |organize and collate the best pointers to be made into a cheatsheet"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* *` |user |creatively create and implement notes |be more effective with my studies"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* *` |user |not take break for too long |be effective with my revision using the pomodoro technique"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* *` |user |have suggestions on what to do during breaks | be more productive and on-track with tasks"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* *` |user |make sure that my notes doesn’t miss out important points |collate and compare my notes with my friends’ efficiently"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* *` |user |be reminded at appropriate times to revise my work |revise regularly and consistently"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* *` |user |disseminate information efficiently |save the work amongst different teammates"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* *` |user |better understand or memorize the topics |improve my results"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* *` |user |connect different parts of questions together | easily link concepts together"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* *` |user |share notes with my friends and for them to share notes with me, for ease of discussion |be able to study with others"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* *` |user |answer the questions within a certain time frame |boost my confidence and proficiency in a subject"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* *` |user |keep track of the harder questions |revise more effectively"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* *` |university educator |keep track of my students\u0027 progress and evaluate who are the stronger/weaker students so they can help each other |help my students do well in their studies"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* *` |university educator |distribute the flashcards I create to my students so they can use them to practice |help my students better memorise and recall my class content"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* *` |university educator |give my students quizzes during lecture using the flashcards | make sure that they will not fall asleep during lecture."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`*` |user |download flashcards from online sources |save time for other revisions"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`*` |user |create notes without papers | save the earth"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "(For all use cases below, the *System* is the `StudyBuddyPro` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d\u003d *User story 1:*"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "As a student who is busy with revision and has no time to create a cheatsheet, the cheatsheet"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "generation feature will help me save time on creating cheatsheets and let me spend more time on revision."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d\u003d Use case: UC01 – Create a cheatsheet"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Preconditions: StuddyBuddy application is opened"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "1.\tUser navigates to cheetsheat section."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "2.\tUser chooses to create new cheatsheet."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "3.\tStuddyBuddy asks user for new cheatsheet’s title."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "4.\tUser inputs new cheatsheet’s title."
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "5.\tStuddyBuddy asks user for new cheatsheet’s module."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "6.\tUser inputs new cheatsheet’s module."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "7.\tStuddyBuddy asks for new cheatsheet’s tags."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "8.\tUser inputs new cheatsheet’s tags."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "+"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d\u003d Use case: UC02 – List cheatsheets"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Preconditions: StuddyBuddy application is opened"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "1.\tUser navigates to cheetsheat section."
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "2.\tUser chooses to list all cheatsheet."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "3.\tStudyBuddyPro displays all cheatsheets."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "+"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d\u003d Use case: UC03 – Edit a cheatsheet"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Preconditions: StudyBuddyPro application is opened, User knows cheatsheet ID"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "1.\tUser navigates to cheetsheet section."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "2.\tUser chooses to edit cheatsheet."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "3.\tStudyBuddyPro asks for cheatsheet ID for cheatsheet to be edited."
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "4.\tUser inputs cheatsheet ID."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "5.\tStudyBuddyPro asks for parameters to be edited."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "6.\tUser inputs perimeters to be edited."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "7.\tStudyBuddyPro displays edited cheatsheet."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "+"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d\u003d Use case: UC04 – View a cheatsheet"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Preconditions: StudyBuddyPro application is opened, User knows cheatsheet ID"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "1.\tUser navigates to cheetsheat section."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "2.\tUser chooses to view cheatsheet."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "3.\tStudyBuddyPro asks for cheatsheet ID for cheatsheet to be viewed."
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "4.\tUser inputs cheatsheet ID."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "5.\tStudyBuddyPro displays cheatsheet."
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "+"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d\u003d Use case: User story 1"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "1.\tUser _creates cheatsheet (UC01)_."
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "2.\tUser _views cheatsheet (UC04)_."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "+"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "* 2a. User chooses to edit cheatsheet."
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "+"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "2a1. User _edits cheatsheet (UC03)_."
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "{Fix indent}"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "+"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d\u003d User story 2:"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "As a student who finds it very cumbersome to store tutorial questions that I would like to revise, I can make use of the flashcard function to just store a screenshot of the question for future reference."
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d\u003d Use case: UC05 – Create a flashcard from image"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Software system: StudyBuddyPro, OS"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Preconditions: StudyBuddyPro application is opened"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "1.\tUser finds a tutorial question he/she would like to revise."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "2.\tUser takes screenshot of tutorial question."
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "3.\tOS asks user where screenshot should be saved."
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "4.\tUser saves screenshot in designated StudyBuddyPro image folder with custom name."
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "5.\tUser opens StudyBuddyPro application."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "6.\tUser navigates to flashcard section."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "7.\tUser chooses to create new flashcard from image source."
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "8.\tStudyBuddyPro asks user for file name."
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "9.\tUser inputs file name."
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "10.\tStudyBuddyPro asks user for flashcard’s answer."
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "11.\tUser inputs flashcard’s answer."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "12.\tStudyBuddyPro asks user for flashcard’s title."
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "13.\tUser inputs flashcard’s title."
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "14.\tStudyBuddyPro asks user for flashcard’s module."
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "15.\tUser inputs flashcard’s module."
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "16.\tStudyBuddyPro displays created flashcard."
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "* 15a. User wants to input additional flashcard hint."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "15a1. User inputs flashcard’s hint."
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "{Todo markup indent}"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "+"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Use case resumes from step 16."
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "* 15b. User wants to input additional flashcard tags."
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "15a2. User inputs flashcard’s tags."
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "{Todo markup indent}"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "+"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Use case resumes from step 16."
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "* 15c. User wants to input additional hint and tags."
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "15c1. User inputs flashcard’s hint."
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "15c2. User inputs flashcard’s tags."
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "{Todo markup indent}"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "+"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Use case resumes from step 16."
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003d\u003d\u003d Use case: UC06 – Start \u003c\u003ctime-trial,time trial\u003e\u003e"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "1.\tUser navigates to flashcard section."
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "2.\tUser chooses to start time trial."
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "3.\tStudyBuddyPro asks user for time per flashcard."
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "4.\tUser inputs time per flashcard."
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "5.\tStudyBuddyPro asks user for tags to select flashcards for inclusion."
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "6.\tUser inputs tags."
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "7.\tStudyBuddyPro starts time trial with specified parameters."
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "+"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d\u003d Use case: User story 2"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "1.\tUser _creates flashcards from image (UC05)_ with tag “tutorial questions”."
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "2.\tUser _starts time trial (UC06)_ with tag “tutorial questions”."
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "+"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "{Todo delete later}"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "** 3a1. StudyBuddyBook shows an error message."
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "ckb055"
        },
        "content": ".  A flashcard cannot have more than 10 tags."
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "ckb055"
        },
        "content": ".  The product is not required to confirm if the user has answered the flashcard correctly. Instead, the product lets the user checks the answer and determine himself/herself if he/she has answered it correctly."
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "ckb055"
        },
        "content": ".  The in-built flashcard library is expected to be updated annually, to follow the curriculum of NUS computing modules."
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "ckb055"
        },
        "content": ".  The command-line syntax should prioritise user-friendliness."
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "[[flash-card]] FlashCard::"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "A titled digital \u0027card\u0027 that contains a question (image or text), answer, as well as it\u0027s relevant tags."
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "[[cheat-sheet]] Cheatsheet::"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "A document that contains the notes the user has specified during creation"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "[[time-trial]] Time-Trial::"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "A mode of answering flashcards in which you must provide the answer within a designated time period."
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    {To be edited}"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d\u003d Remind feature"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Refer to the note at the start of the"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "https://github.com/AY1920S1-CS2103T-W13-3/main/blob/master/docs/DeveloperGuide.adoc#46-remind-feature[Remind feature]"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "section for an explanation of the terms \"due flashcards\" and \"overdue flashcards\" used in"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "this section."
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Testing this section may require the user to switch their system date. A quick guide on how this"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "can be done for the Windows 10 operating system can be found"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "https://kb.wisc.edu/helpdesk/79027[here] while one for Mac can be found"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "https://www.lifewire.com/manually-change-the-date-and-time-on-mac-2378143[here]. The process"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "should be similar for different versions of the operating systems."
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ". Testing `remind` command"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "* Test case 1"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".. Prerequisites"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "... Currently in flashcard mode with Flashcard icon highlighted."
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "... There are no due or overdue flashcards."
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".. Test command: `remind`"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".. Expected: Feedback box outputs message:"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Well done - No due or overdue flashcards!"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "* Test case 2"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".. Prerequisites"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "... Currently in notes or cheatsheet mode with the respective icon highlighted."
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".. Test command: `remind`"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".. Expected: Feedback box outputs message:"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Unknown command"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "* Test case 3"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".. Prerequisites"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "... Currently in flashcard mode with the Flashcard icon highlighted."
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "... There are due flashcards. This can be simulated by adding a flashcard with the `add`"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "command and then changing the system date to the next day."
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".. Test command: `remind`"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".. Expected: Feedback box outputs message:"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Here are the flashcards due today:"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    1. [FLASHCARD TITLE] - [FLASHCARD ANSWER]\""
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "* Test case 4"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".. Prerequisites"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "... Currently in flashcard mode with the Flashcard icon highlighted."
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "... There are overdue flashcards. This can be simulated by adding a flashcard with the `add`"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "command and then changing the system date to 2 days later."
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".. Test command: `remind`"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".. Expected: Feedback box outputs message:"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Here are your overdue flashcards:"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    1. [FLASHCARD TITLE] - [FLASHCARD ANSWER] (Was due on YYYY-MM-DD)\""
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "* Test case 5"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".. Prerequisites"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "... Currently in flashcard mode with the Flashcard icon highlighted."
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "... There are overdue flashcards but no due flashcards. This can be simulated by the following"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "steps:"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".... Add a flashcard (Called flashcard A) with the `add` command."
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".... Add a flashcard (Called flashcard B) with the `add` command."
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".... Switch the system date to 2 days later. Both flashcards A and B are now overdue. This"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "can be verified by using the `remind` command at this stage."
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".... View flashcard A using the `view 1` command and then show its answer with the `show` command."
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "This means flahscard A is no longer overdue. Now there are no due flashcards today and one"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "overdue flashcard (flashcard B)."
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".. Test command: `remind`"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".. Expected: Feedback box outputs message:"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Here are your overdue flashcards:"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    1. [FLASHCARD TITLE] - [FLASHCARD ANSWER] (Was due on [YYYY-MM-DD])"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".. Note how only the overdue flashcard B was shown while no explicit output was provided"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "to indicate there were no other flashcards due today. This is an intended behaviour to"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "avoid clutter."
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "* Test case 6"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".. Prerequisites"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "... Currently in flashcard mode with the Flashcard icon highlighted."
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "... There are both due and overdue flashcards. This can be simulated by the following"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "steps:"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".... Add a flashcard (Called flashcard A) with the `add` command."
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".... Switch the system date to 1 day later. Flashcard A is now due. This"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "can be verified by using the `remind` command at this stage."
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".... Add a flashcard (Called flashcard B) with the `add` command."
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".... Switch the system date to 1 day later. Flashcard A is now overdue while flashcard B"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "is due."
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".. Test command: `remind`"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".. Expected: Feedback box outputs message:"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Here are the flashcards due today:"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    1. [FLASHCARD TITLE] - [FLASHCARD ANSWER]"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Here are your overdue flashcards:"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    1. [FLASHCARD TITLE] - [FLASHCARD ANSWER] (Was due on [YYYY-MM-DD])"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".. Note how flashcard B is listed under due today while flashcard A is listed under overdue"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "flashcards."
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ". Testing `exit` command"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "* Test case 1"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".. Prerequisites"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "... StudyBuddyPro just launched with no mode selected. GUI does not show any icon highlighted."
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "... There are due flashcards. Refer to"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "https://github.com/AY1920S1-CS2103T-W13-3/main/blob/master/docs/DeveloperGuide.adoc#g3-remind-feature[Remind command"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "manual testing], specifically test cases 3, for how this can be simulated."
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".. Test command: `exit`"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".. Expected: Feedback box outputs message:"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Are you sure you want to exit? You still have the following flashcards overdue or left to revise for today:"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Here are the flashcards due today:"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    1. [FLASHCARD TITLE] - [FLASHCARD QUESTION]"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Type \u0027exit\u0027 again to exit the application!"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".. Pressing kbd:[Enter] exits StudyBuddyPro. This also highlights how the this sub-feature"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "of the remind feature works regardless of which mode the user is in since `exit` is a global"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "command."
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".. Alternatively, the user can switch back to flashcard mode using `switch fc`, view the"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "added flashcard and its answer using `view 1` and `show`, before using `exit` again. This time"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "StudyBuddyPro exits immediately since now there are no due or overdue flashcards."
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "* Test case 2"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".. Prerequisites"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "... Currently in flashcard mode with the Flashcard icon highlighted."
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "... There 1 due and 1 overdue flashcard. Refer to"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "https://github.com/AY1920S1-CS2103T-W13-3/main/blob/master/docs/DeveloperGuide.adoc#g3-remind-feature[Remind command"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "manual testing], specifically test cases 6, for how this can be simulated."
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".. Test command: `exit`"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".. Expected: Feedback box outputs message:"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Are you sure you want to exit? You still have the following flashcards overdue or left to revise for today:"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Here are the flashcards due today:"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    1. [FLASHCARD TITLE] - [FLASHCARD QUESTION]"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Here are your overdue flashcards:"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    1. [FLASHCARD TITLE] - [FLASHCARD ANSWER] (Was due on [YYYY-MM-DD])"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Type \u0027exit\u0027 again to exit the application!"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".. Enter another generic command e.g. `switch notes`. Now, entering the test command `exit`"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "will prompt the same feedback as shown above in part c. This highlights how entering another"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "valid command will refresh the \"state\" of the exit command which again requires a"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "double-confirmation before the user can exit StudyBuddyPro."
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ". Combination testing: `remind` and `exit` command with `timetrial`"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "* Test case 1"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".. Prerequisites"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "... Currently in flashcard mode with the Flashcard icon highlighted."
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "... There 1 due and 1 overdue flashcard. Refer to"
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "https://github.com/AY1920S1-CS2103T-W13-3/main/blob/master/docs/DeveloperGuide.adoc#g3-remind-feature[Remind command"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "manual testing], specifically test cases 6, for how this can be simulated. Ensure the flashcard"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "due today is tagged with the tag \"pop\". For example, the flashcard could be added with the command:"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "`add q/What is 1+1? a/2 t/Math Question 1 tag/pop`."
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".. Test command: `remind`"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".. Expected: Feedback box outputs message:"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Here are the flashcards due today:"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    1. [FLASHCARD TITLE] - [FLASHCARD ANSWER]"
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Here are your overdue flashcards:"
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    1. [FLASHCARD TITLE] - [FLASHCARD ANSWER] (Was due on [YYYY-MM-DD])"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".. Start a timetrial with the flashcard that is due today i.e. tagged with \"pop\" using the"
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "command  `timetrial pop`"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".. Test command: `exit`"
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".. Expected: Feedback box outputs message:"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Are you sure you want to exit? You still have the following flashcards overdue or left to revise for today:"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Here are the flashcards due today:"
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    1. [FLASHCARD TITLE] - [FLASHCARD QUESTION]"
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Type \u0027exit\u0027 again to exit the application!"
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".. This highlights how the flashcard that was due today (tagged with \"pop\") was updated"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "when it was viewed during the timetrial and was no longer considered due. Thus, when the user"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "tried to exit, only the one overdue flashcard which was still not viewed was flagged."
      }
    ],
    "authorContributionMap": {
      "chanjunren": 57,
      "jaesimin": 315,
      "ckb055": 65,
      "Sahilgat": 480,
      "-": 321,
      "Sam-limyr": 246
    }
  },
  {
    "path": "docs/OriginalDG.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d AddressBook Level 3 - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* * *` |user |add a new person |"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* * *` |user |delete a person |remove entries that I no longer need"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`*` |user with many persons in the address book |sort persons by name |locate a person easily"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Use case: Delete person"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "2.  AddressBook shows a list of persons"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "3.  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "4.  AddressBook deletes the person"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "+"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "+"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "+"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "+"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jaesimin": 427
    }
  },
  {
    "path": "docs/OriginalUG.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d AddressBook Level 3 - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "AddressBook Level 3 (AB3) is for those who *prefer to use a desktop app for managing contacts*. More importantly, AB3 is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, AB3 can get your contact management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Adding a person: `add`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Adds a person to the address book +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "A person can have any number of tags (including 0)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Listing all persons : `list`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Shows a list of all persons in the address book. +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Editing a person : `edit`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Edits an existing person in the address book. +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "****"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "****"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Locating persons by name: `find`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Finds persons whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "****"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "****"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Returns any person having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Deleting a person : `delete`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Deletes the specified person from the address book. +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "****"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "****"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Deletes the 2nd person in the address book."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Clears all entries from the address book. +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "e.g. `find James Jake`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jaesimin": 178
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d StudyBuddyPro - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":source-highlighter: rouge"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":important-caption: :heavy_exclamation_mark:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-W13-3"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "By: `Team AY1920S1-CS2103T-W13-3`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "StudyBuddyPro is a student application that aims to simplify the hassle of revision"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "by providing a suite of tools for effective revision."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "StudyBuddyPro is optimized for students who prefer to work with"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "a Command Line Interface (CLI) while still having the benefits of a"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Moreover, StudyBuddyPro comes geared with pre-loaded features specially"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "catered for computing students. So whether you\u0027re a computing student getting"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "used to a CLI for the first time or if you\u0027re a CLI expert who wants to reap"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "the benefits of a fast typing speed, give StudyBuddyPro a try! {To be implemented!}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "If you\u0027re interested, head over to the"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "https://github.com/AY1920S1-CS2103T-W13-3/main/blob/master/docs/UserGuide.adoc#2-quick-start[Quick Start]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "section to get started!"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Callouts Signs"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Do refer to the signs below that will be used across the documents for references. These will prove to be useful when you are reading this document."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Indicates information that are to be adhere as potential problems may be encountered if you are not careful."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Indicates information that are crucial to understand so that you will be able to follow the flow of the document. Confusion may arise if you do not grasp the information here."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Indicates information that are note-worthy. Do read them for more information and better understandings."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Indicates additional information that are helpful. Fret not, tips can be good to know but are not vital."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "NOTE: Please ensure you have Java 11 or above installed before proceeding!"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "1. Download the latest version of `StudyBuddyPro.jar` https://github.com/AY1920S1-CS2103T-W13-3/main/releases[here]."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "2. Place the file in the folder you want to set as the home directory. All data and"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "miscellaneous files associated with StudyBuddyPro will be placed in this folder."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "3. Double-click `StudyBuddyPro.jar` to launch the application. The GUI should appear in a few seconds. If not, please"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "refer to the first question in the"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "https://github.com/AY1920S1-CS2103T-W13-3/main/blob/master/docs/UserGuide.adoc#8-FAQ[FAQ]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "for help!"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "image::Ui.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "4. Type a command in the command box execute it by pressing kbd:[Enter]. Refer to the"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "https://github.com/AY1920S1-CS2103T-W13-3/main/blob/master/docs/UserGuide.adoc#9-command-summary[Command Summary]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "section for a quick overview of all the available commands!"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Command Format / Rules"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Things noted here are standardization of the User Guide."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "These points are absolute, unless stated otherwise in the specific section(s)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d\u003d How to read the Command sections"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "* Words in `UPPER_CASE` are parameters to be supplied by the user."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "E.g. `add t/TITLE` -\u003e `TITLE` is a parameter which can be used as `add t/Midterm notes`."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* Items indicated in square brackets are optional."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "E.g `t/TITLE [tag/TAG]` can be used as `t/Midterm note tag/exam` or as `t/Midterm`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Items with `...`​ after them can be used multiple times including zero times."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "E.g. `[tag/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `tag/friend`, `tag/friend tag/family`."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d\u003d General rules for all commands"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "* All commands are written in English with alphanumeric characters."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "* Any indexes provided (denoted by \u0027(index)\u0027 ) must be a positive integer (e.g. 1, 2, 3, ...)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "* All flashcards, notes, and cheatsheets can have a maximum of 10 tags."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Only exact matches of any searches will be returned."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "E.g. \"noted\" will return \"noted\" but not \"note\" or \"notes\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* All searches are case insensitive."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "E.g. \u0027cs2103t\u0027 will match \u0027CS2103T\u0027"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Global Commands"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Global commands in StudyBuddyPro are commands that can be called regardless of which mode the user is currently in."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d Entering the various modes of StudyBuddyPro: `switch`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ckb055"
        },
        "content": "Upon startup, you will be prompted to enter one of the modes before you can proceed."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d Getting into Flashcard mode: `switch fc`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Switches the user to"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "https://github.com/AY1920S1-CS2103T-W13-3/main/blob/master/docs/UserGuide.adoc#5-flashcard-commands[Flashcard]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "mode regardless of where the user is."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Format: switch fc"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d Getting into Notes function: `switch notes`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Brings the user to"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "https://github.com/AY1920S1-CS2103T-W13-3/main/blob/master/docs/UserGuide.adoc#6-note-commands[Notes]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "mode regardless of where the user is."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Format: switch notes"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d Getting into CheatSheet function: `switch cs`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Brings the user to"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "https://github.com/AY1920S1-CS2103T-W13-3/main/blob/master/docs/UserGuide.adoc#7-cheatsheet-commands[CheatSheet]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "mode regardless of where the user is."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Format: switch cs"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d\u003d\u003d Viewing Help: `help`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "A pop-up dialog box will display a URL link to a help document."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Format: help"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d\u003d\u003d Listing all current Tags in StudyBuddyPro : `taglist`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ckb055"
        },
        "content": "Displays a full list of all tags currently in StudyBuddyPro."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Format: taglist"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Expected output:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Here are all the tags in StudyBuddyPro."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Listing all tags :"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    [cs2100] |  flashcards : 0 notes : 3 cheatsheets : 1"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    [cs2101] |  flashcards : 6 notes : 2 cheatsheets : 1"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    [cs2104] |  flashcards : 20 notes : 8 cheatsheets : 3"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    [math] |  flashcards : 10 notes : 2 cheatsheets : 1"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    [pipelining] |  flashcards : 1 notes : 5 cheatsheets : 2"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* The user can make use of taglist, to quickly see which tag they would like to view."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* The user is able to view how many flashcards, notes and cheatsheets respectively there are in each tag."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* The list of tags is also automatically sorted alphabetically."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* If there are no longer any items with the specified tag, the tag will be removed from this list."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d Listing all StudyBuddyPro items by their tag : `filterall`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Lists all StudyBuddyPro items with matching tags in the application."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Format: filterall tag/TAG [tag/TAG]..."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Example usage: filterall tag/CS2100"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Expected output:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Lists the whole StudyBuddyPro after filtering by tag(s) :"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    CS2100"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Flashcard: 6."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Question: What is 101 Binary in its Decimal form?"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Answer: 5"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Title: BinaryQn"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Tags: [cs2100]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    CheatSheet: 7."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Title: cs2100 stuff"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Tags: [cs2100]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Contents: [ 1. Pipelining is a process where a processor executes multiple processes simultaneously.]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            [ 2. Question: What is 101 Binary in its Decimal form?; Answer: 5 ]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Note: 5."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Title: Pipelining Definition"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Content: Pipelining is a process where a processor executes multiple processes simultaneously."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Tags: [cs2100]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Note Fragment: 6-2."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Title: About Notes"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Content: highlighted"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Tags: [cs2100]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "NOTE: \u0027Note Fragments\u0027 (as seen in the example above) are described further in the Notes section (see Section 6.1)."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ckb055"
        },
        "content": "The user is also able to specify a multiple number of tags."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ckb055"
        },
        "content": "For example,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    filterall tag/CS2100 tag/difficult"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ckb055"
        },
        "content": "will list all items that match all of the specified tags."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d\u003d Exiting the application: `exit`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Checks if there are any remaining flashcards to revise for the day"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "or overdue flashcards to revise before exiting the application."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Example usage: exit"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "If there are flashcards due for revision today but no overdue flashcards:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Expected output: Are you sure you want to exit? You still have the following flashcards overdue or left"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    to revise for today:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Here are the flashcards due today:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    1. Math Question 1 - What is 2 x 2?"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Type \u0027exit\u0027 again to exit the application!"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "If there are no flashcards due for revision today but there are overdue flashcards:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Expected output: Are you sure you want to exit? You still have the following flashcards overdue or left"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    to revise for today:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Here are your overdue flashcards:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    1. Math Question 1 - What is 2 x 2? (Was due on 2019-10-30)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Type \u0027exit\u0027 again to exit the application!"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "If there are both flashcards due for revision today and overdue flashcards:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Expected output: Are you sure you want to exit? You still have the following flashcards overdue or left"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    to revise for today:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Here are the flashcards due today:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    1. Math Question 1 - What is 2 x 2?"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Here are your overdue flashcards:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    1. Math Question 2 - What is 3 x 2? (Was due on 2019-10-30)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Type \u0027exit\u0027 again to exit the application!"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "After any of the 3 scenarios above user can override the warning by entering the `exit` command again."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "if no remaining or overdue flashcards for revision found, application exits immediately."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d\u003d\u003d Editing a tag: `edit tag` (proposed in v2.0)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ckb055"
        },
        "content": "Edits a tag by the specified index."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Format: edit tag/CURRENT tag/NEW"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Example usage: edit tag/midterm tag/finals"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Expected output:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Tag editted!"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    All items and contents in StudyBuddy tagged ‘midterm’ is replaced with tag ‘finals’."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ckb055"
        },
        "content": "Allows the user to easily modify the tags of all the items. For instance, if every item that is marked difficult does not appear hard to you"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ckb055"
        },
        "content": "anymore, you could replace all items tagged \u0027difficult\u0027 with a tag \u0027moderate\u0027."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d\u003d Flashcard Feature"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d\u003d\u003d Creating a flashcard: `add`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Adds a flashcard from user input question \u003cQUESTION\u003e and answer \u003cANSWER\u003e."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Format: add q/QUESTION a/ANSWER t/TITLE [tag/TAG]..."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Example usage: add q/What is 100 Binary in its Decimal form? a/4 t/Binary Stuff tag/CS2100"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Expected output: New flashcard added:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Title: Binary Stuff"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        Statictics: This flashcard was last viewed on: 2019-11-01. This flashcard should next be viewed on 2019-11-02 for optimum revision!"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Question: What is 100 Binary in its Decimal form?"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Answer: 4"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Tags: [cs2100]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d\u003d\u003d Viewing a flashcard: `view`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ckb055"
        },
        "content": "Displays flashcard \u003cFLASHCARD_INDEX\u003e to user without answer."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Format: view (index)"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Example usage: view 6"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Expected output: Viewing flashcard:"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Title: BinaryQn"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Question: What is 101 Binary in its Decimal form?"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Tags: [cs2100]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003d\u003d\u003d Revealing a flashcard\u0027s answer: `show`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "Displays the answer of the flashcard currently loaded."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    Format: show"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    Example usage: show"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    Expected output: Flashcard answer loaded"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d\u003d\u003d Editing a flashcard: `edit`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "{Coming in v2.0}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Edits flashcard \u003cFLASHCARD_ID\u003e by changing any field of the flashcard."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    Format: edit id/FLASHCARD_ID [m/MODULE] [q/NEW_QUESTION] [f/FILE_NAME] [a/ANSWER] [t/TITLE] [h/HINT] [tag/TAG]..."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Listing flashcards: `list`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "{Answer to be removed in v2.0}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Lists all flashcards."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ckb055"
        },
        "content": "   Format: list"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Expected output: Listed all flashcards:"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Question: What is my name?"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Answer: Sahil"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Title: Test Name Question 1"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Statistics: This flashcard was last viewed on: 2019-10-29. This flashcard should next be viewed on 2019-10-30 for optimum revision!"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Tags: [pop]"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d\u003d\u003d Deleting a flashcard: `delete`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ckb055"
        },
        "content": "Deletes the flashcard by \u003cFLASHCARD_INDEX\u003e."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ckb055"
        },
        "content": "The user will be prompted once to confirm their deletion."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ckb055"
        },
        "content": "   Format: delete (index)"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Example usage: delete 6"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Expected output: Are you sure you would like to delete the following flashcard?"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\t    Question: What is 101 Binary in its Decimal form?"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\t    Answer: 5"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\t    Title: BinaryQn"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\t    Statistics: This flashcard was last viewed on: 2019-10-31. This flashcard should next be viewed on 2019-11-01 for optimum revision!"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\t    Tags: [cs2100]"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Please use `delete 6` again to confirm your deletion.."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Upon hitting enter, the flashcard will be deleted."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Expected output: Deleted Flashcard:"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Question: What is 101 Binary in its Decimal form?"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Answer: 5"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Title: BinaryQn"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Statistics: This flashcard was last viewed on: 2019-10-31. This flashcard should next be viewed on 2019-11-01 for optimum revision!"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Tags: [cs2100]"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003d\u003d\u003d Time Trial: `timetrial`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Starts a time trial for flashcards with tag \u003cTAG\u003e for \u003cTIME\u003e seconds per flashcard."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    Format: timetrial [tag/TAG]..."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* At least one tag must be specified."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* If more than one tag is specified, selects all flashcards that contains all of the specified tags."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "* Default \u003cTIME\u003e will be 5 seconds."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "* Answer will be flashed for 3 seconds."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d\u003d\u003d Listing by tags: `filter`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* Filters the flashcard library by the user specified tag(s)."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* The user must specify at least one tag."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* The user is able to specify multiple tags."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* Flashcards that match all of the specified tags will be displayed."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Format: filter tag/TAG [tag/TAG]..."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Example usage: filter tag/difficult"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Expeted output: Filter flashcards by tag(s) :"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        [difficult]"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        8. Question: What is 1+1?"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            Title: Basic addition"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            Tags: [difficult]"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        10. Question: What is 2x3?"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            Title: Maths"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            Tags: [difficult][important]"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d\u003d Remind"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Reminds the user regarding the flashcards due for revision today and the flashcards"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "overdue for revision. Automatically suggests a new date the flashcard should next be"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "viewed at for optimal learning. These increments scale with time i.e. suggested viewing"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "dates are closer at the start and spread further after more viewings. The suggested"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "date for the next viewing of all flashcards can be viewed under the `list` command."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "{Give example}"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Example usage: remind"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "If no flashcards due for revision today and no overdue flashcards:"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Expected output: Well done - No due or overdue flashcards!"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "If there are flashcards due for revision today but no overdue flashcards:"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Expected output: Here are the flashcards due today:"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    1. Math Question 1 - What is 2 x 2?"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "If there are no flashcards due for revision today but there are overdue flashcards:"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Expected output: Here are your overdue flashcards:"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    1. Math Question 1 - What is 2 x 2? (Was due on 2019-10-30)"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "If there are both flashcards due for revision today and overdue flashcards:"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Expected output: Here are the flashcards due today:"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    1. Math Question 1 - What is 2 x 2?"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Here are your overdue flashcards:"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    1. Math Question 2 - What is 3 x 2? (Was due on 2019-10-30)"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d\u003d Notes Feature:"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d\u003d\u003d Creating a note: `add`"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "* Adds a note from user input with title `TITLE` and content `CONTENT`. The title of the note cannot be a duplicate"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "of an existing note title."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ckb055"
        },
        "content": "Format: add t/TITLE c/CONTENT [tag/TAG]..."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Example usage: add t/Pipelining Definition c/Pipelining is a process where a processor executes multiple processes simultaneously. tag/cs2100"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "New note added:"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Title: Pipelining Definition"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Content: Pipelining is a process where a processor executes multiple processes simultaneously."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Tags: [cs2100]"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "The added Note has no detected note fragment tags!"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "* More advanced usage: Tagging of note fragments is also supported. The note fragment tagging is added at the"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "same time as the note is created."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "* Note fragment tags are added with content `FRAGMENT_CONTENT`, at least one tag"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "`FRAGMENT_TAG`, and any number of additional tags `ADDITIONAL_FRAGMENT_TAG`:"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Format (within CONTENT): /* C/FRAGMENT_CONTENT TAG/FRAGMENT_TAG [TAG/ADDITIONAL_FRAGMENT_TAG]... */"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "IMPORTANT: The format for note fragment content is \u0027C/\u0027, not \u0027c/\u0027, and the format for note fragment tags is \u0027TAG/\u0027, not"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u0027tag/\u0027."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "WARNING: If the format is not followed correctly, the note fragment tag will simply not be added (but the note will"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "still be added). StudyBuddyPro will assume that the user typed the tags correctly."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "* In the following example, two note fragment tags are added to the same note fragment:"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Example usage: add t/About Notes c/Notes can be /* C/highlighted TAG/highlight TAG/important */ if needed. tag/about"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "New note added:"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\tTitle: About Notes"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\tContent: Notes can be /* C/highlighted TAG/highlight TAG/important */ if needed."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\tTags: [about]"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Note fragment tags detected:"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\tTitle: About Notes"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\tContent: highlighted"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\tTags: [important][highlight]"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "* This adds a note with content \"Notes can be highlighted if needed.\", and a note fragment tag with content"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\"highlighted\" and two tags \"cs2100\" and \"important\"."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "* Multiple note fragment tags are allowed. These do not interfere with the other tags of the Note."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "IMPORTANT: Overlapping note fragment tags are not allowed."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "NOTE: Note fragment tags can be used for filtering notes (see Section 6.6), or filtering globally (see Section 4.3)."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "For a clearer visualization of note fragments, compare the `view` (see Section 6.3) and `viewraw` (see Section 6.4)"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "commands."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d\u003d\u003d Deleting a note: `delete`"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Deletes the note of index `NOTE_INDEX`."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "ckb055"
        },
        "content": "The user will be prompted once to confirm their deletion."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "ckb055"
        },
        "content": "Format: delete (index)"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Example usage: delete 3"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "ckb055"
        },
        "content": "Are you sure you would like to delete the following note?"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Title: About Notes"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Content: Notes can be /* C/highlighted TAG/highlight TAG/important */ if needed."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Tags: [about]"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Please use `delete 3` again to confirm your deletion."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Upon hitting enter, the note will be deleted."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Deleted note:"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Title: About Notes"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Content: Notes can be /* C/highlighted TAG/cs2100 TAG/important */ if needed."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Tags: [about]"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d\u003d\u003d Viewing a note: `view`"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Views the note of index `NOTE_INDEX`. If the note contains any note fragment tags, those tags will be hidden."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "NOTE: To view the note with its note fragment tags, use the `viewraw` command instead (see Section 6.4)."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "ckb055"
        },
        "content": "Format: view (index)"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Example usage: view 3"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Viewing note:"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Title: About Notes"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Content: Notes can be highlighted if needed."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Tags: [about]"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d Viewing a raw note: `viewraw`"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Views the note of index `NOTE_INDEX`. The note is shown exactly as written, including all note fragment tags."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Format: viewraw (index)"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Example usage: viewraw 3"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Viewing raw note:"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Title: About Notes"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Content: Notes can be /* C/highlighted TAG/cs2100 TAG/important */ if needed."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Tags: [about]"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Listing notes: `list`"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* Lists all notes found in StudyBuddyPro."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "ckb055"
        },
        "content": "Format: list"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "a complete list of all notes currently in StudyBuddyPro"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Example output:"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Listing all notes:"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "1."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Title: Pipelining Definition"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Content: Pipelining is a process where a /* C/processor TAG/mips */ executes multiple processes simultaneously."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Tags: [cs2100]"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "2."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Title: UML Diagrams"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Content: UML Diagrams help with visualizing project structure."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Tags: [cs2103t]"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "NOTE: Notes will be labeled with indices \u00271\u0027, \u00272\u0027 etc. Note fragment tags will not be listed along with the notes. To"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "visualize specific note fragment tags, use the `filter` command (see Section 6.6)."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d Filtering by tags: `filter`"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* Filters the note library by the user specified tag(s)."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "* The user must specify at least one tag, and can specify multiple tags."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* Notes that match all of the specified tags will be displayed."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* Note fragment tags containing all of the specified tags will also be displayed, even if their parent note is"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "not tagged."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "ckb055"
        },
        "content": "Format: filter tag/TAG [tag/TAG]..."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "ckb055"
        },
        "content": "Example usage: filter tag/difficult"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "ckb055"
        },
        "content": "Expeted output: Filter notes by tag(s) :"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    [difficult]"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    2. Title: Tough Math"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Content: 1 + 2 is 3."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Tags: [difficult]"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    4. Title: MA1521 Chapter 5"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Content: dy/dx \u003d 0 is turning point of bellcurve."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Tags: [difficult][MA1521]"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    5-1. Title: CS2103T"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "          Content: sequence diagram"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "          Tags: [difficult][diagram]"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "NOTE: Notes will be labeled with indices \u00271\u0027, \u00272\u0027 etc. Note fragment tags will be labeled with \u00271-1\u0027, \u00271-2\u0027, \u00272-1\u0027 etc."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u00275-1\u0027 means \u0027the first note fragment tag in the fifth note\u0027."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d Editing a note: `edit` (Coming in v2.0)"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Edits a note\u0027s title, content, or tags. The note will be referred to by their original title `ORIGINAL_TITLE`."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "* The user can specify one of the optional fields to edit."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Format: edit ORIGINAL_TITLE [t/TITLE] [c/CONTENT] [tag/TAG]..."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Example usage: edit Pipelining Definition t/Pipelined Definition tag/cs2100finals"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Edited Note:"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Title: Pipelined Definition"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Content: Pipelining is a process where a processor executes multiple processes simultaneously."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Tags: [cs2100finals]"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "```"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d\u003d CheatSheet Feature:"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "All the operations in this section assume that the user is in the _cheatsheet_ mode."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "tag::cheatsheetAdd[]"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Creating a Cheatsheet: `add`"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Adds a cheatsheet from user input title \u003cTITLE\u003e and content \u003cCONTENT\u003e. Flashcards and notes in StudyBuddyPro that have the specified tag will be used as contents in the cheatsheet."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Format: add t/TITLE [tag/TAG]..."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Example usage:"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    add t/CS2100 Midterm CheatSheet tag/cs2100midterm"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Assuming that there is a flashcard object with the tag \"cs2100midterm\""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    New cheatsheet added:"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Title: CS2100 Midterm CheatSheet"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Tags: [cs2100midterm]"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    1 content(s) have been successfully generated from the other modes."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "end::cheatsheetAdd[]"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "tag::cheatsheetEdit[]"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Editing a Cheatsheet: `edit`"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Edits cheatsheet\u0027s title, tag, content by a specified \u003cCHEATSHEET_INDEX\u003e. At least one of the optional fields must be specified to edit."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    Format: edit (index) [t/TITLE] [tag/TAG]..."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "** Only `t/TITLE` optional field will overwrite its field."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "** All other optional fields will remove itsn existing content(s)."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "** Any invalid `c/CONTENT_INDEX` or `tag/TAG` will be *ignored*."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Example CheatSheet of index 8:"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    Title: cs2100 cheatsheet"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    Tags: [cs2100finals][formula]"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    Contents: [ 1. Question: What is 110 Binary in its Decimal Form?; Answer: 6 ]"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "              [ 2. 10 + 10 \u003d 20]"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Example usage:"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    edit 8 t/cs2100 final cheatsheet tag/formula"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The actual implementation does not show the contents in the feedback box. Please do use `view` command to view them!"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    Edited Cheatsheet:"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Title: cs2100 final cheatsheet"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Tags: [cs2100finals]"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Contents: [ 1. Question: What is 110 Binary in its Decimal Form?; Answer: 6 ]"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "end::cheatsheetEdit[]"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Deleting a Cheatsheet: `delete`"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Deletes a cheatsheet by the specified index."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "ckb055"
        },
        "content": "The user will be prompted once to confirm their deletion."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Format: delete (index)"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Example usage: delete 8"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Expected output:"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Are you sure you would like to delete the following cheatsheet?"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Title: CS2100 Finals CheatSheet Tags: [finalcheatsheet]"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Contents: [ 1. Question: What is 110 Binary in its Decimal Form?; Answer: 6 ]"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            [ 2. 110 in Binary is 6 is Decimal ]"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Please use `delete 8` again to confirm your deletion."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Upon hitting enter, the specified cheatsheet will be deleted."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Expected output: Deleted Cheatsheet:"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Title: CS2100 Finals CheatSheet Tags: [finalcheatsheet]"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Contents: [ 1. Question: What is 110 Binary in its Decimal Form?; Answer: 6 ]"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            [ 2. 110 in Binary is 6 is Decimal ]"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "tag::cheatsheetView[]"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Viewing Cheatsheets: `view`"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Views a cheatsheet by the specified index."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "   Format: view (index)"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Example CheatSheet of index 1:"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    Title: cs2100 cheatsheet"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    Tags: [cs2100finals][important]"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    Contents: [ 1. Question: What is 110 Binary in its Decimal Form?; Answer: 6 ]"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "              [ 2. 10 + 10 \u003d 20]"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Example usage:"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    view 1"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".Screenshot for `view 1` expected output"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::jasmineDiagrams/ssForViewUG.png[]"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The above screenshot shows the cheatsheet with index 1 in the GUI of StudyBuddyPro."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "end::cheatsheetView[]"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "tag::cheatsheetViewSpecific[]"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Viewing Cheatsheets of Specific Tag: `show`"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Views a cheatsheet\u0027s content for a specified tag. User must be in a `view` command before using `show` command."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "   Format: show (index)"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Assuming user is in the `view 1` command from above example in `view` command."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Example usage:"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    show 1"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Currently, cheatsheets only allow contents that match all the specified tags. Hence, `show` command will only show color toggling at the tags segment at the moment."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".Screenshot for `show 1` expected output"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::jasmineDiagrams/ssForViewSpecificUG.png[]"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The above screenshot shows the cheatsheet\u0027s content with tag index 1 in the GUI of StudyBuddyPro."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "end::cheatsheetViewSpecific[]"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "tag::cheatsheetList[]"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Listing Cheatsheets: `list`"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Lists all cheatsheets found in StudyBuddyPro."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "ckb055"
        },
        "content": "   Format: list"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "end::cheatsheetList[]"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d\u003d\u003d Listing by tags: `filter`"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Filters the cheatsheet library by the user specified tag(s)."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* The user must specify at least one tag."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* The user is able to specify multiple tags."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* CheatSheets that match all of the specified tags will be displayed."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Format: filter tag/TAG [tag/TAG]..."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Example usage: filter tag/difficult"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    Expeted output: Filter cheatsheet by tag(s) :"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        [difficult]"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        2. Title: Tough Math"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            Tags: [difficult][math]"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            Content: [ 1. Question: What\u0027s 1+1; Answer: 2 ]"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                [ 2. Question: what is 100 + 10; Answer: 110 ]"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        7. Title: MA1521 Chapter 5"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            Tags: [difficult]"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            Content: [ 1. dy/dx is a process where mathematicians..]"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                [ 2. Question: what is dy/dx?; Answer: find gradient]"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "tag::cheatsheetUpdate[]"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Updating a Cheatsheet: `update` (Coming in v2.0)"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Updates cheatsheet\u0027s contents by a specified \u003cCHEATSHEET_INDEX\u003e. Tags specified are added into the list of tags for the cheatsheet if it not already exist."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "This command may overwrite any customization of contents done prior to it as the cheatsheet\u0027s contents will be regenerated."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    Format: update (index) [tag/TAG]..."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Example CheatSheet of index 8:"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    Title: cs2100 cheatsheet"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    Tags: [cs2100finals]"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    Contents: [ 1. Question: What is 110 Binary in its Decimal Form?; Answer: 6 ]"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Example usage 1:"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    update 8"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The actual implementation does not show the contents in the feedback box. Please do use `view` command to view them!"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    Updated Cheatsheet:"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    Title: cs2100 final cheatsheet"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    Tags: [cs2100finals]"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    Contents: [ 1. Question: What is 110 Binary in its Decimal Form?; Answer: 6 ]"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "              [ 2. Binary is in bits of 1 and 0.]"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Example usage 2:"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    update 8 tag/formula"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The actual implementation does not show the contents in the feedback box. Please do use `view` command to view them!"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    Updated Cheatsheet:"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    Title: cs2100 final cheatsheet"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    Tags: [cs2100finals][formula]"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    Contents: [ 1. Question: What is 110 Binary in its Decimal Form?; Answer: 6 ]"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "              [ 2. 10 + 10 \u003d 20]"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "end::cheatsheetUpdate[]"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "*Q*: Help! Double-clicking `StudyBuddyPro.jar` does not launch the application - what"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "should I do? +"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "*A*: Trying running the application from the command line using the following command:"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "`java -jar StudyBuddyPro.jar`. Windows users can use the Command Prompt application to"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "do this while Mac users can use the Terminal application."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "{To be added}"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d\u003d Global Commands"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d\u003d Flashcard Commands"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d\u003d Note Commands"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d `add`: Adds a Note."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d `delete`: Deletes a Note."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d `view`: Views a Note without note fragment tags."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d `viewraw`: View a Note with note fragment tags."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d `list`: Views all Note titles."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d `filter`: Filters the list of Notes to view."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d\u003d CheatSheet Commands"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chanjunren": 13,
      "ckb055": 212,
      "jaesimin": 275,
      "Sahilgat": 134,
      "-": 93,
      "Sam-limyr": 214
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteFlashcard(f)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveStudyBuddyBook(studyBuddyBook)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 2,
      "-": 35
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "participant \":StudyBuddyParser\" as StudyBuddyParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "participant \":DeleteFlashcardCommandParser\" as DeleteFlashcardCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "participant \"d:DeleteFlashcardCommand\" as DeleteFlashcardCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "LogicManager -\u003e StudyBuddyParser : parseCommand(\"delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "activate StudyBuddyParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "create DeleteFlashcardCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "StudyBuddyParser -\u003e DeleteFlashcardCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "activate DeleteFlashcardCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "DeleteFlashcardCommandParser --\u003e StudyBuddyParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "deactivate DeleteFlashcardCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "StudyBuddyParser -\u003e DeleteFlashcardCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "activate DeleteFlashcardCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "create DeleteFlashcardCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "DeleteFlashcardCommandParser -\u003e DeleteFlashcardCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "activate DeleteFlashcardCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "DeleteFlashcardCommand --\u003e DeleteFlashcardCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "deactivate DeleteFlashcardCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "DeleteFlashcardCommandParser --\u003e StudyBuddyParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "deactivate DeleteFlashcardCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "DeleteFlashcardCommandParser -[hidden]-\u003e StudyBuddyParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "destroy DeleteFlashcardCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "StudyBuddyParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "deactivate StudyBuddyParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "LogicManager -\u003e DeleteFlashcardCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "activate DeleteFlashcardCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "DeleteFlashcardCommand -\u003e Model : deleteFlashcard(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Model --\u003e DeleteFlashcardCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "DeleteFlashcardCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "CommandResult --\u003e DeleteFlashcardCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "DeleteFlashcardCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "deactivate DeleteFlashcardCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 31,
      "-": 38
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Class StudyBuddyParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "LogicManager --\u003e\"1\" StudyBuddyParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "StudyBuddyParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 3,
      "-": 59
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Interface ReadOnlyStudyBuddyBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Class StudyBuddyBook"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Class ReadOnlyStudyBuddyBook"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Class UniqueFlashcardList"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Class UniqueNoteList"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Class UniqueCheatSheetList"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Package Flashcard {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Package Note {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Package CheatSheet {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "HiddenOutside ...\u003e Model"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "StudyBuddyBook .up.|\u003e ReadOnlyStudyBuddyBook"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "ModelManager o-left-\u003e \"1\" StudyBuddyBook"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "ModelManager o--\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "StudyBuddyBook *--\u003e \"1\" UniqueFlashcardList"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "StudyBuddyBook *--\u003e \"1\" UniqueNoteList"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "StudyBuddyBook *--\u003e \"1\" UniqueCheatSheetList"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "UniqueFlashcardList o--\u003e \"*\" Flashcard"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "UniqueNoteList o--\u003e \"*\" Note"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "UniqueCheatSheetList o--\u003e \"*\" CheatSheet"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "CheatSheet *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Note *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Flashcard *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "UniqueFlashcardList -[hidden]right-\u003e UniqueNoteList"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "UniqueNoteList -[hidden]right-\u003e UniqueCheatSheetList"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Flashcard -[hidden]right-\u003e Note"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Note -[hidden]right-\u003e CheatSheet"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "ModelManager --\u003e\"1\" Flashcard : filtered list"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "ModelManager --\u003e\"1\" Note : filtered list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "ModelManager --\u003e\"1\" CheatSheet : filtered list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "Sam-limyr": 35
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Interface StudyBuddyBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Class JsonStudyBuddyBook"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckb055"
        },
        "content": "Class JsonSerializableCheatSheet"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckb055"
        },
        "content": "Class JsonSerializableFlashcard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": "Class JsonSerializableNote"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckb055"
        },
        "content": "Class JsonAdaptedCheatSheet"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckb055"
        },
        "content": "Class JsonAdaptedContent"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckb055"
        },
        "content": "Class JsonAdaptedFlashcard"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": "Class JsonAdaptedNote"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckb055"
        },
        "content": "Class JsonAdaptedTag"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "StorageManager o--\u003e StudyBuddyBook"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "JsonStudyBuddyBook.left.|\u003e StudyBuddyBook"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "JsonStudyBuddyBook .down.\u003e JsonSerializableCheatSheet"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "JsonStudyBuddyBook .down.\u003e JsonSerializableFlashcard"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "JsonStudyBuddyBook .down.\u003e JsonSerializableNote"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckb055"
        },
        "content": "JsonSerializableCheatSheet .down.\u003e JsonAdaptedCheatSheet"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckb055"
        },
        "content": "JsonAdaptedCheatSheet .down.\u003e JsonAdaptedContent"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckb055"
        },
        "content": "JsonAdaptedCheatSheet .down.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckb055"
        },
        "content": "JsonSerializableFlashcard .down.\u003e JsonAdaptedFlashcard"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckb055"
        },
        "content": "JsonAdaptedFlashcard .down.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckb055"
        },
        "content": "JsonSerializableNote .down.\u003e JsonAdaptedNote"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckb055"
        },
        "content": "JsonAdaptedNote .down.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 7,
      "ckb055": 18,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "Class ActivityWindow"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "Class FlashcardTabWindow"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "Class NotesTabWindow"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "Class CheatsheetTabWindow"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "MainWindow *-down-\u003e ActivityWindow"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "ActivityWindow *-down-\u003e FlashcardTabWindow"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "ActivityWindow *-down-\u003e NotesTabWindow"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "ActivityWindow *-down-\u003e CheatsheetTabWindow"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "ActivityWindow --|\u003e UiPart"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "FlashcardTabWindow ..\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "NotesTabWindow ..\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "CheatsheetTabWindow ..\u003e Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "ActivityWindow -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 14,
      "-": 52
    }
  },
  {
    "path": "docs/diagrams/jasmineUml/AddCheatSheetDetailedSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "participant \"cs:AddCheatSheetCommand\" as AddCheatSheetCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "participant \"edit:EditCheatSheetDescriptor\" as EditCheatSheetDescriptor LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "participant \"editedCheatSheet:CheatSheet\" as CheatSheet LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "AddCheatSheetCommand -\u003e Model : addCheatSheet(toAdd)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Model --\u003e AddCheatSheetCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "create EditCheatSheetDescriptor"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "AddCheatSheetCommand -\u003e EditCheatSheetDescriptor"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "activate EditCheatSheetDescriptor"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "EditCheatSheetDescriptor --\u003e AddCheatSheetCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "deactivate EditCheatSheetDescriptor"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "AddCheatSheetCommand -\u003e AddCheatSheetCommand : getRelevantContents(tags, model)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "activate AddCheatSheetCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "AddCheatSheetCommand --\u003e AddCheatSheetCommand : contents"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "deactivate AddCheatSheetCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "AddCheatSheetCommand -\u003e EditCheatSheetDescriptor : setContents(contents)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "activate EditCheatSheetDescriptor"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "EditCheatSheetDescriptor --\u003e AddCheatSheetCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "deactivate EditCheatSheetDescriptor"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "create CheatSheet"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "AddCheatSheetCommand -\u003e CheatSheet : createEditedCheatSheet(toAdd, edit, true)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "activate CheatSheet"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "CheatSheet --\u003e AddCheatSheetCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "deactivate CheatSheet"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "AddCheatSheetCommand -\u003e Model : setCheatSheet(toAdd, editedCheatSheet)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Model --\u003e AddCheatSheetCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "AddCheatSheetCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "CommandResult --\u003e AddCheatSheetCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 60
    }
  },
  {
    "path": "docs/diagrams/jasmineUml/AddCheatSheetSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "participant \":StudyBuddyParser\" as StudyBuddyParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "participant \":AddCheatSheetCommandParser\" as AddCheatSheetCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "participant \"cs:AddCheatSheetCommand\" as AddCheatSheetCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "box Storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "participant \":StudyBuddyBook\" as StudyBuddyBook STORAGE_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "end box"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[-\u003e LogicManager : execute(\"add t/a_title tag/a_tag\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "LogicManager -\u003e StudyBuddyParser : parseCommand(\"add t/a_title tag/a_tag\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "activate StudyBuddyParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "StudyBuddyParser -\u003e StudyBuddyParser : parseCheatSheetCommands(\"add\", \"t/a_title tag/a_tag\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "create AddCheatSheetCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "StudyBuddyParser -\u003e AddCheatSheetCommandParser : parse(\"t/a_title tag/a_tag\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "activate AddCheatSheetCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "create AddCheatSheetCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "AddCheatSheetCommandParser -\u003e AddCheatSheetCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "activate AddCheatSheetCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "AddCheatSheetCommand --\u003e AddCheatSheetCommandParser"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "deactivate AddCheatSheetCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "AddCheatSheetCommandParser --\u003e StudyBuddyParser : cs"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "deactivate AddCheatSheetCommandParser"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "StudyBuddyParser --\u003e LogicManager : cs"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "deactivate StudyBuddyParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "LogicManager -\u003e AddCheatSheetCommand : execute()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "activate AddCheatSheetCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "ref over AddCheatSheetCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    retrieving relevant tagged contents"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "end ref"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "AddCheatSheetCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "deactivate AddCheatSheetCommand"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "AddCheatSheetCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "destroy AddCheatSheetCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "LogicManager -\u003e Model : getStudyBuddyBook()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Model --\u003e LogicManager : studyBuddyBook"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "LogicManager -\u003e StudyBuddyBook : saveStudyBuddyBook(studyBuddyBook)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "activate StudyBuddyBook"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "StudyBuddyBook --\u003e LogicManager"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "deactivate StudyBuddyBook"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 71
    }
  },
  {
    "path": "docs/diagrams/jasmineUml/EditCheatSheetCommandActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "if () then ([edit command])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    :Parse commands and check the argument;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    if () then ([not updating both tags and contents])"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        : Create new CheatSheet object for editing;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        : Add into object, if any, changes for title;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        :Add changes for contents;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        :Add changes for tags;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        if () then ([contents match tag])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                    :Remove contents;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                else ([else])"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                    :Keep contents;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                endif"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        : Replace edited CheatSheet object with target;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        : Save into StudyBuddyBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    else ([else])"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        :Throw Exception;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "endif"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "stop"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "@enduml"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jaesimin": 27
    }
  },
  {
    "path": "docs/diagrams/jasmineUml/SwitchActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "if () then ([switch command])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    :Parse commands and check the argument;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    if () then ([argument \u003d\u003d fs])"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        :Enter flashcard mode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    else if () then ([argument \u003d\u003d cs])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        :Enter cheatsheet mode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    else if () then ([argument \u003d\u003d notes])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        :Enter notes mode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    else ([else])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        :Throw Exception;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "endif"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "stop"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 19
    }
  },
  {
    "path": "docs/diagrams/kaibinuml/ListAllByTagSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckb055"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckb055"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckb055"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckb055"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckb055"
        },
        "content": "participant \":StudyBuddyParser\" as StudyBuddyParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": "participant \":FilterAllByTagCommandParser\" as FilterAllByTagCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckb055"
        },
        "content": "participant \"fa:FilterAllByTagCommand\" as FilterAllByTagCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckb055"
        },
        "content": "participant \"tagPredicate:StudyBuddyItemContainsTagPredicate\" as StudyBuddyItemContainsTagPredicate LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckb055"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckb055"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckb055"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckb055"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckb055"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckb055"
        },
        "content": "[-\u003e LogicManager : execute(\"filterall tag/cs2100\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckb055"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": "LogicManager -\u003e StudyBuddyParser : parseCommand (filterall tag/cs2100\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckb055"
        },
        "content": "activate StudyBuddyParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckb055"
        },
        "content": "create FilterAllByTagCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckb055"
        },
        "content": "StudyBuddyParser -\u003e FilterAllByTagCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckb055"
        },
        "content": "activate FilterAllByTagCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckb055"
        },
        "content": "FilterAllByTagCommandParser --\u003e StudyBuddyParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckb055"
        },
        "content": "deactivate FilterAllByTagCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": "StudyBuddyParser -\u003e FilterAllByTagCommandParser : parse(\"cs2100\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckb055"
        },
        "content": "activate FilterAllByTagCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckb055"
        },
        "content": "create FilterAllByTagCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckb055"
        },
        "content": "FilterAllByTagCommandParser -\u003e FilterAllByTagCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckb055"
        },
        "content": "activate FilterAllByTagCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckb055"
        },
        "content": "create StudyBuddyItemContainsTagPredicate"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckb055"
        },
        "content": "FilterAllByTagCommand -\u003e StudyBuddyItemContainsTagPredicate"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckb055"
        },
        "content": "activate StudyBuddyItemContainsTagPredicate"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckb055"
        },
        "content": "StudyBuddyItemContainsTagPredicate --\u003e FilterAllByTagCommand : tagPredicate"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckb055"
        },
        "content": "deactivate StudyBuddyItemContainsTagPredicate"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckb055"
        },
        "content": "FilterAllByTagCommand --\u003e FilterAllByTagCommandParser : fa"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckb055"
        },
        "content": "deactivate FilterAllByTagCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckb055"
        },
        "content": "FilterAllByTagCommandParser --\u003e StudyBuddyParser : fa"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ckb055"
        },
        "content": "deactivate FilterAllByTagCommandParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckb055"
        },
        "content": "FilterAllByTagCommandParser -[hidden]-\u003e StudyBuddyParser"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckb055"
        },
        "content": "destroy FilterAllByTagCommandParser"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckb055"
        },
        "content": "StudyBuddyParser --\u003e LogicManager : fa"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckb055"
        },
        "content": "deactivate StudyBuddyParser"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ckb055"
        },
        "content": "LogicManager -\u003e FilterAllByTagCommand : execute()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ckb055"
        },
        "content": "activate FilterAllByTagCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ckb055"
        },
        "content": "FilterAllByTagCommand -\u003e Model : collectTaggedItems(tagPredicate)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ckb055"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ckb055"
        },
        "content": "Model --\u003e FilterAllByTagCommand : tagListResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ckb055"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ckb055"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ckb055"
        },
        "content": "FilterAllByTagCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ckb055"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ckb055"
        },
        "content": "CommandResult --\u003e FilterAllByTagCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ckb055"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ckb055"
        },
        "content": "FilterAllByTagCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ckb055"
        },
        "content": "deactivate FilterAllByTagCommand"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ckb055"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ckb055"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ckb055"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ckb055": 77
    }
  },
  {
    "path": "docs/diagrams/kaibinuml/TaggingFeatureClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckb055"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckb055"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": "StudyBuddyItem \u003c|-down- CheatSheet"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckb055"
        },
        "content": "StudyBuddyItem \u003c|-down- Flashcard"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckb055"
        },
        "content": "StudyBuddyItem \u003c|-down- Note"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckb055"
        },
        "content": "Note \u003c|-down- NoteFragment"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckb055"
        },
        "content": "StudyBuddyItem *-down--- \"0..10\" Tag"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckb055"
        },
        "content": "class StudyBuddyItem {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003ccolor:#FFFFFF\u003eSet\u003cTag\u003e tags"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003ccolor:#FFFFFF\u003egetTags()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckb055"
        },
        "content": "class Note {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003ccolor:#FFFFFF\u003eList\u003cNoteFragment\u003e noteFragments"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckb055"
        },
        "content": "class Tag {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003ccolor:#FFFFFF\u003eString name"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckb055"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckb055"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ckb055": 23,
      "Sam-limyr": 3
    }
  },
  {
    "path": "docs/diagrams/kaibinuml/style.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckb055"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckb055"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckb055"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckb055"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckb055"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckb055"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckb055"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckb055"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckb055"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckb055"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckb055"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckb055"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckb055"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckb055"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckb055"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckb055"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckb055"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckb055"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckb055"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckb055"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckb055"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckb055"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckb055"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckb055"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckb055"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckb055"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckb055"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ckb055"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckb055"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckb055"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ckb055"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ckb055"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ckb055"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ckb055"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ckb055"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ckb055"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ckb055"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ckb055"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ckb055"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ckb055"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "ckb055": 74
    }
  },
  {
    "path": "docs/diagrams/reminduml/RemindActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "if () then ([User views flashcard])"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    :Something happens;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    :Something happens;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    :Something happens;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    if () then ([User enters timetrial mode])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        :Something happens;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        :Something happens;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    else([else])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        endif"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 15
    }
  },
  {
    "path": "docs/diagrams/reminduml/RemindFeatureRelevantClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\"\u003c\u003cenumeration\u003e\u003e\\nScheduleIncrement\" \"1\"\u003c-up- Statistics"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Flashcard *-down- \"1\" Statistics"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "class Flashcard {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003ccolor:#FFFFFF\u003egetStatistics() : Statistics"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "class Statistics {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003ccolor:#FFFFFF\u003eLocalDate lastViewed"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003ccolor:#FFFFFF\u003eLocalDate toViewNext"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003ccolor:#FFFFFF\u003esetLastViewed(newLastViewed : LocalDate)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003ccolor:#FFFFFF\u003eincreaseIncrement() : ScheduleIncrement"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003ccolor:#FFFFFF\u003eupdateToViewNext()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "enum \"\u003c\u003cenumeration\u003e\u003e\\nScheduleIncrement\" {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003ccolor:#FFFFFF\u003eFIRST, SECOND, THIRD, FOURTH, FIFTH, SIXTH, FINAL"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003cu\u003e\u003ccolor:#FFFFFF\u003egetNumberOfDays() : Integer"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003cu\u003e\u003ccolor:#FFFFFF\u003egetNextIncrement() : ScheduleIncrement"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 28
    }
  },
  {
    "path": "docs/diagrams/reminduml/RemindSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "participant \":StudyBuddyParser\" as StudyBuddyParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "participant \"r:RemindCommand\" as RemindCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "participant \":VersionedAddressBook\" as VersionedAddressBook MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "box Storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "end box"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "[-\u003e LogicManager : execute(undo)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(undo)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "create UndoCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "AddressBookParser -\u003e UndoCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "UndoCommand --\u003e AddressBookParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "AddressBookParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "LogicManager -\u003e UndoCommand : execute()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "UndoCommand -\u003e Model : undoAddressBook()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Model -\u003e VersionedAddressBook : undo()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "activate VersionedAddressBook"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "VersionedAddressBook -\u003e VersionedAddressBook :resetData(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "VersionedAddressBook --\u003e Model :"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "deactivate VersionedAddressBook"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Model --\u003e UndoCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "UndoCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "UndoCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "destroy UndoCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 57
    }
  },
  {
    "path": "docs/diagrams/reminduml/style.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 74
    }
  },
  {
    "path": "docs/diagrams/samUml/AddNoteSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "participant \":StudyBuddyParser\" as StudyBuddyParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "participant \":AddNoteCommandParser\" as AddNoteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "participant \"note:AddNoteCommand\" as AddNoteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "[-\u003e LogicManager : execute(\"add t/title c/content\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "LogicManager -\u003e StudyBuddyParser : parseCommand(\"add t/title c/content\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "activate StudyBuddyParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "StudyBuddyParser -\u003e StudyBuddyParser : parseNoteCommands(\"add\", \"t/title c/content\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "create AddNoteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "StudyBuddyParser -\u003e AddNoteCommandParser : parse(\"t/title c/content\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "activate AddNoteCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "create AddNoteCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "AddNoteCommandParser -\u003e AddNoteCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "activate AddNoteCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "AddNoteCommand --\u003e AddNoteCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "deactivate AddNoteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "AddNoteCommandParser --\u003e StudyBuddyParser : note"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "deactivate AddNoteCommandParser"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "StudyBuddyParser --\u003e LogicManager : note"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "deactivate StudyBuddyParser"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "LogicManager -\u003e AddNoteCommand : execute()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "activate AddNoteCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "AddNoteCommand -\u003e Model : addNote(toAdd)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Model --\u003e AddNoteCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "AddNoteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "CommandResult --\u003e AddNoteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "AddNoteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "deactivate AddNoteCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "AddNoteCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "destroy AddNoteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 65
    }
  },
  {
    "path": "docs/diagrams/samUml/NoteModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Package Logic \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Class NoteFeatureUtil LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Class StudyBuddyItem"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Class StudyBuddyBook"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Class UniqueNoteList"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Package Note {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Class Note"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Class NoteFragment"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Class Content"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Class Title"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Title -right[hidden]- Content"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "ModelManager ---\u003e \"1\" Note : filtered list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "UniqueNoteList o--\u003e \"*\" Note"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "ModelManager o-left-\u003e \"1\" StudyBuddyBook"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "StudyBuddyBook *-down-\u003e \"1\" UniqueNoteList"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Note o--\u003e \"*\" NoteFragment"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "NoteFragment --|\u003e Note"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Note -right-\u003e NoteFeatureUtil"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Note -left-|\u003e StudyBuddyItem"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Note *--\u003e \"1\" Content"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Note *--\u003e \"1\" Title"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Note o-up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "NoteFeatureUtil --\u003e NoteFragment"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 44
    }
  },
  {
    "path": "docs/team/Sam-limyr.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d Samuel Lim - Project Portfolio for StudyBuddyPro"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d About the Project"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Me and my team of four other software engineering coursemates were tasked with morphing a given codebase for a"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Command-Line Interface (CLI) desktop app originally designed to store contact information. We decided to morph the app"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "into an all-in-one study aid application, targeted specifically at NUS Computer Science students. Our app supports"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "the use of flashcards and notes, provides a timetrial feature for flashcards, and includes automatic"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "cheatsheet-generation tool."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "My role in this project was to write the code for Notes, implement their basic functions, and implement the ability"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "to add tags within the content of notes. Additionally, I was tasked with completing both the user guide and developer"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "guide portions for the entire Notes feature, and any other relevant documentation. This Project Portfolio thus"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "details my contributions to this project."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d Summary of Contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "* *Major contribution*: Added *Notes*, and implemented the ability to *add tags within Notes* (i.e. intra-content"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "tagging)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** What Notes are: Notes are pieces of information with titles, content, and optional tags. The operations that they"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "support are:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "*** Creation"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "*** Deletion"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "*** Viewing (in both raw form and simplified form)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "*** Filtering"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** What the Add Tags Within Notes feature is:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "*** Using a pre-defined syntax, allows the user to tag specific portions of a note with tags."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "*** These tags are independent of the note\u0027s original tags."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "*** They can be filtered just like normal notes can be, but cannot be directly viewed or listed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "*** They can be used to isolate specific pieces of information for cheatsheet-making."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Uses of Notes:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "*** Allows the user to store information in an accessible format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Uses of the Add Tags Within Notes feature:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "*** Allows fine-tuned addition of information to cheatsheets"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "*** Allows for specific highlighting of information in notes"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "* *Minor contribution*: Implemented the `view` and `viewraw` commands for Notes."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** What it is: Both commands view a given note fragment tag, but the `view` command also cleans up the syntax of the"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "note to remove the leftover syntax from the addition of the note fragment tag."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Project issue management:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "*** e.g. group issue reminders for DG, UG, testing, along with todos for each"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "*** Managed release v1.3 (out of v1.0 to v1.4)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "*** Wrote test code for all Note-related code"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "* \u003cI guess I need to pore through all my PRs and look for other documentation and code refactoring stuff; also need"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "to look at reposense and compare what\u0027s there\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d Contributions to User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d Creating a note: `add`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "* Adds a note from user input with title `TITLE` and content `CONTENT`. The title of the note cannot be a duplicate"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "of an existing note title."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Format: add t/TITLE c/CONTENT [tag/TAG]..."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Example usage: add t/Pipelining Definition c/Pipelining is a process where a processor executes multiple processes"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    simultaneously. tag/CS2100"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Expected output:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    New note added:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Title: Pipelining Definition"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Content: Pipelining is a process where a processor executes multiple processes simultaneously."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Tags: [cs2100]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "* More advanced usage: Tagging of note fragments is also supported. The note fragment tagging is added at the"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "same time as the note is created."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "* Note fragment tags are added with content `FRAGMENT_CONTENT`, at least one tag"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "`FRAGMENT_TAG`, and any number of additional tags `ADDITIONAL_FRAGMENT_TAG`:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Format (within CONTENT): /* C/FRAGMENT_CONTENT TAG/FRAGMENT_TAG [TAG/ADDITIONAL_FRAGMENT_TAG]... */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "IMPORTANT: The format for Note fragment content is \u0027C/\u0027, not \u0027c/\u0027, and the format for Note fragment tags is \u0027TAG/\u0027, not"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u0027tag/\u0027."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "* In the following example, two note fragment tags are added to the same note fragment:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Example usage: add t/About c/Notes can be /* C/highlighted TAG/highlight TAG/important */ if needed. tag/about"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    New note added:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Title: About"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Content: Notes can be /* C/highlighted TAG/cs2100 TAG/important */ if needed."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Tags: [about]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "* This adds a note with content \"Notes can be highlighted if needed.\", and a note fragment tag with content"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\"highlighted\" and two tags \"cs2100\" and \"important\"."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "* Multiple note fragment tags are allowed. These do not interfere with the other tags of the Note."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "IMPORTANT: Overlapping note fragment tags are not allowed."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "NOTE: Note fragment tags can be used for filtering notes (see Section 6.6), or filtering globally (see Section 4.3)."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "For a clearer visualization of note fragments, compare the `view` (see Section 6.3) and `viewraw` (see Section 6.4)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "commands."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d Deleting a note: `delete`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Deletes the note of index `NOTE_INDEX`."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "The user will be prompted once to confirm their deletion."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Format: delete (index)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Example usage: delete 3"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Expected output:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Are you sure you would like to delete the following note?"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Title: About"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Content: Notes can be /* C/highlighted TAG/highlight TAG/important */ if needed."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Tags: [about]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Hit enter again to confirm your deletion."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Upon hitting enter, the note will be deleted."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Deleted note:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Title: About"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Content: Notes can be /* C/highlighted TAG/cs2100 TAG/important */ if needed."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Tags: [about]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d Viewing a note: `view`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Views the note of index `NOTE_INDEX`. If the note contains any note fragment tags, those tags will be hidden."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "NOTE: To view the note with its note fragment tags, use the `viewraw` command instead (see Section 6.4)."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Format: view (index)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Example usage: view 3"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Expected output:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Viewing note:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Title: About"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Content: Notes can be highlighted if needed."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Tags: [about]"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d Viewing a raw note: `viewraw`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Views the note of index `NOTE_INDEX`. The note is shown exactly as written, including all note fragment tags."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Format: viewraw (index)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Example usage: viewraw 3"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Expected output:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Viewing raw note:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Title: About"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Content: Notes can be /* C/highlighted TAG/cs2100 TAG/important */ if needed."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Tags: [about]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d Listing notes: `list`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "* Lists all notes found in StudyBuddyPro."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "   Format: list"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "   Expected output: a complete list of all notes currently in StudyBuddyPro"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Example output:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Listing all notes:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    1."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Title: Pipelining Definition"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Content: Pipelining is a process where a /* C/processor TAG/mips */ executes multiple processes simultaneously."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Tags: [cs2100]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    2."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Title: UML Diagrams"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Content: UML Diagrams help with visualizing project structure."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Tags: [cs2103t]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "NOTE: Notes will be labeled with indices \u00271\u0027, \u00272\u0027 etc. Note fragment tags will not be listed along with the notes. To"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "visualize specific note fragment tags, use the `filter` command (see Section 6.6)."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d Listing by tags: `filter`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "* Filters the note library by the user specified tag(s)."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "* The user must specify at least one tag, and can specify multiple tags."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "* Notes that match all of the specified tags will be displayed."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "* Note fragment tags containing all of the specified tags will also be displayed, even if their parent note is"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "not tagged."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Format: filter tag/TAG [tag/TAG]..."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Example usage: filter tag/difficult"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Expeted output: Filter notes by tag(s) :"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        [difficult]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        2. Title: Tough Math"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            Content: 1 + 2 is 3."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            Tags: [difficult]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        4. Title: MA1521 Chapter 5"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            Content: dy/dx \u003d 0 is turning point of bellcurve."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            Tags: [difficult][MA1521]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        5-1. Title: CS2103T"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "              Content: sequence diagram"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "              Tags: [difficult][diagram]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "NOTE: Notes will be labeled with indices \u00271\u0027, \u00272\u0027 etc. Note fragment tags will be labeled with \u00271-1\u0027, \u00271-2\u0027, \u00272-1\u0027 etc."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u00275-1\u0027 means \u0027the first note fragment tag in the fifth note\u0027."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d Editing a note: `edit` (Coming in v2.0)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Edits a note\u0027s title, content, or tags. The note will be referred to by their original title `ORIGINAL_TITLE`."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "* The user can specify one of the optional fields to edit."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Format: edit ORIGINAL_TITLE [t/TITLE] [c/CONTENT] [tag/TAG]..."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Example usage: edit Pipelining Definition t/Pipelined Definition tag/cs2100finals"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Expected output:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Edited Note:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Title: Pipelined Definition"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Content: Pipelining is a process where a processor executes multiple processes simultaneously."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Tags: [cs2100finals]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d Contributions to Developer Guide"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d Add Tags Within Notes feature"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "`Notes` are used in the creation of `CheatSheet` objects as well as in general use of StudyBuddyPro. This Add Tags"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Within Notes feature allows for the addition of tags within the content of the `Note`, to allow more precise"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "highlighting and tagging of information."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "All the operations assume that the user is in the _notes_ mode."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d Design Implementation of Notes"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "`Notes` contain a `Title` and a `Content`, with optional `Tags` and `NoteFragments`, as shown in the diagram below:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "image::samDiagrams/NoteModelClassDiagram.png[]"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "`Notes` are `StudyBuddyItems`, and can contain any number of `NoteFragments`. `NoteFragment` objects are used to"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "represent the specific areas within a `Note` that have been tagged. Each tag within a `Note` is referred to as a *note"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "fragment tag* (which is represented by a `NoteFragment` object)."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "NOTE: Note fragment tags should not be confused with `Tags`."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "`NoteFragments` contain:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** A `Title` that is the same as their parent `Note`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** A `Content` that is a substring of their parent `Note`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Any indicated `Tags` that are independent of their parent `Note`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "`NoteFragments` are viewed or used in the following situations:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Viewable through the `filter` and `filterall` commands"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Usable through `add` commands in _cheatsheet_ mode (see Section 4.4)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d Usages of Notes"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "`Notes` can be used to:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Store information under a title"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Categorize information via the use of `Tags`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Provide information to `CheatSheets` for collation"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "`Notes` can currently be:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Added to `StudyBuddyBook`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Deleted from `StudyBuddyBook`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Viewed raw or cleaned from `StudyBuddyBook`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Viewed using `filter` from `StudyBuddyBook`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d Design Implementation of the Add Tags Within Notes feature"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "The Add Tags Within Notes feature was implemented in the following way:"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Creation of a `NoteFragment` class that represents one tag within a `Note`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Have each `Note` contain any number of `NoteFragments` in a list"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Upon addition of a `Note`, parse its `Content` to check for any note fragment tags within it"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Create any required `NoteFragment` objects and add them to the list in their parent `Note`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Since `NoteFragments` are contained within `Notes`, when a `Note` is deleted, its `NoteFragments` will be deleted as well."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "There are four main methods that involve `NoteFragments`. They are listed below:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** `NoteFeatureUtil#parseNoteFragmentsFromNote()`: Used by `Note` to create `NoteFragments`."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** `ModelManager#collectTaggedItems()`: Used in the `filterall` command."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** `ModelManager#collectTaggedNotes()`: Used in the _notes_ `filter` command."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** `AddCheatSheetCommand#getRelevantContents()`: Used to generate `CheatSheets`."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Out of these four methods, only `NoteFeatureUtil#parseNoteFragmentsFromNote()` is aware of the `NoteFragment` class."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "The other three methods are only aware of the `Note` class."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "The implementation of these four methods is shown below:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation of `NoteFeatureUtil#parseNoteFragmentsFromNote()`:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "The method of parsing `Content` in `NoteFeatureUtil#parseNoteFragmentsFromNote()` relies on the use of `Prefixes`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "around each note fragment tag. Each note fragment tag is specified with a start (\"/\\*\") and end (\"*/\") marker, and"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "its `Content` and `Tags` are also represented with the `Prefixes` \u0027C/\u0027 and \u0027TAG/\u0027."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Example usage:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    add t/About c/Notes can be /* C/highlighted TAG/highlight TAG/important */ if needed. tag/about"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u0027C/\u0027 and \u0027TAG/\u0027 have to be used instead of the default \u0027c/\u0027 and \u0027tag/\u0027 because otherwise the note fragment tag would"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "raise an error (since only one \u0027c/\u0027 tag is allowed per command)."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    New note added:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Title: About"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Content: Notes can be /* C/highlighted TAG/cs2100 TAG/important */ if needed."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Tags: [about]"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "A `Note` has been added with the `Content` of \"Notes can be highlighted if needed.\", and a note fragment tag with"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "`Content` \"highlighted\" and two `Tags` \"cs2100\" and \"important\". Despite this, the `Note` itself is instead tagged"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "with the `Tag` \"about\"."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "When an `add` command is made:"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Only the `Prefixes` \u0027t/\u0027, \u0027c/\u0027, and \u0027tag/\u0027 are identified and parsed."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** A `Note` is then created with the desired `Title`, `Content`, and `Tags`."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** After creation, the `Content` of the `Note` is parsed immediately for the `Prefixes` \u0027/\\*\u0027, \u0027*/\u0027, \u0027C/\u0027, and \u0027TAG/\u0027"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** All four `Prefixes` must be present for the note fragment tag to be considered valid. Otherwise, an exception is"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "thrown."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "The sequence diagram below describes the process of adding a new note that contains a note fragment tag:"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003cINSERT SEQUENCE DIAGRAM HERE, and refer to it below\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation of `NoteFragments` in `list` command:"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "When `Notes` are listed, `NoteFragments` do not appear in the list of resulting `Notes`. This is because the"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "`ListCommand#execute()` method uses `ModelManager#updatedFilteredNoteList()`, which does not check for any"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "`NoteFragments` within `Notes`. This is illustrated in the \u003cWHAT KIND OF\u003e diagram below:"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003cSOME DIAGRAM SHOWING CALLING OF LISTCOMMAND FOR NOTE - but is this necessary? Would need to refer to it after the text\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "This decision is made because the `list` command already lists all `Notes`, and therefore it would be unnecessary to"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "also list all `NoteFragments`, as `NoteFragments` form a subset of `Notes`."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation of `NoteFragments` in `filter` command:"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "When `Notes` are filtered, the method `ModelManager#collectTaggedNotes()` is used, which checks for any valid tags in"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "`NoteFragments` within the `Note` as it checks each `Note`."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "However, `ModelManager` uses the method `Note#getFilteredNoteFragments()` to achieve this, and therefore is not"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "aware of the existence of `NoteFragments`. This is illustrated in the \u003cWHAT KIND OF\u003e diagram below:"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003cSOME DIAGRAM SHOWING CALLING OF FILTERCOMMAND FOR NOTE - but is this necessary? Would need to refer to it after the"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "text\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "This diagram can be contrasted with the \u003cWHICH NUMBER?\u003e diagram above, which uses a different method \u003cDESCRIBE\u003e that"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "does not account for `NoteFragments`."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "The separation between `Notes` and `NoteFragments` in the `filter` command allows for more finely-tuned viewing of"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "specific tagged details. For instance:"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** A small portion of a long `Note` can be tagged out as \u0027important\u0027."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Different parts of the same `Note` can be given different `Tags` like \u0027CS2103T\u0027 or \u0027CS2100\u0027, even as the entire"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "`Note` is tagged under a larger category like \u0027CS\u0027."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation of `NoteFragments` in `filterall` command:"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "When all `StudyBuddyItems` are filtered, the method `ModeManager#collectTaggedItems()` is used, which performs a"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "similar task to `ModelManager#collectTaggedNotes()`, but also collects `Flashcard` and `CheatSheet` objects as well."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "The reasoning for this decision is similar to that in the `filter` command."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation of `NoteFragments` in `add` command in `CheatSheets`:"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "When a `CheatSheet` is created, the method `AddCheatSheetCommand#getRelevantContent()` is used to filter out all"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "`Notes` and `NoteFragments` that contain the specified `Tags`. Again, `AddCheatSheetCommand` uses the method"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "`Note#getFilteredNoteFragments()` to obtain the filtered list of `NoteFragments`, and is therefore unaware of the"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "existence of `NoteFragment`."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Since the `Tags` stored in `Notes` and `NoteFragments` are independent of each other, they are filtered in the same"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "way as in the `filter` command. As a result, it is possible for a `NoteFragment` to be included in a `CheatSheet`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "even when its parent `Note` is not."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations of the Add Tags Within Notes feature"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Container location for `NoteFragment`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Alternative 1 (current choice): Each `Note` contains a `List\u003cNoteFragment\u003e`:"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "*** Pros: Much easier maintenance, since `NoteFragments` are automatically deleted with the deletion of their parent"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "`Note`."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "*** Cons: O(n^2^) search time for `filter` commands, as all `NoteFragments` in each `Note` in the `UniqueNoteList`"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "must be searched through to filter them out."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Alternative 2: Separate `UniqueNoteFragmentList` from `UniqueNoteList`:"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "*** Pros: O(n) search time for `filter` commands, as the `UniqueNoteFragmentList` exists separately from the"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "`UniqueNoteList`."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "*** Cons: Difficult to maintain; deletion of a parent Note requires searching the `UniqueNoteFragmentList` for any"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "child `NoteFragments` to delete as well."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d Usages of the Add Tags Within Notes feature"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Use in `filter` and `filterall` to make the GUI less cluttered"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Use in `filter` to highlight specific sections of `Notes`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Use in `add` for `CheatSheets` for more parsimonious usage of space"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d (Proposed) Future Improvements for v2.0"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d `edit` command for `Notes`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "This feature will allow for users to edit their `Notes`, by specifying a new `Title`, `Content`, or `Tags`."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d (Proposed) Implementation"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Expected inputs:"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "*** The original `Title` of the `Note` to be edited"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "*** One or more fields that the user wants to edit"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Create an `EditCommandParser` to parse the input command using `ArgumentTokenizer`"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Create an `EditCommand` which contains `EditCommand#execute()`"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "*** This method creates a new `Note` which contains all old fields, then replaces any old field with a new field, if"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "it is made available"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Example usage:"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    edit Old Title t/New Title"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "This would result in the `Note` which was originally called \u0027Old Title\u0027 having its `Title` changed to \u0027New Title\u0027."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Since no two `Notes` are allowed to have the same `Title`, it is a unique identifier of the `Note` to be edited."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Method of editing"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Alternative 1: Create a new `Note` object"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "*** Pros: Is more defensive, since only a shallow copy of the `Note` object is returned."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "*** Cons: Longer command run time, as a new `Note` object needs to be created first, and then edited."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "** Alternative 2: Edit the exiting `Note` object"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "*** Pros: Command will run faster, since no new `Note` object needs to be created."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "*** Cons: Is not defensively programmed, as `Notes` should be immutable."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 439
    }
  },
  {
    "path": "docs/team/chanjunren.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003d Chan Jun Ren - Project Portfolio for StudyBuddyPro"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003d\u003d About The Project"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "My team of 4 Computer Science students and I were tasked with enhancing a basic command line interface"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "desktop address book application for our CS2103T module, and we chose to modify it into a 3-in-1 application that serves"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "as a tool to aid revision called StudyBuddy. This application allows students to store and utilize flashcards, create"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "notes that can be later used to generate a reference to create a cheat sheet."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "This is what our project looks like:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "image::kaibindiagrams/AppDisplay.png[]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "_Figure 1. The graphical user interface for *StudyBuddyPro*._"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "* *Major enhancement*: added *ability to start a time trial of flashcards.*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "** What it does: The `timetrial` command initializes a test whereby the user will be tested a sequence of flashcards."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "** Justification: Pushes the user to test his understanding / familiarity of a certain topic."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "** Highlights: This enhancement works with existing as well as future commands. An in-depth analysis of design"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "alternatives was necessary to implement the feature in a way that doesn’t disrupt other features. The implementation was also challenging because there was a need to read up on an existing API that I did not have prior experience in."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "* *Minor enhancement*: Designed the overall GUI of the StudyBuddyPro application."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#\u003dundefined\u0026search\u003dchanjunren[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "---"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 79
    }
  },
  {
    "path": "docs/team/ckb055.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d Chen Kai Bin - Project Portfolio for StudyBuddyPro"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckb055"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckb055"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckb055"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d\u003d About the project"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": "---"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckb055"
        },
        "content": "My team of 4 software engineering students and I were tasked to enhance a"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckb055"
        },
        "content": "basic command line interface desktop addressbook application"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckb055"
        },
        "content": "for our Software Engineering Project. We chose to morph it into"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckb055"
        },
        "content": "an application that aids users in their studies, called StudyBuddyPro."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckb055"
        },
        "content": "This enhanced application has 3 main features,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckb055"
        },
        "content": "the flashcard feature which allows users to test their concepts"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckb055"
        },
        "content": "and offer reminders, notes feature and the cheatsheet feature,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckb055"
        },
        "content": "which has a special auto-generation functionality."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckb055"
        },
        "content": "This is what our project looks like"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckb055"
        },
        "content": "image::kaibindiagrams/AppDisplay.png[]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": "_Figure 1. The graphical user interface for *StudyBuddyPro*._"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckb055"
        },
        "content": "Note the following symbols and illustrations :"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckb055"
        },
        "content": "`filterall`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckb055"
        },
        "content": "A highlight would indicate that this is a command that can be inputted in the command line of our application."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckb055"
        },
        "content": "This section shows a summary of my coding, documentation, and other helpful contributions to the team project."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckb055"
        },
        "content": "*Enhancement added*: I added the tagging functionalities for all items in the application."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* What it does"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckb055"
        },
        "content": "Allows all StudyBuddyItems (Flashcard, Note, NoteFragment, CheatSheet) to be accessed through specific tags."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* Justification"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckb055"
        },
        "content": "The usage of tags are highly important in our application. For instance, the auto-generation feature of CheatSheet, pulls contents from the other modes in StudyBuddyPro that matches the tags. The timetrial feature of the flashcard mode, also makes use of matching tags to create a deck of flashcards to display to the user. In addition, users are also able to filter any StudyBuddyItem by specifying tags, to easily search for items they want."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* Highlights"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckb055"
        },
        "content": "This enhancement is highly straightforward and works well with the current application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckb055"
        },
        "content": "*Code contribution*:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckb055"
        },
        "content": "** Please refer link:https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003dckb055\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dckb055\u0026tabRepo\u003dAY1920S1-CS2103T-W13-3%2Fmain%5Bmaster%5D[here]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ckb055"
        },
        "content": "to view my code contributions."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckb055"
        },
        "content": "*Other contributions*:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* Project management:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckb055"
        },
        "content": "** Mainly managed milestone v1.3."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckb055"
        },
        "content": "** Designed the mockup for the application’s Ui (link:https://github.com/AY1920S1-CS2103T-W13-3/main/pull/49[#49])."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* Developing existing features:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ckb055"
        },
        "content": "** Added barebones for the cheatsheet functionality, which was later on finished up by my groupmate (link:https://github.com/AY1920S1-CS2103T-W13-3/main/pull/124[#124])."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckb055"
        },
        "content": "** Helped with the linking of the Storage component to our new features (link:https://github.com/AY1920S1-CS2103T-W13-3/main/pull/124[#124])."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* Enhancements to existing features:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ckb055"
        },
        "content": "** Upgraded the auto-generation cheatsheet feature of the application to pull intra-content tags from the content feature of the application (link:https://github.com/AY1920S1-CS2103T-W13-3/main/pull/244[#244])."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ckb055"
        },
        "content": "** Enhanced delete commands to prompt the user once to confirm his/her deletion(link:https://github.com/AY1920S1-CS2103T-W13-3/main/pull/244[#244])."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ckb055"
        },
        "content": "** Updated the appIcons for the application, and created the logo for the application using an online software, logomakr (link:https://github.com/AY1920S1-CS2103T-W13-3/main/pull/254[#254])."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ckb055"
        },
        "content": "** Wrote additional tests for existing features to increase the test coverage(link:https://github.com/AY1920S1-CS2103T-W13-3/main/pull/316[#316])."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* Documentation:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ckb055"
        },
        "content": "** Added NFRs for the application(link:https://github.com/AY1920S1-CS2103T-W13-3/main/pull/77[#77])."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* Community:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ckb055"
        },
        "content": "** Reported bugs and offered suggestions for the other team during the Practical Exam dry run."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d\u003d Contributions to the user guide"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ckb055"
        },
        "content": "---"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ckb055"
        },
        "content": "We had to update the original addressbook User Guide with instructions for"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ckb055"
        },
        "content": "the enhancements that our group has added. The following is an excerpt"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ckb055"
        },
        "content": "from our *StudyBuddyPro User Guide*, showing the additions that I have made"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ckb055"
        },
        "content": "for the filter features."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ckb055"
        },
        "content": "The following section describes how user are now able to make good use of tags to find their desired items in our app. The section also contains an excerpt on how the tagging feature can be further improved in the next version of StudyBuddyPro."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d\u003d\u003d Listing all current Tags in StudyBuddyPro : `taglist`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ckb055"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ckb055"
        },
        "content": "`taglist` and `filterall` are global commands that can be used in any mode in StudyBuddyPro."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ckb055"
        },
        "content": "Displays a full list of all tags currently in StudyBuddyPro."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Format: taglist"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Expected output:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Here are all the tags in StudyBuddyPro."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Listing all tags :"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    [cs2100] |  flashcards : 0 notes : 3 cheatsheets : 1"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    [cs2101] |  flashcards : 6 notes : 2 cheatsheets : 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    [cs2104] |  flashcards : 20 notes : 8 cheatsheets : 3"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    [math] |  flashcards : 10 notes : 2 cheatsheets : 1"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    [pipelining] |  flashcards : 1 notes : 5 cheatsheets : 2"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* The user can make use of `taglist` to quickly see which tag they would like to view."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* The list of tags is also automatically sorted alphabetically."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* Subsequently, the user can use the `filterall` and specify a tag to get a list of related items."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d\u003d\u003d Listing all StudyBuddy items by their tag : `filterall`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ckb055"
        },
        "content": "Each StudyBuddyItem has a set of tags tied to them. `filterall` allows the user to list all StudyBuddy items with matching tags in the application. The user is able to use this command regardless of which mode they are currently in."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ckb055"
        },
        "content": "Let’s say the user wishes to view the definition of pipelining. Pipelining is taught in CS2100, a Computer Organization module taught in the School of Computing at NUS. Hence, the user can make use of filterall to find all flashcards, cheatsheets and notes that are tagged “CS2100”. Note that for simplicity, all tags will be converted to lowercase upon input. Hence, ‘CS2100’ will be read as ‘cs2100’ by our application."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Format: filterall tag/TAG [tag/TAG]..."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Example usage: filterall tag/CS2100"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Expected output:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    List the whole StudyBuddy by tag(s) :"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    cs2100"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Flashcard: 6."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Question: What is 101 Binary in its Decimal form?"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Title: BinaryQn"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Tags: [cs2100]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    CheatSheet: 7."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Title: cs2100 stuff"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Tags: [cs2100]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Contents: [ 1. Pipelining is a process where.. ]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        [ 2. Question: What is 101 Binary in its Decimal form?; Answer: 5 ]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Note: 5."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Title: Pipelining Definition"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Content: Pipelining is a process where.."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Tags: [cs2100]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Note Fragment: 3.1."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Title: About"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Content: highlighted"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Tags: [cs2100]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ckb055"
        },
        "content": "All Study Buddy Items in the application will be displayed to the user, alongside with their corresponding indexes. This helps the user to quickly get to their desired flashcard/cheatsheet/note."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ckb055"
        },
        "content": "Let’s say the user is currently in the flashcard mode. In this case, the user will see that the definition for pipelining is currently the 5th Note in the Notes feature of StudyBuddyPro. Hence, the user will first key in the following input:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    switch notes"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ckb055"
        },
        "content": "which will have the expected output of :"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    You are currently using the notes function!"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ckb055"
        },
        "content": "which brings the user to the Notes Function of StudyBuddyPro. Following this, the user will simply key in the following input:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    view 5"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ckb055"
        },
        "content": "To view the specific Note on the definition of Pipelining."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ckb055"
        },
        "content": "The user is also able to specify a multiple number of tags to filter by. For instance,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    filterall tag/CS2100 tag/important"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ckb055"
        },
        "content": "This will be especially useful if the user wishes to view the more important items of a certain module."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d\u003d\u003d Listing by tags: `filter`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ckb055"
        },
        "content": "In addition to the filterall command, the user is able to use the command filter to list the items with the specified tag in the mode the user is currently in."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ckb055"
        },
        "content": "It is similar to the filterall command, except it is for individual features. It will be truncated in this Product Portfolio, please refer to the UserGuide for more details."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d\u003d\u003d Deleting a cheatSheet: `delete`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ckb055"
        },
        "content": "Deletes a cheatSheet by the specified index."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ckb055"
        },
        "content": "The user will be prompted once to confirm their deletion."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Format: delete (index)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Example usage: delete 8"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Expected output:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Are you sure you would like to delete the following cheatsheet?"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Title: CS2100 Finals CheatSheet Tags: [finalcheatsheet]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Contents: [ 1. Question: What is 110 Binary in its Decimal Form?; Answer: 6 ]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        [ 2. 110 in Binary is 6 is Decimal ]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Please use `delete 8` again to confirm your deletion."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ckb055"
        },
        "content": "Upon deleting any StudyBuddyItem (Flashcard, Note, NoteFragment, CheatSheet), the user will be prompted once to confirm his deletion. The user would need to key in the delete command once more to confirm his/her deletion."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ckb055"
        },
        "content": "This will prevent any accidental deletion of wrong items."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d\u003d\u003d Editing a tag: `edit tag/` (proposed in v2.0)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ckb055"
        },
        "content": "Edits a tag by the specified index."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Format: edit tag/CURRENT tag/NEW"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Example usage: edit tag/midterm tag/finals"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Expected output:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Tag editted!"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    All items and contents in StudyBuddy tagged ‘midterm’ is replaced with tag ‘finals’."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ckb055"
        },
        "content": "This allows the user to easily modify the tags of all the items with a single command."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ckb055"
        },
        "content": "For instance, if the user has items that are tagged [cs2100] and [midterm], and the user wishes to make"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ckb055"
        },
        "content": "use of such items to include in a cheatsheet for CS2100 finals, the user can input"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    edit tag/midterm tag/finals"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ckb055"
        },
        "content": "to conveniently change, for instance, all notes tagged with [midterm] to be tagged with [finals]."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ckb055"
        },
        "content": "This then allows the user to more conveniently generate a cheatsheet for his/her final exams."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d\u003d Contributions to the developer guide"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ckb055"
        },
        "content": "The following shows my additions to the StudyBuddyPro Developer Guide for the tagging feature."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d\u003d\u003d Tagging Feature"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ckb055"
        },
        "content": "The current implementation of StudyBuddyItems in StudyBuddyPro is such that it contains a Set of Tags."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ckb055"
        },
        "content": "The following objects of each individual feature shares similar Tagging behaviour, as shown in the class diagram 2 below."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ckb055"
        },
        "content": "image::kaibindiagrams/studyBuddyItemClassDiagram.png[]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ckb055"
        },
        "content": "_Figure 2. Implementation of StudyBuddyItem_"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* Design Considerations"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ckb055"
        },
        "content": "** As explained in the class diagram above, each StudyBuddyItem is limited to a total number of 10 tags."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ckb055"
        },
        "content": "** It is designed as such to prevent users from over-cluttering the result display when they view items that have too many tags."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ckb055"
        },
        "content": "** To reduce confusion for the user, all tags will be converted to lower-case upon initialization."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d\u003d\u003d\u003d Aspect: How tag predicates are implemented"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ckb055"
        },
        "content": "image::kaibindiagrams/tagPredicateClassDiagram.png[]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ckb055"
        },
        "content": "_Figure 3 : Class Diagram of how StudyBuddyItemContainsTagPredicate is implemented_"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* The above class diagram shows how tag predicates are being implemented."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* The set of tags that is stored in `StudyBuddyItemContainsTagPredicate` refers to the tags specified by the user."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ckb055"
        },
        "content": "image::kaibindiagrams/tagPredicateCodeSnippet.png[]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ckb055"
        },
        "content": "_Figure 4 : Code Snippet of StudyBuddyItemContainsTagPredicate#test()_"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ckb055"
        },
        "content": "The current implementation is that test() only returns true if all tags specified by the user matches the current Item."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ckb055"
        },
        "content": "As such, there will be more correctness when auto-generating cheatsheets and filtering flashcards, as seen in the following example."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ckb055"
        },
        "content": "If a user wishes to generate a cheatsheet and pull items with tags [cs2100] and [difficult], it would strictly only pull difficult CS2100 contents, and not pull other items that might have tags containing [difficult]."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d\u003d\u003d\u003d Usage of Tags"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ckb055"
        },
        "content": "a) *To search for items*"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ckb055"
        },
        "content": "Inside each feature"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* The user is able to specify a tag name to get a list view of all the items with that specified tag in the mode they are currently in (e.g. `filter tag/cs2100`)."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ckb055"
        },
        "content": "Searching using Tags globally"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* The user is also able to indicate a tag name get a list view of all the StudyBuddyItems across all 3 modes in StudyBuddyPro (e.g. `filterall tag/ma1521`)."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* Currently, the user is able to specify multiple tags in his/her query (e.g. `filter tag/cs2100 tag/difficult`)."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ckb055"
        },
        "content": "If multiple tags are specified, only items that match all the specified tags will be listed."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* The sequence diagram below shows how listing all items across StudyBuddyPro by a specified tag works."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ckb055"
        },
        "content": "image::kaibindiagrams/ListAllByTagSequenceDiagram.png[]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ckb055"
        },
        "content": "_Figure 5. Sequence diagram of listing items by a specified tag_"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ckb055"
        },
        "content": "[Proposed] Future improvements (Coming in v2.0)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ckb055"
        },
        "content": "Supporting deletion/editing of Tags"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ckb055"
        },
        "content": "Allow the user to delete/edit a specified Tag."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ckb055"
        },
        "content": "All StudyBuddyItems must be updated in response to the deletion/edit."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* A proposed implementation would be to store all Tags in a Global Data Structure, and have each StudyBuddyItem reference to that Data Structure."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* As such, we can apply an Observer pattern to update each StudyBuddyItem upon deletion of a tag."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ckb055"
        },
        "content": "b) For Auto-generation of CheatSheets"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ckb055"
        },
        "content": "** Upon adding a cheatsheet, the cheatsheet will make use of tags to automatically pull contents from other features of StudyBuddyPro."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ckb055"
        },
        "content": "** StudyBuddyItems with tags that match the user\u0027s input will be pulled over."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ckb055"
        },
        "content": "** This feature will be further elaborated in the next section, Section 4.4."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ckb055"
        },
        "content": "c) For TimeTrial Mode"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ckb055"
        },
        "content": "** The TimeTrial Mode of the flashcard feature, will make use of the tagging feature."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ckb055"
        },
        "content": "** It will do so by filtering out flashcards with tags that match the user\u0027s input."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ckb055"
        },
        "content": "** For instance, if a user wishes to revise only important flashcards, he/she could enter the following command, `timetrial important`."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ckb055"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ckb055"
        },
        "content": "The syntax used here is slightly different. The user need not specify the `tag/` keyword to indicate that the item is a tag."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ckb055"
        },
        "content": "** The TimeTrial feature will be further elaborated in Section 4.5."
      }
    ],
    "authorContributionMap": {
      "ckb055": 298
    }
  },
  {
    "path": "docs/team/jaesimin.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Project Portfolio for StudyBuddyPro"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":important-caption: :heavy_exclamation_mark:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d Done By: Jasmine Yeo Jia Min"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "---"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "This portfolio is meant to be a well-documented data point of my Software Engineering experience on the project. It showcases my contributions to the project and my documentation skills."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "---"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "StudyBuddyPro is a desktop Command Line Interface (CLI) application intended for Computing School students of National University of Singapore (NUS). It aims to lessen target users\u0027 revision time consumption without compromising the quality of studies with a centralized platform."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "StudyBuddyPro provides three main features: Flashcard, Notes and Cheatsheet. These features are used to revise using flashcards, take notes and generate cheatsheets respectively. Additionally, StudyBuddyPro is equipped with a Graphic User Interface (GUI)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Syntax"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Please do take a look at the syntax notations below as they are used throughout the document."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "`syntax 1` -- For commands or class objects"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "_syntax 2_ -- For figures, tables, functionality or variables"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Callouts Signs"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Please do refer to the signs below as they are used throughout the document."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Indicates information that are to be adhere as potential problems may be encountered if you are not careful."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Indicates information that are crucial to understand so that you will be able to follow the flow of the document."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Indicates information that are note-worthy. Do read them for more information and better understandings."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The sections below are a summary of my contributions to the project. It highlights my major contributions and states my minor, code and other contributions."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d Major Enhancement 1: Automated the Generation of Cheatsheets"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "This enhancement allows users to automatically generate cheatsheets according to the _tags_ that they specify. From this, it improves the product significantly as users can sift out information to be included in a specific cheatsheet. Thus, it reduces the users\u0027 time taken in collating cheatsheets."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "This enhancement\u0027s implementation makes use of the other features in the StudyBuddyPro to create the contents in the cheatsheets. As such, users can make full use of this auto-generation enhancement by using _tagging_ functionality in those features."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d Major Enhancement 2: Customization of Generated Cheatsheets"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "This enhancement allows users to remove contents in the generated cheatsheets by specifying its content indexes or tags. From this, it improves the cheatsheets\u0027 usability as users can determine which contents to be included or excluded in the cheatsheets."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "This enhancement ensures all contents are placed under the _tags_ specified even after users\u0027 personalization. Hence, users can be assured that the cheatsheets contain no irrelevant contents."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d Minor Enhancement 1: Switching between the Features"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "This enhancement allows users to toggle amongst the features in the StudyBuddyPro. Also, it allows _global_ commands, like `exit` or `filterall` to be used in any features."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d Minor Enhancement 2: Clearing Specific Features\u0027s Data"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "This enhancement allows users to clear specific feature\u0027s data in the StudyBuddyPro. As such, users do not need to clear the entire data if desired."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d Code Contribution"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Please do refer to the link https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003djaesimin\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003djaesimin\u0026tabRepo\u003dAY1920S1-CS2103T-W13-3%2Fmain%5Bmaster%5D[here] my functional codes and https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003djaesimin\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003djaesimin\u0026tabRepo\u003dAY1920S1-CS2103T-W13-3%2Fmain%5Bmaster%5D[here] for my test codes."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d Other Contributions:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Designed the GUI for `view` in the Cheatsheet feature"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Did cosmetic tweaks to the existing contents of the Developer Guide (DG)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* PRs reviewed (with non-trivial review comments)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Reported bugs and suggestions for other teams in the class"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Contributions to the User Guide (UG)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The sections below are my contributions to the UG of StudyBuddyPro. They showcase my ability to write documentation that targets the end-users."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "All commands in the sections assume that the user is in the _cheatsheet_ mode."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcheatsheetAdd]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcheatsheetEdit]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcheatsheetView]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcheatsheetViewSpecific]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcheatsheetList]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcheatsheetUpdate]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide (DG)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The sections below are my contributions to the DG of StudyBuddyPro. They showcase my ability to write technical documentation. Also, it portrays my technical depth of my contributions to StudyBuddyPro."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dcheatsheetAutomation]"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 107
    }
  },
  {
    "path": "docs/team/sahilgat.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d Sahil S/O Sanjeev Gathani - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d PROJECT: StudyBuddyPro"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "This document serves as an overview of my contributions to the StudyBuddyPro project. Moreover,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "the document aims to highlight my technical competence and documentation skills by using"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "the StudyBuddyPro project as an example."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "StudyBuddyPro is a desktop application designed for university students in computing-related"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "fields to supplement their revision. StudyBuddyPro aims to consolidate"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "StudyBuddyPro has 3 main features: Flashcard, Notes and Cheatsheet. The purpose of each"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "feature is summarized in the table below."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ".Features table"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "[options \u003d \"header\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "| Feature | Purpose"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "| Flashcard  | Create flashcards for quick revision and effective retention"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "| Notes | Create general-purpose notes"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "| Cheatsheet | Create and customize cheatsheets from relevant content found in Flashcard and Note features"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "interacts with it"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "StudyBuddyPro was developed by https://github.com/Sahilgat[me],"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "https://github.com/Sam-limyr[Samuel Lim],"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "https://github.com/chanjunren[Chan Jun Ren],"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "https://github.com/ckb055[Chen Kai Bin] and"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "https://github.com/jaesimin[Jasmine Yeo Jia Min], all sophomore students from National University of"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Singapore (NUS) studying Computer Science."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "• It clearly and concisely describes the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "project and the team."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "• There is a clear and concise description of"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "the application (X is a what that does"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "what…, includes mention of desktop"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "application and CLI in terms that a 3rd"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "party would understand)."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "---"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.ReadOnlyStudyBuddyPro;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.StudyBuddyPro;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.storage.JsonStudyBuddyStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.storage.StudyBuddyProStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing StudyBuddyPro ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        StudyBuddyProStorage studyBuddyProStorage \u003d new JsonStudyBuddyStorage(userPrefs.getFlashcardFilePath(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                userPrefs.getNoteFilePath(), userPrefs.getCheatSheetFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        storage \u003d new StorageManager(studyBuddyProStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Optional\u003cReadOnlyStudyBuddyPro\u003e addressBookOptional;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        ReadOnlyStudyBuddyPro initialData;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample StudyBuddyPro\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty StudyBuddyPro\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            initialData \u003d new StudyBuddyPro();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            initialData \u003d new StudyBuddyPro();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty StudyBuddyPro\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        logger.info(\"Starting StudyBuddyPro \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping StudyBuddyPro ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 17,
      "Sahilgat": 1,
      "-": 167
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String MESSAGE_INVALID_NOTE_DISPLAYED_INDEX \u003d \"The note index provided is invalid!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String MESSAGE_NOTES_LISTED_OVERVIEW \u003d \"%1$d notes listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String MESSAGE_MATCHING_NOTE_FOUND \u003d \"Note matching the title exists.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String MESSAGE_NO_MATCHING_NOTE_FOUND \u003d \"No note with that title exists!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String MESSAGE_INCORRECT_NOTE_FRAGMENT_FORMAT \u003d \"Incorrect tagging format for note \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"highlights! Use \u0027C/\u0027 rather than \u0027c/\u0027, and \u0027TAG/\u0027 rather than \u0027tag/\u0027!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public static final String MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX \u003d \"The flashcard index provided is invalid\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public static final String MESSAGE_NO_FLASHCARD_LOADED \u003d \"No flashcard has been loaded\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public static final String MESSAGE_ANSWER_ALREADY_LOADED \u003d \"Answer has already been loaded\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public static final String MESSAGE_WELCOME_STUDYBUDDYPRO \u003d \"Welcome to StudyBuddyPro!\" + \"\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            + \"Please enter one of the following modes, using the following command : \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            + \"Format: switch fc/notes/cs.\\nExample usages:\\n\\t\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            + \"switch fc -\u003e to enter flashcard feature\\n\\t\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            + \"switch notes -\u003e to enter notes feature\\n\\t\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            + \"switch cs -\u003e to enter cheatsheet feature\\n\\t\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String MESSAGE_INVALID_CHEATSHEET_DISPLAYED_INDEX \u003d \"The cheatsheet index provided is invalid\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String MESSAGE_INVALID_CHEATSHEET_CONTENT_DISPLAYED_INDEX \u003d \"The content index \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            + \"provided is invalid\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public static final String MESSAGE_ARE_YOU_SURE_WANT_TO_DELETE_CHEATSHEET \u003d \"Are you sure you would like \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            + \"to delete the following cheatsheet?\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public static final String MESSAGE_ARE_YOU_SURE_WANT_TO_DELETE_FLASHCARD \u003d \"Are you sure you would like \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            + \"to delete the following flashcard?\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public static final String MESSAGE_ARE_YOU_SURE_WANT_TO_DELETE_NOTE \u003d \"Are you sure you would like \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            + \"to delete the following note?\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public static final String MESSAGE_CONFIRM_DELETE \u003d \"Please use `delete %d` again to confirm your deletion.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String MESSAGE_NO_CHEATSHEET_LOADED \u003d \"No cheatsheet has been loaded\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String MESSAGE_INVALID_TAG_INDEX \u003d \"Sorry! The tag index provided is invalid!\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public static final String MESSAGE_TAG_LIMIT_EXCEEDED \u003d \"Sorry! A StudyBuddyItem can have no more than 10 tags.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String SPECIFY_MODE \u003d \"Please specify a mode to start with: Cheatsheet, Flashcard or Note.\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"Use \u0027switch\u0027 command to specify the mode.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String ADD \u003d \"add\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String EDIT \u003d \"edit\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String VIEW \u003d \"view\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String VIEW_RAW \u003d \"viewraw\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String LIST \u003d \"list\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String FILTER \u003d \"filter\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public static final String FILTER_ALL \u003d \"filterall\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String CLEAR \u003d \"clear\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public static final String TIMETRIAL \u003d \"timetrial\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public static final String SHOW \u003d \"show\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final String REMIND \u003d \"remind\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 7,
      "ckb055": 18,
      "jaesimin": 14,
      "Sahilgat": 2,
      "-": 14,
      "Sam-limyr": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Returns true if the {@code sentence} matches the {@code phrase}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *   Ignores case, but a full phrase match is required."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *       matchesPhraseIgnoreCase(\"ABc def\", \"ABc def\") \u003d\u003d true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *       matchesPhraseIgnoreCase(\"ABc def\", \"aBc dEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *       matchesPhraseIgnoreCase(\"ABc def\", \"ABc\") \u003d\u003d false //not a full phrase match"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param phrase cannot be null, cannot be empty, must be a single phrase"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static boolean matchesPhraseIgnoreCase(String sentence, String phrase) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireNonNull(phrase);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        String preppedPhrase \u003d phrase.trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        checkArgument(!preppedPhrase.isEmpty(), \"Phrase parameter cannot be empty\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return preppedPhrase.equalsIgnoreCase(preppedSentence);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 68,
      "Sam-limyr": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/FunctionMode.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " * Enum that represents which function the user is currently using."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public enum FunctionMode {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    FLASHCARD {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return \"flashcard\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    CHEATSHEET {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return \"cheatsheet\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    },"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    NOTE {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return \"note\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    TIMETRIAL {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            return \"timetrial\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    },"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    UNDEFINED {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return \"undefined\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    };"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 13,
      "jaesimin": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.ReadOnlyStudyBuddyPro;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * @see seedu.address.model.Model#getStudyBuddyPro()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    ReadOnlyStudyBuddyPro getAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of notes */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    ObservableList\u003cNote\u003e getFilteredNoteList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    Path getStudyBuddyProFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 1,
      "ckb055": 3,
      "-": 46,
      "Sam-limyr": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.logic.parser.StudyBuddyProParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.ReadOnlyStudyBuddyPro;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private static FunctionMode mode \u003d FunctionMode.UNDEFINED;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private final StudyBuddyProParser studyBuddyProParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        studyBuddyProParser \u003d new StudyBuddyProParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        Command command \u003d studyBuddyProParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        commandHistory.addCommand(command);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            storage.saveAddressBook(model.getStudyBuddyPro());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public ReadOnlyStudyBuddyPro getAddressBook() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return model.getStudyBuddyPro();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public ObservableList\u003cNote\u003e getFilteredNoteList() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return model.getFilteredNoteList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public Path getStudyBuddyProFilePath() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return model.getStudyBuddyProFilePath();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static FunctionMode getMode() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return mode;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static void setMode(FunctionMode mode) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        LogicManager.mode \u003d mode;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 6,
      "ckb055": 4,
      "jaesimin": 7,
      "Sahilgat": 4,
      "-": 69,
      "Sam-limyr": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandHistory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Class to keep track of all commands entered during a session when StudyBuddy application is open."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private static ArrayList\u003cCommand\u003e commandHistory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Adds a command to the list commandHistory."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param commandToAdd Command to be added."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void addCommand(Command commandToAdd) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.commandHistory.add(commandToAdd);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Returns the last used command from the list commandHistory."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @return Optional.empty() is no last command found (size of list \u003d 0). Otherwise returns the last used Command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static Optional\u003cCommand\u003e getLastCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        int size \u003d commandHistory.size();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (commandHistory.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return Optional.of(commandHistory.get(size - 1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public abstract class CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public abstract String getFeedbackToUser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public boolean isGlobalCommandResult() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public boolean isFlashcardCommandResult() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public boolean isCheatSheetCommandResult() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public boolean isNoteCommandResult() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param other"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public abstract boolean equals(Object other);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public abstract int hashCode();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 12,
      "Sahilgat": 9,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cheatsheet/AddCheatSheetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.commands.cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.commons.core.Messages.ADD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.commands.cheatsheet.EditCheatSheetCommand.createEditedCheatSheet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_NOTES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.commandresults.CheatSheetCommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.cheatsheet.Content;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.flashcard.FlashcardContainsTagPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.note.NoteContainsTagPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " * Adds a cheatsheet to the address book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckb055"
        },
        "content": "public class AddCheatSheetCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String COMMAND_WORD \u003d ADD;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a cheatsheet. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            + \"\\nParameters: \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            + PREFIX_TITLE + \"midterm quiz \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            + PREFIX_TAG + \"cs2103t \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New cheatsheet added: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CHEATSHEET \u003d \"This cheatsheet already exists\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public static final String MESSAGE_SUCCESSFUL_AUTOGENERATE \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            \" content(s) have been successfully generated from the other modes.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String MESSAGE_TAG_RESTRICTION \u003d \"Each cheatsheet must have at least 1 tag specified.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private final CheatSheet toAdd;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public AddCheatSheetCommand(CheatSheet cheatsheet) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        requireNonNull(cheatsheet);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        toAdd \u003d cheatsheet;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (model.hasCheatSheet(toAdd)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CHEATSHEET);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        int currentAmountOfCheatSheets \u003d model.getFilteredCheatSheetList().size();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        model.addCheatSheet(toAdd);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        int newAmountOfCheatSheets \u003d model.getFilteredCheatSheetList().size();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        // to assert that one cheatsheet got added"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assert(newAmountOfCheatSheets \u003d\u003d currentAmountOfCheatSheets + 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        EditCheatSheetCommand.EditCheatSheetDescriptor edit \u003d new EditCheatSheetCommand.EditCheatSheetDescriptor();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        edit.setContents(getRelevantContents(toAdd.getTags(), model));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        CheatSheet editedCheatSheet \u003d createEditedCheatSheet(toAdd, edit, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        model.setCheatSheet(toAdd, editedCheatSheet);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        int numberOfContentPulled \u003d editedCheatSheet.getContents().size();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return new CheatSheetCommandResult(String.format(MESSAGE_SUCCESS, editedCheatSheet)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        + \"\\n\" + numberOfContentPulled + MESSAGE_SUCCESSFUL_AUTOGENERATE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                || (other instanceof AddCheatSheetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCheatSheetCommand) other).toAdd));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Retrieves all the notes and flashcards with the relevant tags"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public Set\u003cContent\u003e getRelevantContents(Set\u003cTag\u003e tags, Model model) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Set\u003cContent\u003e contentList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // get all notes"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        NoteContainsTagPredicate noteTagPredicate \u003d new NoteContainsTagPredicate(tags);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        model.updateFilteredNoteList(noteTagPredicate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        ObservableList\u003cNote\u003e noteList \u003d model.getFilteredNoteList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        for (Note note: noteList) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                contentList.add(new Content(note.getContentCleanedFromTags().toString(), note.getTags()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            } catch (IllegalArgumentException ignored) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                // ignore invalid content"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // get all note fragments"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        model.updateFilteredNoteList(PREDICATE_SHOW_ALL_NOTES);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        noteList \u003d model.getFilteredNoteList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        for (Note note : noteList) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            for (Note noteFrag : note.getFilteredNoteFragments(noteTagPredicate)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    contentList.add(new Content(noteFrag.getContent().toString(), noteFrag.getTags()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                } catch (IllegalArgumentException ignored) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                    // ignore invalid content"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // get all flashcards"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        FlashcardContainsTagPredicate flashcardTagPredicate \u003d new FlashcardContainsTagPredicate(tags);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        model.updateFilteredFlashcardList(flashcardTagPredicate);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        ObservableList\u003cFlashcard\u003e flashcardList \u003d model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        for (Flashcard flashcard: flashcardList) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            contentList.add(new Content(flashcard.getQuestion().toString(), flashcard.getAnswer().toString(),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    flashcard.getTags()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return contentList;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ckb055"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 47,
      "jaesimin": 64,
      "Sahilgat": 1,
      "Sam-limyr": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cheatsheet/DeleteCheatSheetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.commands.cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.commons.core.Messages.DELETE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ARE_YOU_SURE_WANT_TO_DELETE_CHEATSHEET;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CONFIRM_DELETE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.commands.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.commandresults.CheatSheetCommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " * Deletes a cheatsheet identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class DeleteCheatSheetCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String COMMAND_WORD \u003d DELETE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            + \": Deletes the cheatsheet identified by the index number used in the displayed cheatsheet list.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String MESSAGE_DELETE_CHEATSHEET_SUCCESS \u003d \"Deleted Cheatsheet: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public DeleteCheatSheetCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public Index getTargetIndex() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return targetIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        List\u003cCheatSheet\u003e lastShownList \u003d model.getFilteredCheatSheetList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CHEATSHEET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        CheatSheet cheatsheetToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        CheatSheetCommandResult commandResult \u003d new CheatSheetCommandResult (("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                MESSAGE_ARE_YOU_SURE_WANT_TO_DELETE_CHEATSHEET"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                + \"\\n\" + cheatsheetToDelete"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                + \"\\n\" + String.format(MESSAGE_CONFIRM_DELETE, this.targetIndex.getOneBased())));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (CommandHistory.getLastCommand().get() instanceof DeleteCheatSheetCommand) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            if (((DeleteCheatSheetCommand) CommandHistory.getLastCommand().get()).getTargetIndex()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                    .equals(this.targetIndex)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                // correct. allow delete"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                int currentAmountOfCheatSheets \u003d model.getFilteredCheatSheetList().size();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                model.deleteCheatSheet(cheatsheetToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                int newAmountOfCheatSheets \u003d model.getFilteredCheatSheetList().size();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                // to assert that one cheatsheet got deleted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                assert(newAmountOfCheatSheets \u003d\u003d currentAmountOfCheatSheets - 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                commandResult \u003d new CheatSheetCommandResult(String.format"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                        (MESSAGE_DELETE_CHEATSHEET_SUCCESS, cheatsheetToDelete));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                || (other instanceof DeleteCheatSheetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCheatSheetCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 51,
      "ckb055": 30,
      "Sahilgat": 1,
      "Sam-limyr": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cheatsheet/EditCheatSheetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.commands.cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.commons.core.Messages.EDIT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CHEATSHEETS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.commandresults.CheatSheetCommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.cheatsheet.Content;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.cheatsheet.Title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " * Edits the details of an existing cheatsheet in the StudyBuddy Application."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class EditCheatSheetCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String COMMAND_WORD \u003d EDIT;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the cheatsheet identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            + \"by the index number used in the displayed cheatsheet list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            + \"[\" + PREFIX_TITLE + \"TITLE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            + \"[\" + PREFIX_CONTENT + \"CONTENT] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String MESSAGE_EDIT_CHEATSHEET_SUCCESS \u003d \"Edited Cheatsheet: %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CHEATSHEET \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            \"This cheatsheet already exists in the StudyBuddy application.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private final EditCheatSheetDescriptor editCheatSheetDescriptor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @param index of the cheatsheet in the filtered cheatsheet list to edit"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @param editCheatSheetDescriptor details to edit the cheatsheet with"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public EditCheatSheetCommand(Index index, EditCheatSheetDescriptor editCheatSheetDescriptor) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        requireNonNull(editCheatSheetDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        this.editCheatSheetDescriptor \u003d new EditCheatSheetDescriptor(editCheatSheetDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        List\u003cCheatSheet\u003e lastShownList \u003d model.getFilteredCheatSheetList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CHEATSHEET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        CheatSheet cheatSheetToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        CheatSheet editedCheatSheet \u003d createEditedCheatSheet(cheatSheetToEdit, editCheatSheetDescriptor, false);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        if (!cheatSheetToEdit.isSameCheatSheet(editedCheatSheet) \u0026\u0026 model.hasCheatSheet(editedCheatSheet)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CHEATSHEET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        model.setCheatSheet(cheatSheetToEdit, editedCheatSheet);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        model.updateFilteredCheatSheetList(PREDICATE_SHOW_ALL_CHEATSHEETS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return new CheatSheetCommandResult(String.format(MESSAGE_EDIT_CHEATSHEET_SUCCESS, editedCheatSheet));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Creates and returns a {@code CheatSheet} with the details of {@code cheatSheetToEdit}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * edited with {@code editCheatSheetDescriptor}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static CheatSheet createEditedCheatSheet(CheatSheet cheatSheetToEdit,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                                                 EditCheatSheetDescriptor editCheatSheetDescriptor, boolean isAdd) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assert cheatSheetToEdit !\u003d null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Title updatedTitle \u003d editCheatSheetDescriptor.getTitle().orElse(cheatSheetToEdit.getTitle());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Set\u003cContent\u003e updatedContents;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        ArrayList\u003cInteger\u003e indexes \u003d editCheatSheetDescriptor.getIndexes();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        if (isAdd) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            // new add command"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            updatedContents \u003d editCheatSheetDescriptor.getContents().orElse(cheatSheetToEdit.getContents());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        } else if (indexes \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            // not editing contents"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            updatedContents \u003d cheatSheetToEdit.getContents();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            // editing contents"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            updatedContents \u003d updateContents(cheatSheetToEdit, indexes);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // updating tags comes after the updating of contents"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Set\u003cTag\u003e updatedTags;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        if (editCheatSheetDescriptor.getTags().isEmpty()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            updatedTags \u003d cheatSheetToEdit.getTags();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            updatedTags \u003d updateTags(cheatSheetToEdit, editCheatSheetDescriptor.getTags().get());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            // remove irrelevant contents"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            updatedContents \u003d removeIrrelevantContent(updatedTags, updatedContents);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return new CheatSheet(updatedTitle, updatedContents, updatedTags);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Removes user specified tags from the tag list of cheatsheet."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @param cheatSheetToEdit targeted cheatsheet"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @param tags list of tags to remove"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @return updated list of tags"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static Set\u003cTag\u003e updateTags(CheatSheet cheatSheetToEdit, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        for (Tag tag: cheatSheetToEdit.getTags()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            // ignores all invalid tags"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            if (!tags.contains(tag)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                tagList.add(tag);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return tagList;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Removes irrelevant content when its tag(s) are removed from the cheatsheet"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @param tags cheatsheet\u0027s tags"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @param contents existing contents"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @return relevant contents"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static Set\u003cContent\u003e removeIrrelevantContent(Set\u003cTag\u003e tags, Set\u003cContent\u003e contents) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Set\u003cContent\u003e contentList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        for (Content content: contents) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            Set\u003cTag\u003e tagList \u003d content.getTags();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            if (!Collections.disjoint(tags, tagList)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                contentList.add(content);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return contentList;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Retrieves all the content that were not chosen to remove"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @param cheatSheetToEdit the cheatsheet to be edited"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @param indexes the indexes of the contents to be removed"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @return set of contents with indicated contents removed"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static Set\u003cContent\u003e updateContents(CheatSheet cheatSheetToEdit, ArrayList\u003cInteger\u003e indexes) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Set\u003cContent\u003e contentList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        if (indexes \u003d\u003d null || indexes.isEmpty()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        for (Content c: cheatSheetToEdit.getContents()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            // ignores all invalid indexes"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            if (!indexes.contains(c.getIndex())) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                contentList.add(c);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return contentList;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        if (!(other instanceof EditCheatSheetCommand)) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        EditCheatSheetCommand e \u003d (EditCheatSheetCommand) other;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                \u0026\u0026 editCheatSheetDescriptor.equals(e.editCheatSheetDescriptor);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Stores the details to edit the cheatsheet with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * corresponding field value of the cheatsheet."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static class EditCheatSheetDescriptor {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        private Title title;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        private ArrayList\u003cInteger\u003e indexes;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        private Set\u003cContent\u003e contents;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        public EditCheatSheetDescriptor() {}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "         */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        public EditCheatSheetDescriptor(EditCheatSheetDescriptor toCopy) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            setTitle(toCopy.title);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            setContents(toCopy.contents);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            setIndexes(toCopy.indexes);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "         */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return CollectionUtil.isAnyNonNull(title, contents, tags, indexes);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        public void setTitle(Title title) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            this.title \u003d title;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        public Optional\u003cTitle\u003e getTitle() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return Optional.ofNullable(title);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "         * Sets {@code contents} to this object\u0027s {@code contents}."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "         * A defensive copy of {@code contents} is used internally."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "         */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        public void setContents(Set\u003cContent\u003e contents) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            this.contents \u003d (contents !\u003d null) ? new HashSet\u003c\u003e(contents) : null;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        public void setIndexes(ArrayList\u003cInteger\u003e indexes) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            this.indexes \u003d indexes;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "         * Returns an unmodifiable content set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code content} is null."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "         */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        public Optional\u003cSet\u003cContent\u003e\u003e getContents() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return (contents !\u003d null) ? Optional.of(Collections.unmodifiableSet(contents)) : Optional.empty();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        public ArrayList\u003cInteger\u003e getIndexes() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return indexes;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "         */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "         */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            if (!(other instanceof EditCheatSheetDescriptor)) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            EditCheatSheetDescriptor e \u003d (EditCheatSheetDescriptor) other;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return getTitle().equals(e.getTitle())"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                    \u0026\u0026 getContents().equals(e.getContents())"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 304,
      "ckb055": 2,
      "Sahilgat": 2,
      "Sam-limyr": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cheatsheet/FilterCheatSheetByTagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.commands.cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.commons.core.Messages.FILTER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.commandresults.CheatSheetCommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.cheatsheet.CheatSheetContainsTagPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckb055"
        },
        "content": " * Command to filter cheatsheet(s) with the related tag(s)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckb055"
        },
        "content": "public class FilterCheatSheetByTagCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String COMMAND_WORD \u003d FILTER;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"filter by tags. Find all \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            + \"related cheatsheets with the specified \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            + \"tags. Example : filter tag/cheatsheet tag/cs2103t\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String FILTER_TAG_MESSAGE_SUCCESS \u003d \"Filter cheatsheets by tag(s) : \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public static final String NO_ITEM_FOUND \u003d \"There is no such CheatSheet with the specified tag(s).\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private ArrayList\u003cString\u003e tagKeywords;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private final CheatSheetContainsTagPredicate tagPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Constructor for filter by tag."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @param predicate to test on an note object to see if it has the tag."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @param tagKeywords the tags provided by user input to test on the note."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public FilterCheatSheetByTagCommand(CheatSheetContainsTagPredicate predicate, ArrayList\u003cString\u003e tagKeywords) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        this.tagPredicate \u003d predicate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        this.tagKeywords \u003d tagKeywords;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * To display to the user which tags he/she indicated"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * @return a string of the tags indicated"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public String showTagQueries() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        for (int i \u003d 0; i \u003c tagKeywords.size(); i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            if (i !\u003d tagKeywords.size() - 1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                sb.append(tagKeywords.get(i))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                        .append(\", \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                sb.append(tagKeywords.get(i));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        ArrayList\u003cString\u003e taggedCheatSheetResult \u003d model.collectTaggedCheatSheets(tagPredicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        //model.updateFilteredCheatSheetList(tagPredicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        for (String s : taggedCheatSheetResult) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            sb.append(s);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        StringBuilder resultToDisplay \u003d new StringBuilder();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (taggedCheatSheetResult.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            resultToDisplay.append(NO_ITEM_FOUND);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            resultToDisplay.append(FILTER_TAG_MESSAGE_SUCCESS)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                    .append(\"\\n\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                    .append(showTagQueries())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                    .append(sb.toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return new CheatSheetCommandResult(resultToDisplay.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                || (other instanceof FilterCheatSheetByTagCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                \u0026\u0026 tagPredicate.equals(((FilterCheatSheetByTagCommand) other).tagPredicate));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 31,
      "ckb055": 56,
      "Sahilgat": 1,
      "Sam-limyr": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cheatsheet/ViewCheatSheetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.commands.cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.commons.core.Messages.VIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.commandresults.CheatSheetCommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " * Views a cheatsheet identified by its displayed index."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class ViewCheatSheetCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String COMMAND_WORD \u003d VIEW;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            + \": Displays a cheatsheet.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String VIEW_CHEATSHEET_SUCCESS \u003d \"Viewing cheatsheet: \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public ViewCheatSheetCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        List\u003cCheatSheet\u003e lastShownList \u003d model.getFilteredCheatSheetList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CHEATSHEET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        CheatSheet cheatSheet \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return new CheatSheetCommandResult("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                String.format(VIEW_CHEATSHEET_SUCCESS + cheatSheet.getTitle(), cheatSheet), Optional.of(cheatSheet));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                || (other instanceof ViewCheatSheetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ViewCheatSheetCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 54,
      "ckb055": 2,
      "Sahilgat": 1,
      "Sam-limyr": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cheatsheet/ViewSpecificCheatSheetTagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.logic.commands.cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.commons.core.Messages.SHOW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.commands.commandresults.CheatSheetCommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.ui.CheatsheetTabWindowController;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " * Views a cheatsheet\u0027s contents by a specified tag identified by its displayed index."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class ViewSpecificCheatSheetTagCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String COMMAND_WORD \u003d SHOW;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            + \": Displays a cheatsheet\u0027s tag\u0027s contents.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String VIEW_TAG_CONTENT_SUCCESS \u003d \"Viewing tag content: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public ViewSpecificCheatSheetTagCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        if (CheatsheetTabWindowController.getCurrCheatSheet().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_CHEATSHEET_LOADED);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        if (CheatsheetTabWindowController.getCurrCheatSheet().get().getTags().size() \u003c targetIndex.getOneBased()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TAG_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return new CheatSheetCommandResult(VIEW_TAG_CONTENT_SUCCESS, targetIndex.getOneBased(), true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                || (other instanceof ViewSpecificCheatSheetTagCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ViewSpecificCheatSheetTagCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/commandresults/CheatSheetCommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.logic.commands.commandresults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class CheatSheetCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /** CheatSheet to display (if any) */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private final Optional\u003cCheatSheet\u003e cheatsheet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private boolean isSwitchTags;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private Optional\u003cInteger\u003e tagIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructs a {@code CheatSheetCommandResult} with the specified fields."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public CheatSheetCommandResult(String feedbackToUser, Optional\u003cCheatSheet\u003e cheatsheet) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.cheatsheet \u003d cheatsheet;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        tagIndex \u003d Optional.empty();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        isSwitchTags \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructs a {@code CheatSheetCommandResult} with the specified fields."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public CheatSheetCommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this(feedbackToUser, Optional.empty());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        tagIndex \u003d Optional.empty();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        isSwitchTags \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public CheatSheetCommandResult(String feedbackToUser, int tagIndex, boolean isSwitchTags) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        this.cheatsheet \u003d Optional.empty();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        this.tagIndex \u003d Optional.of(tagIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        this.isSwitchTags \u003d isSwitchTags;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public Optional\u003cInteger\u003e getTagIndex() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return tagIndex;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public boolean isSwitchTags() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return isSwitchTags;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public Optional\u003cCheatSheet\u003e getCheatSheet() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return cheatsheet;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public boolean isCheatSheetCommandResult() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (!(other instanceof CheatSheetCommandResult)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        CheatSheetCommandResult otherCheatSheetCommandResult \u003d (CheatSheetCommandResult) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return feedbackToUser.equals(otherCheatSheetCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                \u0026\u0026 cheatsheet \u003d\u003d otherCheatSheetCommandResult.cheatsheet;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return Objects.hash(feedbackToUser, cheatsheet);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 1,
      "jaesimin": 23,
      "Sahilgat": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/commandresults/FlashcardCommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.logic.commands.commandresults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class FlashcardCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private boolean isTimeTrial;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private boolean isShowAns;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /** Flashcard to display (if any) */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private final Optional\u003cFlashcard\u003e flashcard;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private final Optional\u003cArrayList\u003cFlashcard\u003e\u003e deck;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructs a {@code FlashcardCommandResult} with the specified fields."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public FlashcardCommandResult(String feedbackToUser, Optional\u003cFlashcard\u003e flashcard) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.flashcard \u003d flashcard;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        deck \u003d Optional.empty();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        isTimeTrial \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        isShowAns \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Constructs a {@code FlashcardCommandResult} with the specified fields."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public FlashcardCommandResult(String feedbackToUser, boolean isTimeTrial, Optional\u003cArrayList\u003cFlashcard\u003e\u003e deck) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        this.flashcard \u003d Optional.empty();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        this.isTimeTrial \u003d isTimeTrial;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        this.deck \u003d deck;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Constructs a {@code FlashcardCommandResult} with the specified fields."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public FlashcardCommandResult(String feedbackToUser, boolean isShowAns) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        this.flashcard \u003d Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        this.deck \u003d Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        this.isTimeTrial \u003d false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        this.isShowAns \u003d isShowAns;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructs a {@code FlashcardCommandResult} with the specified fields."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public FlashcardCommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this(feedbackToUser, Optional.empty());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public Optional\u003cFlashcard\u003e getFlashcard() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return flashcard;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public boolean isTimeTrial() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return isTimeTrial;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public boolean isShowAns() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return isShowAns;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public Optional\u003cArrayList\u003cFlashcard\u003e\u003e getDeck() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return deck;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public boolean isFlashcardCommandResult() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (!(other instanceof FlashcardCommandResult)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        FlashcardCommandResult otherFlashcardCommandResult \u003d (FlashcardCommandResult) other;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return feedbackToUser.equals(otherFlashcardCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                \u0026\u0026 flashcard \u003d\u003d otherFlashcardCommandResult.flashcard;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return Objects.hash(feedbackToUser, flashcard);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 42,
      "Sahilgat": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/commandresults/GlobalCommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.logic.commands.commandresults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.FunctionMode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class GlobalCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /** The application should toggle to a different function. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private final boolean toggle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /** Targeted function. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private final Optional\u003cFunctionMode\u003e targetMode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructs a {@code GlobalCommandResult} with the specified fields."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public GlobalCommandResult(String feedbackToUser, boolean showHelp, boolean exit,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                         boolean toggle, Optional\u003cFunctionMode\u003e targetMode) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.toggle \u003d toggle;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.targetMode \u003d targetMode;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructs a {@code GlobalCommandResult} with the specified fields."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public GlobalCommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this(feedbackToUser, showHelp, exit, false, Optional.empty());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructs a {@code GlobalCommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public GlobalCommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this(feedbackToUser, false, false, false, Optional.empty());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public boolean isToggle() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return toggle;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public Optional\u003cFunctionMode\u003e getTargetMode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return targetMode;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public boolean isGlobalCommandResult() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (!(other instanceof GlobalCommandResult)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        GlobalCommandResult otherGlobalCommandResult \u003d (GlobalCommandResult) other;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return feedbackToUser.equals(otherGlobalCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherGlobalCommandResult.showHelp"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherGlobalCommandResult.exit"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                \u0026\u0026 toggle \u003d\u003d otherGlobalCommandResult.toggle"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                \u0026\u0026 targetMode \u003d\u003d otherGlobalCommandResult.targetMode;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, toggle, targetMode);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 1,
      "Sahilgat": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/commandresults/NoteCommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.logic.commands.commandresults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class NoteCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /** Note to display (if any) */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private final Optional\u003cNote\u003e note;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructs a {@code NoteCommandResult} with the specified fields."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public NoteCommandResult(String feedbackToUser, Optional\u003cNote\u003e note) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructs a {@code NoteCommandResult} with the specified fields."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public NoteCommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this(feedbackToUser, Optional.empty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public Optional\u003cNote\u003e getNote() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return note;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public boolean isNoteCommandResult() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (!(other instanceof NoteCommandResult)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        NoteCommandResult otherNoteCommandResult \u003d (NoteCommandResult) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return feedbackToUser.equals(otherNoteCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                \u0026\u0026 note.equals(otherNoteCommandResult.note);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return Objects.hash(feedbackToUser, note);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 1,
      "Sahilgat": 68,
      "Sam-limyr": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 1,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/UnknownCommandResultTypeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class UnknownCommandResultTypeException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public UnknownCommandResultTypeException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructs a new {@code UnknownCommandResultTypeException} with the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public UnknownCommandResultTypeException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/flashcard/AddFlashcardCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.commands.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.commons.core.Messages.ADD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.commandresults.FlashcardCommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Adds a flashcard to the StudyBuddy application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class AddFlashcardCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String COMMAND_WORD \u003d ADD;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates a new flashcard \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            + \"from the question, answer and title provided. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            + \"Flashcard will be assigned a unique id when created.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            + \"Parameters: \" + PREFIX_QUESTION + \"[QUESTION] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            + PREFIX_ANSWER + \"[ANSWER] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            + PREFIX_TITLE + \"[TITLE] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_QUESTION + \"What is 6 + 19? \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            + PREFIX_ANSWER + \"25 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            + PREFIX_TITLE + \"Basic addition question 1 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            + PREFIX_TAG + \"math\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New flashcard added: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FLASHCARD \u003d \"A flashcard with the same title or question already \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            + \"exists in Flashcards.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private final Flashcard toAdd;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Creates an AddFlashcardCommand to add the specified {@code Flashcard}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public AddFlashcardCommand(Flashcard flashcard) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        requireAllNonNull(flashcard);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.toAdd \u003d flashcard;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (model.hasFlashcard(toAdd)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        model.addFlashcard(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return new FlashcardCommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                || (other instanceof AddFlashcardCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddFlashcardCommand) other).toAdd));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 3,
      "ckb055": 7,
      "Sahilgat": 59,
      "Sam-limyr": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/flashcard/DeleteFlashcardCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.commands.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.commons.core.Messages.DELETE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ARE_YOU_SURE_WANT_TO_DELETE_FLASHCARD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CONFIRM_DELETE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.commands.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.commandresults.FlashcardCommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from StudyBuddyPro."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class DeleteFlashcardCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String COMMAND_WORD \u003d DELETE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            + \": Deletes the flashcard identified by the index number used in the displayed flashcard list.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public static final String MESSAGE_DELETE_FLASHCARD_SUCCESS \u003d \"Deleted Flashcard: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @param targetIndex of the flashcard to be deleted"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public DeleteFlashcardCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        requireAllNonNull(targetIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public Index getTargetIndex() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return targetIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        List\u003cFlashcard\u003e lastShownList \u003d model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        Flashcard flashcardToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        FlashcardCommandResult commandResult \u003d new FlashcardCommandResult (("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                MESSAGE_ARE_YOU_SURE_WANT_TO_DELETE_FLASHCARD"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                + \"\\n\" + flashcardToDelete"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                + \"\\n\" + String.format(MESSAGE_CONFIRM_DELETE, this.targetIndex.getOneBased())));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (CommandHistory.getLastCommand().get() instanceof DeleteFlashcardCommand) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            if (((DeleteFlashcardCommand) CommandHistory.getLastCommand().get()).getTargetIndex()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                    .equals(this.targetIndex)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                // correct. allow delete"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                model.deleteFlashcard(flashcardToDelete);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                commandResult \u003d new FlashcardCommandResult(String.format"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                        (MESSAGE_DELETE_FLASHCARD_SUCCESS, flashcardToDelete));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                || (other instanceof DeleteFlashcardCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteFlashcardCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 53,
      "jaesimin": 2,
      "ckb055": 23,
      "Sahilgat": 2,
      "Sam-limyr": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/flashcard/FilterFlashcardByTagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.commands.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.commons.core.Messages.FILTER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.commandresults.FlashcardCommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.flashcard.FlashcardContainsTagPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " * Command to filter flashcard(s) with the related tag(s)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckb055"
        },
        "content": "public class FilterFlashcardByTagCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String COMMAND_WORD \u003d FILTER;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"filter by tags. Find all \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            + \"related flashcards with the specified \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            + \"tags. Example : filter tag/hard tag/cs2101\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String FILTER_TAG_MESSAGE_SUCCESS \u003d \"Filter flashcards by tag(s) :\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public static final String NO_ITEM_FOUND \u003d \"There is no such FlashCard with the specified tag(s).\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private ArrayList\u003cString\u003e tagKeywords;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private final FlashcardContainsTagPredicate tagPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Constructor for filter by tag."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @param predicate to test on an note object to see if it has the tag."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @param tagKeywords the tags provided by user input to test on the note."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public FilterFlashcardByTagCommand(FlashcardContainsTagPredicate predicate, ArrayList\u003cString\u003e tagKeywords) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        this.tagPredicate \u003d predicate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        this.tagKeywords \u003d tagKeywords;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * To display to the user which tags he/she indicated"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * @return a string of the tags indicated"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public String showTagQueries() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        for (int i \u003d 0; i \u003c tagKeywords.size(); i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            if (i !\u003d tagKeywords.size() - 1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                sb.append(tagKeywords.get(i))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                        .append(\", \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                sb.append(tagKeywords.get(i));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        ArrayList\u003cString\u003e taggedFlashcardResult \u003d model.collectTaggedFlashcards(tagPredicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        //model.updateFilteredFlashcardList(tagPredicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        for (String s : taggedFlashcardResult) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            sb.append(s);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        StringBuilder resultToDisplay \u003d new StringBuilder();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (taggedFlashcardResult.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            resultToDisplay.append(NO_ITEM_FOUND);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            resultToDisplay.append(FILTER_TAG_MESSAGE_SUCCESS)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                    .append(\"\\n\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                    .append(showTagQueries())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                    .append(\"\\n\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                    .append(sb.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return new FlashcardCommandResult(resultToDisplay.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                || (other instanceof FilterFlashcardByTagCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                \u0026\u0026 tagPredicate.equals(((FilterFlashcardByTagCommand) other).tagPredicate));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 33,
      "ckb055": 55,
      "Sahilgat": 1,
      "Sam-limyr": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/flashcard/RemindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.logic.commands.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.commons.core.Messages.REMIND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.commandresults.FlashcardCommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Reminds the user about due and overdue flashcards."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class RemindCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final String COMMAND_WORD \u003d REMIND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final String MESSAGE_NO_DUE_AND_OVERDUE_FLASHCARDS \u003d \"Well done - No due or overdue flashcards!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private RemindFeatureUtil remindFeatureUtil \u003d new RemindFeatureUtil();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Formats output of list of due and overdue flashcards to the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param overdueFlashcards list of overdue flashcards"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param dueFlashcards list of due flashcards"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @return String output for the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public String stringOutputFormatHelper(List\u003cFlashcard\u003e overdueFlashcards, List\u003cFlashcard\u003e dueFlashcards) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (overdueFlashcards.isEmpty() \u0026\u0026 dueFlashcards.isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return MESSAGE_NO_DUE_AND_OVERDUE_FLASHCARDS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } else if (overdueFlashcards.isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            sb.append(remindFeatureUtil.MESSAGE_DUE_FLASHCARD_HELPER + \"\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            sb.append(remindFeatureUtil.formatDueFlashcardListStringHelper(dueFlashcards));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } else if (dueFlashcards.isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            sb.append(remindFeatureUtil.MESSAGE_OVERDUE_FLASHCARD_HELPER + \"\\n\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            sb.append(remindFeatureUtil.formatOverdueFlashcardListStringHelper(overdueFlashcards));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return sb.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            sb.append(remindFeatureUtil.MESSAGE_DUE_FLASHCARD_HELPER + \"\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            sb.append(remindFeatureUtil.formatDueFlashcardListStringHelper(dueFlashcards) + \"\\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            sb.append(remindFeatureUtil.MESSAGE_OVERDUE_FLASHCARD_HELPER + \"\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            sb.append(remindFeatureUtil.formatOverdueFlashcardListStringHelper(overdueFlashcards));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return sb.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        List\u003cFlashcard\u003e flashcardList \u003d model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        List\u003cFlashcard\u003e overdueFlashcards \u003d remindFeatureUtil.getOverdueFlashcards(flashcardList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        List\u003cFlashcard\u003e dueFlashcards \u003d remindFeatureUtil.getDueFlashcards(flashcardList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return new FlashcardCommandResult(stringOutputFormatHelper(overdueFlashcards, dueFlashcards));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/flashcard/RemindFeatureUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.commands.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Utility class for remind feature that abstracts out common methods used to support the remind feature."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class RemindFeatureUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final String MESSAGE_DUE_FLASHCARD_HELPER \u003d \"Here are the flashcards due today:\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final String MESSAGE_OVERDUE_FLASHCARD_HELPER \u003d \"Here are your overdue flashcards:\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Gets flashcards that are due for revision today from a given list of flashcards."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param flashcardList list of flashcards"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @return list of flashcards containing flashcards due for revision today"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public List\u003cFlashcard\u003e getDueFlashcards(List\u003cFlashcard\u003e flashcardList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        List\u003cFlashcard\u003e dueFlashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        //Gets flashcards due today"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        for (Flashcard f : flashcardList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            if (f.getStatistics().getToViewNext().isEqual(currentDate)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                dueFlashcards.add(f);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return dueFlashcards;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Gets flashcards that are overdue for revision from a given list of flashcards."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param flashcardList list of flashcards"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @return list of flashcards containing flashcards due for revision today overdue for revision"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public List\u003cFlashcard\u003e getOverdueFlashcards(List\u003cFlashcard\u003e flashcardList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        List\u003cFlashcard\u003e overdueFlashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        //Gets overdue flashcards"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        for (Flashcard f : flashcardList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            if (f.getStatistics().getToViewNext().isBefore(currentDate)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                overdueFlashcards.add(f);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return overdueFlashcards;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Formats a list of flashcards for output. Perquisites: List has at least one element in it."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param dueFlashcards list of flashcards (greater than size 0)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @return String formatted flashcard display"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public String formatDueFlashcardListStringHelper(List\u003cFlashcard\u003e dueFlashcards) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        int size \u003d dueFlashcards.size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d size; i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            Flashcard flashcard \u003d dueFlashcards.get(i - 1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            sb.append(i + \". \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            sb.append(flashcard.getTitle() + \" - \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            sb.append(flashcard.getQuestion());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            if (i !\u003d size) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                sb.append(\"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Formats a list of flashcards for output. Perquisites: List has at least one element in it."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param overdueFlashcards list of flashcards (greater than size 0)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @return String formatted flashcard display"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public String formatOverdueFlashcardListStringHelper(List\u003cFlashcard\u003e overdueFlashcards) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        int size \u003d overdueFlashcards.size();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d size; i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            Flashcard flashcard \u003d overdueFlashcards.get(i - 1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            sb.append(i + \". \");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            sb.append(flashcard.getTitle() + \" - \");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            sb.append(flashcard.getQuestion());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            sb.append(\" (Was due on \");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            sb.append(flashcard.getStatistics().getToViewNext().toString());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            sb.append(\")\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            if (i !\u003d size) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                sb.append(\"\\n\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 97,
      "Sam-limyr": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/flashcard/ShowFlashcardAnswerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "package seedu.address.logic.commands.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import static seedu.address.commons.core.Messages.SHOW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.logic.commands.commandresults.FlashcardCommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.ui.FlashcardTabWindowController;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class ShowFlashcardAnswerCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public static final String COMMAND_WORD \u003d SHOW;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            + \": Displays a flashcard.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public static final String SHOW_FLASHCARD_ANSWER_SUCCESS \u003d \"Flashcard answer loaded\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public ShowFlashcardAnswerCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        if (FlashcardTabWindowController.getCurrFlashcard().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_FLASHCARD_LOADED);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        if (FlashcardTabWindowController.isAnswerShown()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_ANSWER_ALREADY_LOADED);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return new FlashcardCommandResult(SHOW_FLASHCARD_ANSWER_SUCCESS, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return other \u003d\u003d this; // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/flashcard/StartTimeTrialCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "package seedu.address.logic.commands.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import static seedu.address.commons.core.Messages.TIMETRIAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.logic.commands.commandresults.FlashcardCommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.model.flashcard.FlashcardContainsTagPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.model.tag.exceptions.TagNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " * Loads the next flashcard into the window."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class StartTimeTrialCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public static final String COMMAND_WORD \u003d TIMETRIAL;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Starts a time trial of all all the flashcards\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            + \" with all the specified tag.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            + \"Parameters: [TAG]\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" CS2100\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Time trial started\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private String[] tagKeywords;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private final FlashcardContainsTagPredicate tagPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Creates an AddFlashcardCommand to add the specified {@code Flashcard}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public StartTimeTrialCommand(FlashcardContainsTagPredicate tagPredicate, String[] tagKeywords) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        requireAllNonNull(tagPredicate, tagKeywords);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        this.tagKeywords \u003d tagKeywords;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        this.tagPredicate \u003d tagPredicate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        ArrayList\u003cFlashcard\u003e deck \u003d model.getTaggedFlashcards(tagPredicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        if (deck.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            throw new TagNotFoundException(\"Tag not found\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        Optional\u003cArrayList\u003cFlashcard\u003e\u003e optionalDeck \u003d Optional.of(deck);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return new FlashcardCommandResult(String.format(MESSAGE_SUCCESS), true, optionalDeck);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                || (other instanceof StartTimeTrialCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                \u0026\u0026 tagKeywords.equals(((StartTimeTrialCommand) other).tagKeywords)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                \u0026\u0026 tagPredicate.equals(((StartTimeTrialCommand) other).tagPredicate));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/flashcard/ViewFlashcardCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.commands.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.commons.core.Messages.VIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.commandresults.FlashcardCommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class ViewFlashcardCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String COMMAND_WORD \u003d VIEW;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            + \": Displays a flashcard.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public static final String VIEW_FLASHCARD_SUCCESS \u003d \"Viewing flashcard: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public ViewFlashcardCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        List\u003cFlashcard\u003e lastShownList \u003d model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        Flashcard flashcard \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return new FlashcardCommandResult(String.format(VIEW_FLASHCARD_SUCCESS, flashcard.getTitle()),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                Optional.of(flashcard));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                || (other instanceof ViewFlashcardCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ViewFlashcardCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 51,
      "jaesimin": 2,
      "ckb055": 2,
      "Sahilgat": 3,
      "Sam-limyr": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/global/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.logic.commands.global;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.commons.core.Messages.CLEAR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.commons.core.Messages.SPECIFY_MODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.commands.commandresults.GlobalCommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.StudyBuddyPro;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String COMMAND_WORD \u003d CLEAR;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Cleared \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private boolean isGlobal;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public ClearCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public ClearCommand(boolean isGlobal) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        this.isGlobal \u003d isGlobal;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        StudyBuddyPro newStudyBuddyBook \u003d new StudyBuddyPro();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        if (!isGlobal) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            switch (LogicManager.getMode()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            case CHEATSHEET:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                newStudyBuddyBook.setCheatSheets(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                newStudyBuddyBook.setNotes(model.getStudyBuddyPro().getNoteList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                newStudyBuddyBook.setFlashcards(model.getStudyBuddyPro().getFlashcardList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            case FLASHCARD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                newStudyBuddyBook.setCheatSheets(model.getStudyBuddyPro().getCheatSheetList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                newStudyBuddyBook.setNotes(model.getStudyBuddyPro().getNoteList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                newStudyBuddyBook.setFlashcards(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            case NOTE:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                newStudyBuddyBook.setCheatSheets(model.getStudyBuddyPro().getCheatSheetList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                newStudyBuddyBook.setNotes(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                newStudyBuddyBook.setFlashcards(model.getStudyBuddyPro().getFlashcardList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                // error??"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                throw new CommandException(SPECIFY_MODE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        model.setStudyBuddyPro(newStudyBuddyBook);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return isGlobal"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            ? new GlobalCommandResult(MESSAGE_SUCCESS + \"the entire StudyBuddy book!\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            : new GlobalCommandResult(MESSAGE_SUCCESS + LogicManager.getMode().toString() + \" book!\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 65,
      "ckb055": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/global/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.logic.commands.global;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.commandresults.GlobalCommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.flashcard.RemindFeatureUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting StudyBuddy application as requested ...\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final String MESSAGE_EXIT_DISAPPOINTMENT \u003d \"Exiting StudyBuddy application as requested ... try to \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            + \"revise the overdue flashcards next time!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final String MESSAGE_EXIT_CHECK_UNREVISED_FLASHCARDS_START \u003d \"Are you sure you want to exit? You \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            + \"still have the following flashcards overdue or left to revise for today: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final String MESSAGE_EXIT_CHECK_UNREVISED_FLASHCARDS_END \u003d \"Type \u0027exit\u0027 again to exit the \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            + \"application!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private RemindFeatureUtil remindFeatureUtil \u003d new RemindFeatureUtil();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Formats list of due and overdue flashcards for output."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param overdueFlashcards List of all overdue flashcards"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param dueFlashcards List of all due flashcards"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @return String formatted output of due and overdue flashcards"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public String stringOutputFormatHelper(List\u003cFlashcard\u003e overdueFlashcards, List\u003cFlashcard\u003e dueFlashcards) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        sb.append(MESSAGE_EXIT_CHECK_UNREVISED_FLASHCARDS_START + \"\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (overdueFlashcards.isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            sb.append(remindFeatureUtil.MESSAGE_DUE_FLASHCARD_HELPER + \"\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            sb.append(remindFeatureUtil.formatDueFlashcardListStringHelper(dueFlashcards) + \"\\n\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } else if (dueFlashcards.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            sb.append(remindFeatureUtil.MESSAGE_OVERDUE_FLASHCARD_HELPER + \"\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            sb.append(remindFeatureUtil.formatOverdueFlashcardListStringHelper(overdueFlashcards) + \"\\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            sb.append(remindFeatureUtil.MESSAGE_DUE_FLASHCARD_HELPER + \"\\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            sb.append(remindFeatureUtil.formatDueFlashcardListStringHelper(dueFlashcards) + \"\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            sb.append(remindFeatureUtil.MESSAGE_OVERDUE_FLASHCARD_HELPER + \"\\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            sb.append(remindFeatureUtil.formatOverdueFlashcardListStringHelper(overdueFlashcards) + \"\\n\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        sb.append(MESSAGE_EXIT_CHECK_UNREVISED_FLASHCARDS_END);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        List\u003cFlashcard\u003e flashcardList \u003d model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        List\u003cFlashcard\u003e overdueFlashcards \u003d remindFeatureUtil.getOverdueFlashcards(flashcardList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        List\u003cFlashcard\u003e dueFlashcards \u003d remindFeatureUtil.getDueFlashcards(flashcardList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (overdueFlashcards.isEmpty() \u0026\u0026 dueFlashcards.isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return new GlobalCommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } else if (!CommandHistory.getLastCommand().isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return new GlobalCommandResult(stringOutputFormatHelper(overdueFlashcards, dueFlashcards),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                    false, false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } else if (CommandHistory.getLastCommand().get() instanceof ExitCommand) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return new GlobalCommandResult(MESSAGE_EXIT_DISAPPOINTMENT, false, true);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return new GlobalCommandResult(stringOutputFormatHelper(overdueFlashcards, dueFlashcards),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                    false, false);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 62,
      "-": 16,
      "Sam-limyr": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/global/FilterAllByTagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.logic.commands.global;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.commons.core.Messages.FILTER_ALL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.commandresults.GlobalCommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.StudyBuddyItemContainsTagPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckb055"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckb055"
        },
        "content": " * Globally searches for any StudyBuddyItem that has tags which matches the user input of keywords."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckb055"
        },
        "content": "public class FilterAllByTagCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public static final String COMMAND_WORD \u003d FILTER_ALL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Filters and displays every StudyBuddy item by tag(s).\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"\\nExample usage : filterall tag/cs2100 tag/important\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String FILTER_TAG_MESSAGE_SUCCESS \u003d \"Listing the whole StudyBuddy after filtering by tag(s): \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public static final String NO_ITEM_FOUND \u003d \"There is no such StudyBuddyItem with the specified \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            + \"tag(s) in StudyBuddy!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private ArrayList\u003cString\u003e tagKeywords;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private final StudyBuddyItemContainsTagPredicate tagPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Constructor for filter by tag."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * @param predicate to test on an note object to see if it has the tag."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * @param tagKeywords the tags provided by user input to test on the note."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public FilterAllByTagCommand(StudyBuddyItemContainsTagPredicate predicate, ArrayList\u003cString\u003e tagKeywords) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        this.tagPredicate \u003d predicate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        this.tagKeywords \u003d tagKeywords;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * To display to the user which tags he/she indicated"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * @return a string of the tags indicated"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public String showTagQueries() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        for (int i \u003d 0; i \u003c tagKeywords.size(); i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            if (i !\u003d tagKeywords.size() - 1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                sb.append(tagKeywords.get(i))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                        .append(\", \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                sb.append(tagKeywords.get(i));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        ArrayList\u003cString\u003e tagListResult \u003d model.collectTaggedItems(tagPredicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        for (String s : tagListResult) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            sb.append(s);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        StringBuilder resultToDisplay \u003d new StringBuilder();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (tagListResult.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            resultToDisplay.append(NO_ITEM_FOUND);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            resultToDisplay.append(FILTER_TAG_MESSAGE_SUCCESS)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    .append(\"\\n\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    .append(showTagQueries())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    .append(\"\\n\\n\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                    .append(sb.toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return new GlobalCommandResult(resultToDisplay.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                || (other instanceof FilterAllByTagCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                \u0026\u0026 tagPredicate.equals(((FilterAllByTagCommand) other).tagPredicate));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ckb055"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 79,
      "Sahilgat": 4,
      "Sam-limyr": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/global/FilterByTagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.logic.commands.global;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " * Command to filter objects(s) with the related tag(s)."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public interface FilterByTagCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Displays the tags entered in the display"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * @return string of the tags keyed in"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    static String displayTagKeywords(String[] tagKeywords) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        for (int i \u003d 0; i \u003c tagKeywords.length; i++) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            if (i !\u003d tagKeywords.length - 1) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                sb.append(tagKeywords[i] + \", \");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                sb.append(tagKeywords[i]);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckb055"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 16,
      "jaesimin": 5,
      "Sahilgat": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/global/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.logic.commands.global;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.commandresults.GlobalCommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return new GlobalCommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 5,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/global/ListAllTagsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckb055"
        },
        "content": "package seedu.address.logic.commands.global;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TAGS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.commands.commandresults.GlobalCommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.StudyBuddyCounter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckb055"
        },
        "content": " * Lists all tags in the StudyBuddy Application to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckb055"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckb055"
        },
        "content": "public class ListAllTagsCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"taglist\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Here are all the tags in StudyBuddyPro.\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            + \"Listing all tags : \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            + \"\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        model.updateFilteredTagList(PREDICATE_SHOW_ALL_TAGS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        StringBuilder outputString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        ArrayList\u003cString\u003e sortedTagListInStringForm \u003d model.getListOfTags();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Collections.sort(sortedTagListInStringForm);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        ArrayList\u003cTag\u003e sortedTagList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        for (String s : sortedTagListInStringForm) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            sortedTagList.add(new Tag(s));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        ArrayList\u003cStudyBuddyCounter\u003e studyBuddyCounters \u003d model.getStatistics(sortedTagList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        for (int i \u003d 0; i \u003c sortedTagListInStringForm.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            if (studyBuddyCounters.get(i).isTagExisting()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                outputString.append(\"[\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                outputString.append(sortedTagListInStringForm.get(i));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                outputString.append(\"]\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                outputString.append(\" | \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                outputString.append(studyBuddyCounters.get(i).toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                outputString.append(\"\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return new GlobalCommandResult(MESSAGE_SUCCESS + outputString.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckb055"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/global/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.logic.commands.global;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.commons.core.Messages.LIST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.commons.core.Messages.SPECIFY_MODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CHEATSHEETS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_NOTES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.commandresults.GlobalCommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String COMMAND_WORD \u003d LIST;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listing all \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        String returnMsg \u003d \":\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        switch (LogicManager.getMode()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        case CHEATSHEET:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            model.updateFilteredCheatSheetList(PREDICATE_SHOW_ALL_CHEATSHEETS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        case FLASHCARD:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            model.updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        case NOTE:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            model.updateFilteredNoteList(PREDICATE_SHOW_ALL_NOTES);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            // error??"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new CommandException(SPECIFY_MODE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        returnMsg +\u003d model.formatOutputListString(LogicManager.getMode());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return new GlobalCommandResult(MESSAGE_SUCCESS + LogicManager.getMode().toString() + \"s\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                + returnMsg);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 36,
      "Sahilgat": 1,
      "-": 15,
      "Sam-limyr": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/global/SwitchModeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.logic.commands.global;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.logic.FunctionMode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.commandresults.GlobalCommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " * Toggles between the different functions of the StudyBuddy app."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class SwitchModeCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"switch\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Switches between the respective functions and\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            + \" commands available.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            + \"Parameters: MODE ABBREVIATION\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"Options:\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + COMMAND_WORD + \" fc\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + COMMAND_WORD + \" notes\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + COMMAND_WORD + \" cs\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private static final String SWITCH_TO_CHEATSHEET_FUNCTION_FEEDBACK \u003d \"You are currently using the \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            + \"cheatsheet function!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private static final String SWITCH_TO_FLASHCARD_FUNCTION_FEEDBACK \u003d \"You are currently using the \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            + \"flashcard function!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private static final String SWITCH_TO_NOTES_FUNCTION_FEEDBACK \u003d \"You are currently using the notes function!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private final FunctionMode targetMode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public SwitchModeCommand(FunctionMode targetMode) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        this.targetMode \u003d targetMode;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        String feedBackString;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        switch (targetMode) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        case NOTE:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            feedBackString \u003d SWITCH_TO_NOTES_FUNCTION_FEEDBACK;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            LogicManager.setMode(FunctionMode.NOTE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        case FLASHCARD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            feedBackString \u003d SWITCH_TO_FLASHCARD_FUNCTION_FEEDBACK;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            LogicManager.setMode(FunctionMode.FLASHCARD);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        case CHEATSHEET:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            feedBackString \u003d SWITCH_TO_CHEATSHEET_FUNCTION_FEEDBACK;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            LogicManager.setMode(FunctionMode.CHEATSHEET);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            feedBackString \u003d null; // To be re-implemented"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            LogicManager.setMode(FunctionMode.UNDEFINED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return new GlobalCommandResult(feedBackString, false, false, true,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                Optional.of(targetMode));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public FunctionMode getTargetMode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        // Used in MainWindow"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return targetMode;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                || (other instanceof SwitchModeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                \u0026\u0026 targetMode.equals(((SwitchModeCommand) other).targetMode)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 56,
      "jaesimin": 6,
      "Sahilgat": 6,
      "Sam-limyr": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/note/AddNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.commands.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.commons.core.Messages.ADD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE_FRAGMENT_CONTENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE_FRAGMENT_END;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE_FRAGMENT_START;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE_FRAGMENT_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.commandresults.NoteCommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class AddNoteCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String COMMAND_WORD \u003d ADD;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a note to the list of notes.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + PREFIX_CONTENT + \"CONTENT \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + PREFIX_TITLE + \"Pipelining Definition \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + PREFIX_CONTENT + \"Pipelining is a process where a processor runs multiple instructions simultaneously, \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"each at different stages of the processor. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + PREFIX_TAG + \"CS2100 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + PREFIX_TAG + \"Pipelining\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"\\nOptional Parameters: (for Intra-Note tagging within CONTENT): \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + PREFIX_NOTE_FRAGMENT_START + \" \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + PREFIX_NOTE_FRAGMENT_CONTENT + \"INTRA_CONTENT \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + PREFIX_NOTE_FRAGMENT_TAG + \"INTRA_TAG \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"[\" + PREFIX_NOTE_FRAGMENT_TAG + \"ADDITIONAL_INTRA_TAG]... \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + PREFIX_NOTE_FRAGMENT_END"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"\\nExample: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + PREFIX_TITLE + \"Pipelining Definition \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + PREFIX_CONTENT + \"Pipelining is a process where /* C/a processor runs multiple instructions \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"simultaneously TAG/important TAG/midterm */, each at different stages of the processor. \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + PREFIX_TAG + \"CS2100 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + PREFIX_TAG + \"Pipelining\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New note added: %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_NOTE \u003d \"This note title already exists in Notes.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private final Note toAdd;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Creates an AddNoteCommand to add the specified {@code Note}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public AddNoteCommand(Note note) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        toAdd \u003d note;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (model.hasNote(toAdd)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_NOTE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        model.addNote(toAdd);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return new NoteCommandResult(String.format(MESSAGE_SUCCESS, toAdd.toStringWithNoteFragments()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                || (other instanceof AddNoteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddNoteCommand) other).toAdd));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 2,
      "ckb055": 3,
      "Sahilgat": 1,
      "Sam-limyr": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/note/DeleteNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.commands.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.commons.core.Messages.DELETE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ARE_YOU_SURE_WANT_TO_DELETE_NOTE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CONFIRM_DELETE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.commands.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.commandresults.NoteCommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Deletes a note identified using it\u0027s displayed index from the note list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class DeleteNoteCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String COMMAND_WORD \u003d DELETE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \": Deletes the note identified by the index number used in the displayed note list.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String MESSAGE_DELETE_NOTE_SUCCESS \u003d \"Deleted Note: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public DeleteNoteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public Index getTargetIndex() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return targetIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        List\u003cNote\u003e lastShownList \u003d model.getFilteredNoteList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_NOTE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Note noteToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        NoteCommandResult commandResult \u003d new NoteCommandResult ((MESSAGE_ARE_YOU_SURE_WANT_TO_DELETE_NOTE"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                + \"\\n\" + noteToDelete"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                + \"\\n\" + String.format(MESSAGE_CONFIRM_DELETE, this.targetIndex.getOneBased())));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (CommandHistory.getLastCommand().get() instanceof DeleteNoteCommand) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            if (((DeleteNoteCommand) CommandHistory.getLastCommand().get()).getTargetIndex()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                    .equals(this.targetIndex)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                // correct. allow delete"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                model.deleteNote(noteToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                commandResult \u003d new NoteCommandResult(String.format"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                        (MESSAGE_DELETE_NOTE_SUCCESS, noteToDelete));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                || (other instanceof DeleteNoteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteNoteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 2,
      "ckb055": 22,
      "Sahilgat": 1,
      "Sam-limyr": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/note/FilterNoteByTagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.commands.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.commons.core.Messages.FILTER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.commandresults.NoteCommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.note.NoteContainsTagPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckb055"
        },
        "content": " * Command to filter note(s) with the related tag(s)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckb055"
        },
        "content": "public class FilterNoteByTagCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String COMMAND_WORD \u003d FILTER;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Filters notes by tags.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"Find all related notes and intra-note tags with the specified tags.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"Example : filter tag/important tag/cs2100\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String FILTER_TAG_MESSAGE_SUCCESS \u003d \"Filter notes by tag(s) : \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public static final String NO_ITEM_FOUND \u003d \"There is no such Note with the specified tag(s).\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private ArrayList\u003cString\u003e tagKeywords;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private final NoteContainsTagPredicate tagPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Constructor for filter by tag."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @param predicate to test on an note object to see if it has the tag."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @param tagKeywords the tags provided by user input to test on the note."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public FilterNoteByTagCommand(NoteContainsTagPredicate predicate, ArrayList\u003cString\u003e tagKeywords) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        this.tagPredicate \u003d predicate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        this.tagKeywords \u003d tagKeywords;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * To display to the user which tags he/she indicated"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * @return a string of the tags indicated"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public String showTagQueries() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        for (int i \u003d 0; i \u003c tagKeywords.size(); i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            if (i !\u003d tagKeywords.size() - 1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                sb.append(tagKeywords.get(i))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                        .append(\", \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                sb.append(tagKeywords.get(i));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        ArrayList\u003cString\u003e taggedNoteResult \u003d model.collectTaggedNotes(tagPredicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        for (String s : taggedNoteResult) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            sb.append(s);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        StringBuilder resultToDisplay \u003d new StringBuilder();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (taggedNoteResult.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            resultToDisplay.append(NO_ITEM_FOUND);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            resultToDisplay.append(FILTER_TAG_MESSAGE_SUCCESS)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                    .append(\"\\n\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                    .append(showTagQueries())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    .append(\"\\n\\n\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                    .append(sb.toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return new NoteCommandResult(resultToDisplay.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                || (other instanceof FilterNoteByTagCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                \u0026\u0026 tagPredicate.equals(((FilterNoteByTagCommand) other).tagPredicate));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 32,
      "ckb055": 51,
      "Sahilgat": 1,
      "Sam-limyr": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/note/NoteFeatureUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.commands.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INCORRECT_NOTE_FRAGMENT_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE_FRAGMENT_CONTENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE_FRAGMENT_END;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE_FRAGMENT_START;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE_FRAGMENT_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.NoteFragment;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Contains utility methods used for parsing content strings in the Note classes. Parsed content is then used to"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * create NoteFragment objects, if necessary."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class NoteFeatureUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Parses a {@code Note note} into a {@code List\u003cNoteFragment\u003e}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param note The Note to parse."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @return Returns a List of {@code NoteFragments}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static List\u003cNoteFragment\u003e parseNoteFragmentsFromNote(Note note) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            Title title \u003d note.getTitle();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            List\u003cString\u003e noteFragmentMatches \u003d parseNoteFragmentMatches(note.getContent().toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            return parseNoteFragmentsFromString(title, noteFragmentMatches);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            return Collections.emptyList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Parses all {@code NoteFragment} patterns from a String."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param noteContent The content of the Note, as a String."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @return Returns a List of matching Strings."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static List\u003cString\u003e parseNoteFragmentMatches(String noteContent) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        noteContent \u003d \" \" + noteContent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(noteContent, PREFIX_NOTE_FRAGMENT_START,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                PREFIX_NOTE_FRAGMENT_END);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        List\u003cString\u003e noteFragmentList \u003d argMultimap.getAllValues(PREFIX_NOTE_FRAGMENT_START);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return noteFragmentList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Parses a {@code List\u003cString\u003e} into a {@code List\u003cNoteFragment\u003e}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param title The {@code Title} of the {@code Note} this {@code List\u003cString\u003e} was derived from."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param stringList A List of matching pattern Strings from a {@code Note}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @return Returns a {@code List\u003cNoteFragment\u003e} containing the {@code NoteFragments} of a {@code Note}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @throws ParseException A custom Exception."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static List\u003cNoteFragment\u003e parseNoteFragmentsFromString(Title title, List\u003cString\u003e stringList)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        List\u003cNoteFragment\u003e noteFragmentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        for (String string : stringList) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            string \u003d \" \" + string;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            ArgumentMultimap argMultimapCheck \u003d ArgumentTokenizer.tokenize(string, PREFIX_NOTE_FRAGMENT_CONTENT,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    PREFIX_NOTE_FRAGMENT_TAG);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            if (!NoteFeatureUtil.arePrefixesPresent(argMultimapCheck, PREFIX_NOTE_FRAGMENT_CONTENT,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    PREFIX_NOTE_FRAGMENT_TAG)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                throw new ParseException(MESSAGE_INCORRECT_NOTE_FRAGMENT_FORMAT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            noteFragmentList.add(new NoteFragment(title, parseContentFromNoteFragment(string),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    parseTagsFromNoteFragment(string)));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return noteFragmentList;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Parses a {@code Content} from a {@code NoteFragment}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param noteFragment The input {@code NoteFragment} object to parse."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @return Returns a {@code Content} object."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @throws ParseException A custom exception."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static Content parseContentFromNoteFragment(String noteFragment) throws ParseException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(noteFragment, PREFIX_NOTE_FRAGMENT_CONTENT,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                PREFIX_NOTE_FRAGMENT_TAG);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            return ParserUtil.parseContent(argMultimap.getValue(PREFIX_NOTE_FRAGMENT_CONTENT).get());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new ParseException(Content.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Parses {@code Set\u003cTag\u003e tags} from a {@code NoteFragment}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param noteFragment The input {@code NoteFragment} object to parse."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @return Returns a {@code Set\u003cTag\u003e} set of {@code tags}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @throws ParseException A custom exception."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static Set\u003cTag\u003e parseTagsFromNoteFragment(String noteFragment) throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(noteFragment, PREFIX_NOTE_FRAGMENT_CONTENT,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                PREFIX_NOTE_FRAGMENT_TAG);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            return ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_NOTE_FRAGMENT_TAG));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 122
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/note/ViewNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.commands.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.commons.core.Messages.VIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.commandresults.NoteCommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Finds and lists all notes in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class ViewNoteCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String COMMAND_WORD \u003d VIEW;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \": Displays a note.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"Note is displayed without intra-note tags. Use \u0027viewraw\u0027 to view the raw note.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String VIEW_NOTE_SUCCESS \u003d \"Viewing note: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public ViewNoteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        List\u003cNote\u003e lastShownList \u003d model.getFilteredNoteList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_NOTE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Note note \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Note cleanedNote \u003d new Note(note.getTitle(), note.getContentCleanedFromTags(), note.getTags());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return new NoteCommandResult(model.getFilteredNoteList().isEmpty()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                ? Messages.MESSAGE_NO_MATCHING_NOTE_FOUND"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                : String.format(VIEW_NOTE_SUCCESS, cleanedNote), Optional.of(cleanedNote));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                || (other instanceof ViewNoteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ViewNoteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 2,
      "ckb055": 2,
      "Sahilgat": 2,
      "Sam-limyr": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/note/ViewRawNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.commands.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.commons.core.Messages.VIEW_RAW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.commandresults.NoteCommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Finds and lists all notes in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class ViewRawNoteCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String COMMAND_WORD \u003d VIEW_RAW;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \": Displays a note.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"Note is displayed with intra-note tags. Use \u0027view\u0027 to view the cleaned note.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String VIEW_NOTE_SUCCESS \u003d \"Viewing raw note: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public ViewRawNoteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        List\u003cNote\u003e lastShownList \u003d model.getFilteredNoteList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_NOTE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Note note \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return new NoteCommandResult(model.getFilteredNoteList().isEmpty()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                ? Messages.MESSAGE_NO_MATCHING_NOTE_FOUND"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                : String.format(VIEW_NOTE_SUCCESS, note), Optional.of(note));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                || (other instanceof ViewRawNoteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ViewRawNoteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/person/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.commandresults.GlobalCommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return new GlobalCommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 2,
      "-": 65,
      "Sam-limyr": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/person/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.commandresults.GlobalCommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return new GlobalCommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 2,
      "-": 51,
      "Sam-limyr": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/person/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.commandresults.GlobalCommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return new GlobalCommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 2,
      "-": 224,
      "Sam-limyr": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/person/FilterPersonByTagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.commandresults.GlobalCommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.person.PersonContainsTagPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " * Command to filter person(s) with the related tag(s)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class FilterPersonByTagCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"filter by tags. Find all related persons with the specified \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            + \"tags. Example : filter [neighbours] [friends]\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String FILTER_TAG_MESSAGE_SUCCESS \u003d \"Filter by tag(s) : \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private String[] tagKeywords;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private final PersonContainsTagPredicate tagPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Constructor for filter by tag."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @param predicate to test on an person object to see if he has the tag."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @param tagKeywords the tags provided by user input to test on the person."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public FilterPersonByTagCommand(PersonContainsTagPredicate predicate, String[] tagKeywords) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        this.tagPredicate \u003d predicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        this.tagKeywords \u003d tagKeywords;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Displays the tags entered in the display"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @return string of the tags keyed in"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public String displayTagKeywords() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        for (int i \u003d 0; i \u003c tagKeywords.length; i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            if (i !\u003d tagKeywords.length - 1) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                sb.append(tagKeywords[i] + \", \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                sb.append(tagKeywords[i]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        model.updateFilteredPersonList(tagPredicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return new GlobalCommandResult(FILTER_TAG_MESSAGE_SUCCESS + displayTagKeywords());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 55,
      "Sahilgat": 2,
      "Sam-limyr": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/person/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.commandresults.GlobalCommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return new GlobalCommandResult("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 2,
      "-": 40,
      "Sam-limyr": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CheatsheetParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.cheatsheet.Title;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class CheatsheetParserUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        String trimmedTitle \u003d title.trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        if (!Title.isValidTitle(trimmedTitle)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return new Title(trimmedTitle);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClearCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.commands.global.ClearCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " * Parses input arguments and creates a new ClearCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class ClearCommandParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ClearCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @param args String of arguments"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @return ClearCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public ClearCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ALL);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ALL)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return new ClearCommand(false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return new ClearCommand(true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final Prefix PREFIX_CONTENT \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"addr/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final Prefix PREFIX_NOTE_FRAGMENT_CONTENT \u003d new Prefix(\"C/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final Prefix PREFIX_NOTE_FRAGMENT_TAG \u003d new Prefix(\"TAG/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final Prefix PREFIX_NOTE_FRAGMENT_START \u003d new Prefix(\"/*\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final Prefix PREFIX_NOTE_FRAGMENT_END \u003d new Prefix(\"*/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"tag/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final Prefix PREFIX_QUESTION \u003d new Prefix(\"q/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final Prefix PREFIX_ANSWER \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final Prefix PREFIX_ALL \u003d new Prefix(\"all\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 5,
      "Sahilgat": 1,
      "-": 13,
      "Sam-limyr": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FilterAllByTagCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckb055"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.global.FilterAllByTagCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.StudyBuddyItemContainsTagPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckb055"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": " * Parses input arguments and creates a new ListAllByTagCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckb055"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckb055"
        },
        "content": "public class FilterAllByTagCommandParser implements Parser\u003cFilterAllByTagCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListAllByTagCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * and returns a ListAllByTagCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public FilterAllByTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterAllByTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Set\u003cTag\u003e tags \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterAllByTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        ArrayList\u003cString\u003e tagKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        for (Tag t : tags) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            tagKeywords.add(t.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return new FilterAllByTagCommand(new StudyBuddyItemContainsTagPredicate(tags), tagKeywords);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckb055"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 46,
      "Sahilgat": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.Answer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.Question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Parses a {@code String title} into a {@code Content}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @throws ParseException if the given {@code title} is invalid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static seedu.address.model.note.Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        String trimmedContent \u003d title.trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (!Content.isValidContent(trimmedContent)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return new seedu.address.model.note.Title(trimmedContent);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Parses a {@code String name} into a {@code Content}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @throws ParseException if the given {@code content} is invalid."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static Content parseContent(String content) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireNonNull(content);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        String trimmedContent \u003d content.trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (!Content.isValidContent(trimmedContent)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new ParseException(Content.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return new Content(trimmedContent);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Parses a {@code String question} into a {@code Question}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @throws ParseException if the given {@code question} is invalid."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static Question parseQuestion(String question) throws ParseException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        String trimmedQuestion \u003d question.trim();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (!Question.isValidQuestion(trimmedQuestion)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new ParseException(Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return new Question(trimmedQuestion);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Parses a {@code String answer} into a {@code Answer}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @throws ParseException if the given {@code answer} is invalid."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static Answer parseAnswer(String answer) throws ParseException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        requireNonNull(answer);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        String trimmedAnswer \u003d answer.trim();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (!Answer.isValidAnswer(trimmedAnswer)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new ParseException(Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return new Answer(trimmedAnswer);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Parses a {@code String title} into a {@code Title}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @throws ParseException if the given {@code title} is invalid."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static seedu.address.model.flashcard.Title parseFlashcardTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        String trimmedTitle \u003d title.trim();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (!seedu.address.model.flashcard.Title.isValidTitle(trimmedTitle)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return new seedu.address.model.flashcard.Title(trimmedTitle);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Parses a {@code String title} into a {@code Title}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @throws ParseException if the given {@code title} is invalid."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static seedu.address.model.cheatsheet.Title parseCheatSheetTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        String trimmedTitle \u003d title.trim();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (!seedu.address.model.cheatsheet.Title.isValidTitle(trimmedTitle)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new ParseException(seedu.address.model.cheatsheet.Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return new seedu.address.model.cheatsheet.Title(trimmedTitle);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Parses a {@code String content} into a {@code content}."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @throws ParseException if the given {@code content} is invalid."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static seedu.address.model.cheatsheet.Content parseCheatSheetContent(String content, Set\u003cTag\u003e tags)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        requireNonNull(content);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        String trimmedContent \u003d content.trim();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        if (!seedu.address.model.cheatsheet.Content.isValidContent(trimmedContent)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return new seedu.address.model.cheatsheet.Content(trimmedContent, tags);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e contents} into a {@code Set\u003cContent\u003e}."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static Set\u003cseedu.address.model.cheatsheet.Content\u003e parseCheatSheetContents("
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            Collection\u003cString\u003e contents, Set\u003cTag\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        requireNonNull(contents);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        final Set\u003cseedu.address.model.cheatsheet.Content\u003e contentSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        for (String contentName : contents) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            contentSet.add(parseCheatSheetContent(contentName, tags));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return contentSet;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 45,
      "Sahilgat": 46,
      "-": 124,
      "Sam-limyr": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/StudyBuddyProParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.commons.core.Messages.SPECIFY_MODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.cheatsheet.AddCheatSheetCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.cheatsheet.DeleteCheatSheetCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.cheatsheet.EditCheatSheetCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.cheatsheet.FilterCheatSheetByTagCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.cheatsheet.ViewCheatSheetCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.commands.cheatsheet.ViewSpecificCheatSheetTagCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.flashcard.AddFlashcardCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.flashcard.DeleteFlashcardCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.flashcard.FilterFlashcardByTagCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.flashcard.RemindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.logic.commands.flashcard.ShowFlashcardAnswerCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.logic.commands.flashcard.StartTimeTrialCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.flashcard.ViewFlashcardCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.commands.global.ClearCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.global.ExitCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.global.FilterAllByTagCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.global.HelpCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.commands.global.ListAllTagsCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.commands.global.ListCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.global.SwitchModeCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.note.AddNoteCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.note.DeleteNoteCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.note.FilterNoteByTagCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.note.ViewNoteCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.note.ViewRawNoteCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.cheatsheet.AddCheatSheetCommandParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.cheatsheet.DeleteCheatSheetCommandParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.cheatsheet.EditCheatSheetCommandParser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.cheatsheet.FilterCheatSheetByTagCommandParser;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.cheatsheet.ViewCheatSheetCommandParser;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.parser.cheatsheet.ViewSpecificCheatSheetTagCommandParser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.flashcard.AddFlashcardCommandParser;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.flashcard.DeleteFlashcardCommandParser;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.flashcard.FilterFlashcardByTagCommandParser;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.logic.parser.flashcard.StartTimeTrialCommandParser;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.flashcard.ViewFlashcardCommandParser;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.note.AddNoteCommandParser;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.note.DeleteNoteCommandParser;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.note.FilterNoteByTagCommandParser;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.note.ViewNoteCommandParser;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.note.ViewRawNoteCommandParser;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckb055"
        },
        "content": "public class StudyBuddyProParser {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        final String commandWord \u003d (matcher.group(\"commandWord\")).toLowerCase();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        switch (commandWord) { //global commands?"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return new ClearCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        case ListAllTagsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            return new ListAllTagsCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        case SwitchModeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return new SwitchModeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        case FilterAllByTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            return new FilterAllByTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            switch (LogicManager.getMode()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            case CHEATSHEET:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                return parseCheatSheetCommands(commandWord, arguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            case FLASHCARD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                return parseFlashcardCommands(commandWord, arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            case NOTE:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                return parseNoteCommands(commandWord, arguments);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                throw new ParseException(SPECIFY_MODE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @param commandWord the command to execute"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @param arguments the parameters supplied to command"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private Command parseCheatSheetCommands(String commandWord, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        case AddCheatSheetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return new AddCheatSheetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        case DeleteCheatSheetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return new DeleteCheatSheetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        case EditCheatSheetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return new EditCheatSheetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        case FilterCheatSheetByTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return new FilterCheatSheetByTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        case ViewCheatSheetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return new ViewCheatSheetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        case ViewSpecificCheatSheetTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return new ViewSpecificCheatSheetTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @param commandWord the command to execute"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @param arguments the parameters supplied to command"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private Command parseFlashcardCommands(String commandWord, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        case AddFlashcardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return new AddFlashcardCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        case DeleteFlashcardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return new DeleteFlashcardCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        case FilterFlashcardByTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return new FilterFlashcardByTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        case ViewFlashcardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return new ViewFlashcardCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        case StartTimeTrialCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            return new StartTimeTrialCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        case ShowFlashcardAnswerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            return new ShowFlashcardAnswerCommand();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        case RemindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return new RemindCommand();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @param commandWord the command to execute"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @param arguments the parameters supplied to command"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private Command parseNoteCommands(String commandWord, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        case AddNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return new AddNoteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        case DeleteNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return new DeleteNoteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        case FilterNoteByTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return new FilterNoteByTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        case ViewNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return new ViewNoteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        case ViewRawNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            return new ViewRawNoteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 10,
      "jaesimin": 125,
      "ckb055": 8,
      "Sahilgat": 8,
      "-": 33,
      "Sam-limyr": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SwitchModeCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.logic.FunctionMode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.global.SwitchModeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " * Parses input arguments and creates a new SwitchModeCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class SwitchModeCommandParser implements Parser\u003cSwitchModeCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private static final String CHEATSHEET_ABBREVIATION \u003d \"CS\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private static final String FLASHCARD_ABBREVIATION \u003d \"FC\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private static final String NOTES_ABBREVIATION \u003d \"NOTES\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SwitchModeCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * and returns a SwitchModeCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public SwitchModeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchModeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        switch (trimmedArgs.toUpperCase()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        case CHEATSHEET_ABBREVIATION:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            return new SwitchModeCommand(FunctionMode.CHEATSHEET);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        case FLASHCARD_ABBREVIATION:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            return new SwitchModeCommand(FunctionMode.FLASHCARD);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        case NOTES_ABBREVIATION:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return new SwitchModeCommand(FunctionMode.NOTE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchModeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 41,
      "jaesimin": 1,
      "Sahilgat": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cheatsheet/AddCheatSheetCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.parser.cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TAG_LIMIT_EXCEEDED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.cheatsheet.AddCheatSheetCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.CheatsheetParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.cheatsheet.Content;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.cheatsheet.Title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " * Parses input arguments and creates a new AddCheatSheetCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckb055"
        },
        "content": "public class AddCheatSheetCommandParser implements Parser\u003cAddCheatSheetCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCheatsheetCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * and returns an AddCheatsheetCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public AddCheatSheetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCheatSheetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                    AddCheatSheetCommand.MESSAGE_TAG_RESTRICTION));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Title title \u003d CheatsheetParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (tagList.size() \u003e 10) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            throw new ParseException(MESSAGE_TAG_LIMIT_EXCEEDED);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Set\u003cContent\u003e contentList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        CheatSheet cheatsheet \u003d new CheatSheet(title, contentList, tagList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return new AddCheatSheetCommand(cheatsheet);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ckb055"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ckb055": 37,
      "jaesimin": 26,
      "Sam-limyr": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cheatsheet/DeleteCheatSheetCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.parser.cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.cheatsheet.DeleteCheatSheetCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " * Parses input arguments and creates a new DeleteFlashcardCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class DeleteCheatSheetCommandParser implements Parser\u003cDeleteCheatSheetCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public DeleteCheatSheetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return new DeleteCheatSheetCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCheatSheetCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 27,
      "Sam-limyr": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cheatsheet/EditCheatSheetCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.parser.cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_CHEATSHEET_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.cheatsheet.EditCheatSheetCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.cheatsheet.EditCheatSheetCommand.EditCheatSheetDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.cheatsheet.Content;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " * Parses input arguments and creates a new EditCheatSheetCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class EditCheatSheetCommandParser implements Parser\u003cEditCheatSheetCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCheatSheetCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * and returns an EditCheatSheetCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public EditCheatSheetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_CONTENT, PREFIX_TAG);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                    EditCheatSheetCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        EditCheatSheetDescriptor editCheatSheetDescriptor \u003d new EditCheatSheetDescriptor();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TITLE).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            editCheatSheetDescriptor.setTitle(ParserUtil.parseCheatSheetTitle("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                    argMultimap.getValue(PREFIX_TITLE).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        editCheatSheetDescriptor.setIndexes(parseIndexesForEdit(argMultimap.getAllValues(PREFIX_CONTENT)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editCheatSheetDescriptor::setTags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        if (!editCheatSheetDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new ParseException(EditCheatSheetCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return new EditCheatSheetCommand(index, editCheatSheetDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e indexes} into a {@code ArrayList\u003cInteger\u003e} if {@code indexes} is non-empty."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * If {@code indexes} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * {@code ArrayList\u003cInteger\u003e} containing zero contents."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private ArrayList\u003cInteger\u003e parseIndexesForEdit(Collection\u003cString\u003e indexes) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assert indexes !\u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        if (indexes.isEmpty() || (indexes.size() \u003d\u003d 1 \u0026\u0026 indexes.contains(\"\"))) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        ArrayList\u003cInteger\u003e newIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        for (String s: indexes) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                newIndexes.add(Integer.parseInt(s));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_CHEATSHEET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return newIndexes;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e contents} into a {@code Set\u003cContent\u003e} if {@code contents} is non-empty."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * If {@code contents} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * {@code Set\u003cContent\u003e} containing zero contents."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private Optional\u003cSet\u003cContent\u003e\u003e parseContentsForEdit(Collection\u003cString\u003e contents, Set\u003cTag\u003e tags)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assert contents !\u003d null \u0026\u0026 tags !\u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        if (contents.isEmpty()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Collection\u003cString\u003e contentSet \u003d contents.size() \u003d\u003d 1 \u0026\u0026 contents.contains(\"\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                ? Collections.emptySet() : contents;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return Optional.of(ParserUtil.parseCheatSheetContents(contentSet, tags));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 119,
      "Sam-limyr": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cheatsheet/FilterCheatSheetByTagCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.parser.cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.cheatsheet.FilterCheatSheetByTagCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.cheatsheet.CheatSheetContainsTagPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": " * Parses input arguments and creates a new FilterCheatSheetByTagCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class FilterCheatSheetByTagCommandParser implements Parser\u003cFilterCheatSheetByTagCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FilterCheatSheetByTagCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * and returns a FilterCheatSheetByTagCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public FilterCheatSheetByTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCheatSheetByTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Set\u003cTag\u003e tags \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCheatSheetByTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        ArrayList\u003cString\u003e tagKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        for (Tag t : tags) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            tagKeywords.add(t.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return new FilterCheatSheetByTagCommand(new CheatSheetContainsTagPredicate(tags), tagKeywords);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 28,
      "ckb055": 20,
      "Sam-limyr": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cheatsheet/ViewCheatSheetCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.parser.cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.cheatsheet.ViewCheatSheetCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " * Parses input arguments and creates a new ViewFlashcardCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class ViewCheatSheetCommandParser implements Parser\u003cViewCheatSheetCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewFlashcardCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * and returns a ViewFlashcardCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public ViewCheatSheetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return new ViewCheatSheetCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCheatSheetCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 26,
      "Sam-limyr": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cheatsheet/ViewSpecificCheatSheetTagCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.logic.parser.cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.commands.cheatsheet.ViewSpecificCheatSheetTagCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " * Parses input arguments and creates a new ViewSpecificCheatSheetTagCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class ViewSpecificCheatSheetTagCommandParser implements Parser\u003cViewSpecificCheatSheetTagCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewFlashcardCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * and returns a ViewFlashcardCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public ViewSpecificCheatSheetTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return new ViewSpecificCheatSheetTagCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewSpecificCheatSheetTagCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/flashcard/AddFlashcardCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.parser.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TAG_LIMIT_EXCEEDED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.flashcard.AddFlashcardCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.Answer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.Question;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.Title;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Parses input arguments and creates a new {@code AddFlashcardCommand} object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class AddFlashcardCommandParser implements Parser\u003cAddFlashcardCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code AddFlashcardCommand}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * and returns a {@code AddFlashcardCommand} object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public AddFlashcardCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_QUESTION, PREFIX_ANSWER,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                PREFIX_TITLE, PREFIX_TAG);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_QUESTION, PREFIX_ANSWER, PREFIX_TITLE)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddFlashcardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        Question question \u003d ParserUtil.parseQuestion(argMultimap.getValue(PREFIX_QUESTION).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        Answer answer \u003d ParserUtil.parseAnswer(argMultimap.getValue(PREFIX_ANSWER).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Title title \u003d ParserUtil.parseFlashcardTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (tagList.size() \u003e 10) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            throw new ParseException(MESSAGE_TAG_LIMIT_EXCEEDED);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        Flashcard flashcard \u003d new Flashcard(question, answer, title, tagList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return new AddFlashcardCommand(flashcard);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 4,
      "jaesimin": 4,
      "Sahilgat": 52,
      "Sam-limyr": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/flashcard/DeleteFlashcardCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.parser.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.flashcard.DeleteFlashcardCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " * Parses input arguments and creates a new DeleteFlashcardCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class DeleteFlashcardCommandParser implements Parser\u003cDeleteFlashcardCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public DeleteFlashcardCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            return new DeleteFlashcardCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteFlashcardCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 27,
      "Sam-limyr": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/flashcard/FilterFlashcardByTagCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.parser.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.flashcard.FilterFlashcardByTagCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.flashcard.FlashcardContainsTagPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": " * Parses input arguments and creates a new FilterFlashcardByTagCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class FilterFlashcardByTagCommandParser implements Parser\u003cFilterFlashcardByTagCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FilterFlashcardByTagCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * and returns a FilterFlashcardByTagCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public FilterFlashcardByTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterFlashcardByTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Set\u003cTag\u003e tags \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterFlashcardByTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        ArrayList\u003cString\u003e tagKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        for (Tag t : tags) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            tagKeywords.add(t.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return new FilterFlashcardByTagCommand(new FlashcardContainsTagPredicate(tags), tagKeywords);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 28,
      "ckb055": 20,
      "Sam-limyr": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/flashcard/StartTimeTrialCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "package seedu.address.logic.parser.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.logic.commands.flashcard.StartTimeTrialCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.model.flashcard.FlashcardContainsTagPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " * Parses input arguments and creates a new StartTimeTrialCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class StartTimeTrialCommandParser implements Parser\u003cStartTimeTrialCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public StartTimeTrialCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, StartTimeTrialCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        String[] tagKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        // copy to array of tags"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        for (String s : tagKeywords) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            tags.add(new Tag(s));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return new StartTimeTrialCommand(new FlashcardContainsTagPredicate(tags), tagKeywords);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/flashcard/ViewFlashcardCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.parser.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.flashcard.ViewFlashcardCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " * Parses input arguments and creates a new ViewFlashcardCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class ViewFlashcardCommandParser implements Parser\u003cViewFlashcardCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewFlashcardCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * and returns a ViewFlashcardCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public ViewFlashcardCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            return new ViewFlashcardCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewFlashcardCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 26,
      "Sam-limyr": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/note/AddNoteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.parser.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TAG_LIMIT_EXCEEDED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.note.AddNoteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class AddNoteCommandParser implements Parser\u003cAddNoteCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public AddNoteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_CONTENT, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_CONTENT)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddNoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Content content \u003d ParserUtil.parseContent(argMultimap.getValue(PREFIX_CONTENT).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (tagList.size() \u003e 10) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            throw new ParseException(MESSAGE_TAG_LIMIT_EXCEEDED);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Note note \u003d new Note(title, content, tagList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return new AddNoteCommand(note);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 4,
      "jaesimin": 1,
      "Sam-limyr": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/note/DeleteNoteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.parser.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.note.DeleteNoteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class DeleteNoteCommandParser implements Parser\u003cDeleteNoteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public DeleteNoteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            return new DeleteNoteCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteNoteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/note/FilterNoteByTagCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.parser.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.note.FilterNoteByTagCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.note.NoteContainsTagPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": " * Parses input arguments and creates a new FilterNoteByTagCommandCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class FilterNoteByTagCommandParser implements Parser\u003cFilterNoteByTagCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FilterNoteByTagCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * and returns a FilterNoteByTagCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public FilterNoteByTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterNoteByTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Set\u003cTag\u003e tags \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterNoteByTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        ArrayList\u003cString\u003e tagKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        for (Tag t : tags) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            tagKeywords.add(t.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return new FilterNoteByTagCommand(new NoteContainsTagPredicate(tags), tagKeywords);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 28,
      "ckb055": 20,
      "Sam-limyr": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/note/ViewNoteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.parser.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.note.ViewNoteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Parses input arguments and creates a new ViewNoteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class ViewNoteCommandParser implements Parser\u003cViewNoteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewNoteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * and returns a ViewNoteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public ViewNoteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            return new ViewNoteCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewNoteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/note/ViewRawNoteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.parser.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.note.ViewRawNoteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Parses input arguments and creates a new ViewRawNoteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class ViewRawNoteCommandParser implements Parser\u003cViewRawNoteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewRawNoteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * and returns a ViewRawNoteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public ViewRawNoteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            return new ViewRawNoteCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewRawNoteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/person/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.person.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, tagList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 58,
      "Sam-limyr": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/person/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.person.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 1,
      "-": 27,
      "Sam-limyr": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/person/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.person.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.person.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 79,
      "Sam-limyr": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/person/FilterPersonByTagCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.person.FilterPersonByTagCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.person.PersonContainsTagPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckb055"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckb055"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class FilterPersonByTagCommandParser implements Parser\u003cFilterPersonByTagCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public FilterPersonByTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterPersonByTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        String[] tagKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        // copy to array of tags"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        for (String s : tagKeywords) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            tags.add(new Tag(s));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return new FilterPersonByTagCommand(new PersonContainsTagPredicate(tags), tagKeywords);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckb055"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 33,
      "jaesimin": 4,
      "Sam-limyr": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/person/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.person.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "Sam-limyr": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.FunctionMode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Predicate\u003cNote\u003e PREDICATE_SHOW_ALL_NOTES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Predicate\u003cFlashcard\u003e PREDICATE_SHOW_ALL_FLASHCARDS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    Predicate\u003cCheatSheet\u003e PREDICATE_SHOW_ALL_CHEATSHEETS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    Predicate\u003cTag\u003e PREDICATE_SHOW_ALL_TAGS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    Path getStudyBuddyProFilePath();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    void setStudyBuddyProFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    void setStudyBuddyPro(ReadOnlyStudyBuddyPro studyBuddyPro);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    ReadOnlyStudyBuddyPro getStudyBuddyPro();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /** Returns an unmodifiable view of the filtered note list */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    ObservableList\u003cTag\u003e getFilteredTagList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Updates the filter of the filtered note list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    void updateFilteredTagList(Predicate\u003cTag\u003e predicate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Returns true if a note with the same identity as {@code note} exists in the address book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    boolean hasNote(Note note);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Deletes the given note."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * The note must exist in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    void deleteNote(Note target);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Adds the given note."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * {@code note} must not already exist in the address book."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    void addNote(Note note);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Replaces the given note {@code target} with {@code editedNote}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * The note identity of {@code editedNote} must not be the same as another existing note in FiveNotes."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    void setNote(Note target, Note editedNote);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /** Returns an unmodifiable view of the filtered note list */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    ObservableList\u003cNote\u003e getFilteredNoteList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Updates the filter of the filtered note list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    void updateFilteredNoteList(Predicate\u003cNote\u003e predicate);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedNote}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * The person identity of {@code editedNote} must not be the same as another existing person in FiveNotes."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    void setPerson(Person target, Person editedNote);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Returns true if the same flashcard as {@code flashcard} exists in the application."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    boolean hasFlashcard(Flashcard flashcard);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Adds the given flashcard."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * {@code flashcard} must not already exist in the application."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    void addFlashcard(Flashcard toAdd);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Replaces the given flashcard {@code target} with {@code editedFlashcard}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * The flashcard identity of {@code editedFlashcard} must not be the same as another existing flashcard in"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * address book."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    void setFlashcard(Flashcard target, Flashcard editedFlashcard);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /** Returns an unmodifiable view of the filtered flashcard list */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    ObservableList\u003cFlashcard\u003e getFilteredFlashcardList();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Deletes the given flashcard."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * The flashcard must exist in the flashcard bank."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    void deleteFlashcard(Flashcard target);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /** Updates the filter of the filtered flashcard list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    void updateFilteredFlashcardList(Predicate\u003cFlashcard\u003e predicate);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Formats string for output"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @return String formatted flashcard display"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    String formatOutputListString(FunctionMode mode);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Formats string for output."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @param object the filteredlist to read"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @param \u003cT\u003e the different features: cheatsheet, flashcard, notes"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @return list of all the objects"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    \u003cT\u003e String formatList(FilteredList\u003cT\u003e object);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Adds the given cheatSheet."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * {@code cheatSheet} must not already exist in the cheatSheet book."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    void addCheatSheet(CheatSheet cheatSheet);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    boolean hasCheatSheet(CheatSheet cheatSheet);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Replaces the given cheatSheet {@code target} with {@code editedCheatSheet}."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * {@code target} must exist in the cheatSheet book."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * The cheatSheet identity of {@code editedCheatSheet} must not be the same as"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * another existing editedCheatSheet in Cheatsheet."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    void setCheatSheet(CheatSheet target, CheatSheet editedCheatSheet);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public ObservableList\u003cCheatSheet\u003e getFilteredCheatSheetList();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void updateFilteredCheatSheetList(Predicate\u003cCheatSheet\u003e predicate);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Deletes the given cheatSheet."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * {@code cheatSheet} must exist in the cheatSheet book."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    void deleteCheatSheet(CheatSheet cheatSheet);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Collect tagged items"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * @param predicate to test on the object"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * @return arraylist of all the studybuddyitems that contains the specified tag"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public ArrayList\u003cString\u003e collectTaggedItems(Predicate\u003cStudyBuddyItem\u003e predicate);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public ArrayList\u003cString\u003e collectTaggedCheatSheets(Predicate\u003cCheatSheet\u003e predicate);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public ArrayList\u003cString\u003e collectTaggedFlashcards(Predicate\u003cFlashcard\u003e predicate);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public ArrayList\u003cString\u003e collectTaggedNotes(Predicate\u003cNote\u003e predicate);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Collect tagged flashcards"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @param predicate to test on the object"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @return arraylist of tagged flashcards that contains the specified tag"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public ArrayList\u003cFlashcard\u003e getTaggedFlashcards(Predicate\u003cFlashcard\u003e predicate);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public ArrayList\u003cString\u003e getListOfTags();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public ArrayList\u003cStudyBuddyCounter\u003e getStatistics(ArrayList\u003cTag\u003e tagList);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 22,
      "ckb055": 35,
      "jaesimin": 48,
      "Sahilgat": 25,
      "-": 81,
      "Sam-limyr": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.FunctionMode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private final StudyBuddyPro studyBuddyPro;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private final FilteredList\u003cFlashcard\u003e filteredFlashcards;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private final FilteredList\u003cNote\u003e filteredNotes;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private final FilteredList\u003cCheatSheet\u003e filteredCheatSheets;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private final FilteredList\u003cTag\u003e filteredTags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public ModelManager(ReadOnlyStudyBuddyPro studyBuddyPro, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        requireAllNonNull(studyBuddyPro, userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        logger.fine(\"Initializing with StudyBuddyPro : \" + studyBuddyPro + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        this.studyBuddyPro \u003d new StudyBuddyPro(studyBuddyPro);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.studyBuddyPro.getPersonList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        filteredFlashcards \u003d new FilteredList\u003c\u003e(this.studyBuddyPro.getFlashcardList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        filteredNotes \u003d new FilteredList\u003c\u003e(this.studyBuddyPro.getNoteList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        filteredCheatSheets \u003d new FilteredList\u003c\u003e(this.studyBuddyPro.getCheatSheetList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        filteredTags \u003d new FilteredList\u003c\u003e(this.studyBuddyPro.getTagList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        this(new StudyBuddyPro(), new UserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public Path getStudyBuddyProFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return userPrefs.getStudyBuddyProFilePath();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public void setStudyBuddyProFilePath(Path studyBuddyProFilePath) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        requireNonNull(studyBuddyProFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        userPrefs.setStudyBuddyProFilePath(studyBuddyProFilePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void setStudyBuddyPro(ReadOnlyStudyBuddyPro studyBuddyPro) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        this.studyBuddyPro.resetData(studyBuddyPro);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public ReadOnlyStudyBuddyPro getStudyBuddyPro() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return studyBuddyPro;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return studyBuddyPro.hasPerson(person);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        studyBuddyPro.removePerson(target);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        studyBuddyPro.addPerson(person);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        studyBuddyPro.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        requireNonNull(flashcard);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return studyBuddyPro.hasFlashcard(flashcard);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void addFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        studyBuddyPro.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        requireAllNonNull(target, editedFlashcard);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        studyBuddyPro.setFlashcard(target, editedFlashcard);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public boolean hasNote(Note note) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return studyBuddyPro.hasNote(note);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void deleteNote(Note target) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        studyBuddyPro.removeNote(target);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void addNote(Note note) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        studyBuddyPro.addNote(note);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        updateFilteredNoteList(PREDICATE_SHOW_ALL_NOTES);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void setNote(Note target, Note editedNote) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireAllNonNull(target, editedNote);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        studyBuddyPro.setNote(target, editedNote);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Tag List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public ObservableList\u003cTag\u003e getFilteredTagList() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return filteredTags;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void updateFilteredTagList(Predicate\u003cTag\u003e predicate) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        filteredTags.setPredicate(predicate);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Flashcard List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Flashcard} backed by the internal list of"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e getFilteredFlashcardList() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return filteredFlashcards;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void updateFilteredFlashcardList(Predicate\u003cFlashcard\u003e predicate) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        filteredFlashcards.setPredicate(predicate);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Note} backed by the internal list of"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public ObservableList\u003cNote\u003e getFilteredNoteList() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return filteredNotes;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void updateFilteredNoteList(Predicate\u003cNote\u003e predicate) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        filteredNotes.setPredicate(predicate);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return studyBuddyPro.equals(other.studyBuddyPro)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                \u0026\u0026 filteredNotes.equals(other.filteredNotes);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public void deleteFlashcard(Flashcard target) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        studyBuddyPro.removeFlashcard(target);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Formats string for output"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @return String formatted flashcard display"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public String formatOutputListString(FunctionMode mode) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        String msg \u003d \"\";"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        switch (mode) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        case CHEATSHEET:"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            msg \u003d formatList(filteredCheatSheets);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        case FLASHCARD:"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            msg \u003d formatList(filteredFlashcards);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        case NOTE:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            msg \u003d formatList(filteredNotes);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            // error?"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Formats string for output."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @param object the filteredlist to read"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @param \u003cT\u003e the different features: cheatsheet, flashcard, notes"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @return list of all the objects"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public \u003cT\u003e String formatList(FilteredList\u003cT\u003e object) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        int size \u003d object.size();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        if (size \u003d\u003d 0) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return \"[Empty list]\";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d size; i++) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            T feature \u003d object.get(i - 1);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            sb.append(i)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                    .append(\". \")"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                    .append(feature.toString());"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            if (i !\u003d size) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                sb.append(\"\\n\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dCheatSheet\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void addCheatSheet(CheatSheet cheatSheet) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        studyBuddyPro.addCheatSheet(cheatSheet);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public boolean hasCheatSheet(CheatSheet cheatSheet) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        requireNonNull(cheatSheet);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return studyBuddyPro.hasCheatSheet(cheatSheet);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void setCheatSheet(CheatSheet target, CheatSheet editedCheatSheet) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        requireAllNonNull(target, editedCheatSheet);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        studyBuddyPro.setCheatSheet(target, editedCheatSheet);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void deleteCheatSheet(CheatSheet cheatSheet) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        studyBuddyPro.deleteCheatSheet(cheatSheet);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered CheatSheet List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public ObservableList\u003cCheatSheet\u003e getFilteredCheatSheetList() {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return filteredCheatSheets;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void updateFilteredCheatSheetList(Predicate\u003cCheatSheet\u003e predicate) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        filteredCheatSheets.setPredicate(predicate);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dCOLLECT TAGGED ITEMS TO DISPLAY\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public ArrayList\u003cString\u003e collectTaggedItems(Predicate\u003cStudyBuddyItem\u003e predicate) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return studyBuddyPro.collectTaggedItems(predicate);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public ArrayList\u003cString\u003e collectTaggedCheatSheets(Predicate\u003cCheatSheet\u003e predicate) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return studyBuddyPro.collectTaggedCheatSheets(predicate);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public ArrayList\u003cString\u003e collectTaggedFlashcards(Predicate\u003cFlashcard\u003e predicate) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return studyBuddyPro.collectTaggedFlashcards(predicate);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public ArrayList\u003cFlashcard\u003e getTaggedFlashcards(Predicate\u003cFlashcard\u003e predicate) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return studyBuddyPro.getTaggedFlashcards(predicate);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public ArrayList\u003cString\u003e collectTaggedNotes(Predicate\u003cNote\u003e predicate) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return studyBuddyPro.collectTaggedNotes(predicate);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public ArrayList\u003cString\u003e getListOfTags() {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return studyBuddyPro.getListOfTags();"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public ArrayList\u003cStudyBuddyCounter\u003e getStatistics(ArrayList\u003cTag\u003e tagList) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return studyBuddyPro.getStatistics(tagList);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 13,
      "ckb055": 93,
      "jaesimin": 82,
      "Sahilgat": 35,
      "-": 134,
      "Sam-limyr": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyStudyBuddyPro.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckb055"
        },
        "content": "public interface ReadOnlyStudyBuddyPro {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Returns an unmodifiable view of the flashcards list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * This list will not contain any duplicate flashcards."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    ObservableList\u003cFlashcard\u003e getFlashcardList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Returns an unmodifiable view of the notes list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * This list will not contain any duplicate notes."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    ObservableList\u003cNote\u003e getNoteList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    ObservableList\u003cCheatSheet\u003e getCheatSheetList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    ObservableList\u003cTag\u003e getTagList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 6,
      "ckb055": 2,
      "Sahilgat": 7,
      "-": 16,
      "Sam-limyr": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    Path getStudyBuddyProFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Path getCheatSheetFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 1,
      "ckb055": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/StudyBuddyCounter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckb055"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckb055"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckb055"
        },
        "content": " * StudyBuddyCounterHelper to help maintain the counts of each item"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckb055"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckb055"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckb055"
        },
        "content": "public class StudyBuddyCounter {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private int flashcardCount \u003d 0;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private int notesCount \u003d 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private int cheatSheetCount \u003d 0;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public StudyBuddyCounter() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        this.resetCounts();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void increaseFlashcardCount() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        this.flashcardCount++;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void increaseNotesCount() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        this.notesCount++;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void increaseCheatSheetCount() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        this.cheatSheetCount++;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Resets the counter"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void resetCounts() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        this.flashcardCount \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        this.notesCount \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        this.cheatSheetCount \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    // getter methods"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public int getFlashcardCount() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return flashcardCount;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public int getNotesCount() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return notesCount;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public int getCheatSheetCount() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return cheatSheetCount;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Check if the tag still exists"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * @return true or false depending"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public boolean isTagExisting() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        int sum \u003d this.flashcardCount + this.cheatSheetCount + this.notesCount;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        boolean exists;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (sum \u003d\u003d 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            exists \u003d false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            exists \u003d true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return exists;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return \" flashcards : \" + this.flashcardCount"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                + \" notes : \" + this.notesCount"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                + \" cheatsheets : \" + this.cheatSheetCount;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ckb055"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/model/StudyBuddyItem.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckb055"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckb055"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckb055"
        },
        "content": " * Superclass StudyBuddyItem"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckb055"
        },
        "content": " * For future consideration"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckb055"
        },
        "content": " * Perhaps get cheatSheet, notes, flashcard objects to extend this class"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckb055"
        },
        "content": " * Such that we can extract out the FilteredList to have generics : ? extends StudyBuddyItem?"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckb055"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": "public class StudyBuddyItem {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public StudyBuddyItem(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Checks if this studyBuddyItem contains the tag"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * @return true if it has the tag, false otherwise"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public boolean containsTag(Tag tag) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return this.tags.contains(tag);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckb055"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/StudyBuddyItemContainsTagPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckb055"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckb055"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckb055"
        },
        "content": " * Tests that a {@code StudyBuddyItem}\u0027s {@code Tag} matches any of the tags given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckb055"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckb055"
        },
        "content": "public class StudyBuddyItemContainsTagPredicate implements Predicate\u003cStudyBuddyItem\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(StudyBuddyItemContainsTagPredicate.class.getName());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public StudyBuddyItemContainsTagPredicate (Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        logger.info(\"Filtering StudyBuddyItems that contain at least the specified tags\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public boolean test(StudyBuddyItem studyBuddyItem) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        boolean hasMatchingTags;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            hasMatchingTags \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            hasMatchingTags \u003d tags.stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                    .allMatch(studyBuddyItem::containsTag);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return hasMatchingTags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                || (other instanceof StudyBuddyItemContainsTagPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                \u0026\u0026 tags.equals(((StudyBuddyItemContainsTagPredicate) other).tags)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckb055"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/StudyBuddyPro.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.cheatsheet.CheatSheetContainsTagPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.cheatsheet.UniqueCheatSheetList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.flashcard.FlashcardContainsTagPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.UniqueFlashcardList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.note.NoteContainsTagPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.UniqueNoteList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": "public class StudyBuddyPro implements ReadOnlyStudyBuddyPro {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private final UniqueCheatSheetList cheatSheets;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private final UniqueFlashcardList flashcards;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private final UniqueNoteList notes;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private final UniqueTagList tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        flashcards \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        notes \u003d new UniqueNoteList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        cheatSheets \u003d new UniqueCheatSheetList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        tags \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public StudyBuddyPro() {}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public StudyBuddyPro(ReadOnlyStudyBuddyPro toBeCopied) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void resetData(ReadOnlyStudyBuddyPro newData) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        setNotes(newData.getNoteList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        setFlashcards(newData.getFlashcardList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        setCheatSheets(newData.getCheatSheetList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        setTags(newData.getTagList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                || (other instanceof StudyBuddyPro // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                \u0026\u0026 persons.equals(((StudyBuddyPro) other).persons));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dTag tools\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public ObservableList\u003cTag\u003e getTagList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return tags.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dPerson tools\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dFlashcard tools\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public void removeFlashcard(Flashcard key) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        flashcards.remove(key);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Returns true if a flashcard with the same identity as {@code flashcard} exists in the application."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        requireNonNull(flashcard);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return flashcards.contains(flashcard);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Adds a flashcard to the application."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * The flashcard must not already exist in the application."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void addFlashcard(Flashcard f) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        flashcards.add(f);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        for (Tag t : f.getTags()) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            tags.add(t);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e getFlashcardList() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return flashcards.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Replaces the contents of the flashcards list with {@code flashcards}."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * {@code flashcards} must not contain duplicate flashcards."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void setFlashcards(List\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.flashcards.setFlashcards(flashcards);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Replaces the given flashcard {@code target} in the list with {@code editedFlashcard}."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * The flashcard identity of {@code editedFlashcard} must not be the same as another existing flashcard in the"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * address book."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        requireNonNull(editedFlashcard);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        flashcards.setFlashcard(target, editedFlashcard);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dNote tools\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Returns true if a note with the same identity as {@code note} exists in the address book."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public boolean hasNote(Note note) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return notes.contains(note);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Adds a note to the address book."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * The note must not already exist in the address book."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void addNote(Note note) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        notes.add(note);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        for (Tag t : note.getTags()) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            tags.add(t);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Replaces the given note {@code target} in the list with {@code editedNote}."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * The note identity of {@code editedNote} must not be the same as another existing note in the address book."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void setNote(Note target, Note editedNote) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireNonNull(editedNote);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        notes.setNote(target, editedNote);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Replaces the contents of the note list with {@code notes}."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * {@code notes} must not contain duplicate notes."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void setNotes(List\u003cNote\u003e notes) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        this.notes.setNotes(notes);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void removeNote(Note key) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        notes.remove(key);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public ObservableList\u003cNote\u003e getNoteList() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return notes.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dCheatSheet tools\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Adds a cheatSheet to the cheatSheet book."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * The cheatSheet must not already exist in the cheatSheet book."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void addCheatSheet(CheatSheet cs) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        cheatSheets.add(cs);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        for (Tag t : cs.getTags()) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            tags.add(t);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Deletes a cheatSheet to the cheatSheet book."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * The cheatSheet must already exist in the cheatSheet book."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void deleteCheatSheet(CheatSheet cs) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        cheatSheets.remove(cs);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Checks if the list of cheatsheets contains this cheatsheet"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @param cheatSheet"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public boolean hasCheatSheet(CheatSheet cheatSheet) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        requireNonNull(cheatSheet);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return cheatSheets.contains(cheatSheet);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Replaces the contents of the cheatsheet list with {@code cheatsheets}."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * {@code cheatsheets} must not contain duplicate cheatsheets."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void setCheatSheets(List\u003cCheatSheet\u003e cheatsheets) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        this.cheatSheets.setCheatSheets(cheatsheets);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void setTags(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        this.tags.setTags(tags);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Replaces the given cheatsheet {@code target} in the list with {@code editedCheatSheet}."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * {@code target} must exist in the StudyBuddy application."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * The cheatsheet identity of {@code editedCheatSheet}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * must not be the same as another existing cheatsheet in the StudyBuddy application."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void setCheatSheet(CheatSheet target, CheatSheet editedCheatSheet) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        requireNonNull(editedCheatSheet);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        cheatSheets.setCheatSheet(target, editedCheatSheet);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public ObservableList\u003cCheatSheet\u003e getCheatSheetList() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return cheatSheets.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dTagged related methods\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Collects all studybuddyitems that matches the specified tags according to a predicate"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * @param predicate"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public ArrayList\u003cString\u003e collectTaggedItems(Predicate\u003cStudyBuddyItem\u003e predicate) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        ArrayList\u003cString\u003e taggedItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        int flashcardIndex \u003d 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        int cheatSheetIndex \u003d 0;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        int noteIndex \u003d 0;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        int noteFragmentIndex \u003d 0;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        for (Flashcard fc : this.getFlashcardList()) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            flashcardIndex++;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            if (predicate.test(fc)) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                taggedItems.add(\"Flashcard: \" + flashcardIndex + \". \" + fc.toString());"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        for (CheatSheet cs : this.getCheatSheetList()) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            cheatSheetIndex++;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            if (predicate.test(cs)) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                taggedItems.add(\"CheatSheet: \" + cheatSheetIndex + \". \" + cs.toString());"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        for (Note n : this.getNoteList()) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            noteIndex++;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            if (predicate.test(n)) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                taggedItems.add(\"Note: \" + noteIndex + \". \" + n.toString());"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            for (Note noteFrag : n.getFilteredNoteFragments(predicate)) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                noteFragmentIndex++;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                taggedItems.add(\"Note Fragment: \" + noteIndex + \"-\" + noteFragmentIndex + \". \" + noteFrag.toString());"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            noteFragmentIndex \u003d 0;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return taggedItems;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Collects tag cheatsheets which matches the predicates in a toString() form."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * @param predicate"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * @return ArrayList\u003cString\u003e of collected cheatsheets\u003c/String\u003e"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public ArrayList\u003cString\u003e collectTaggedCheatSheets(Predicate\u003cCheatSheet\u003e predicate) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        ArrayList\u003cString\u003e taggedItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        int cheatSheetIndex \u003d 0;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        for (CheatSheet cs : this.getCheatSheetList()) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            cheatSheetIndex++;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            if (predicate.test(cs)) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                taggedItems.add(cheatSheetIndex + \". \" + cs.toString());"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return taggedItems;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Collects tag flashcards which matches the predicates in a toString() form."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * @param predicate"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * @return ArrayList\u003cString\u003e of collected flashcards\u003c/String\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public ArrayList\u003cString\u003e collectTaggedFlashcards(Predicate\u003cFlashcard\u003e predicate) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        ArrayList\u003cString\u003e taggedItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        int flashcardIndex \u003d 0;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        for (Flashcard fc : this.getFlashcardList()) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            flashcardIndex++;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            if (predicate.test(fc)) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                taggedItems.add(flashcardIndex + \". \" + fc.toString());"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return taggedItems;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public ArrayList\u003cFlashcard\u003e getTaggedFlashcards(Predicate\u003cFlashcard\u003e predicate) {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        ArrayList\u003cFlashcard\u003e taggedFlashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        for (Flashcard fc : this.getFlashcardList()) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            if (predicate.test(fc)) {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                taggedFlashcards.add(fc);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return taggedFlashcards;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Collects tag notes which matches the predicates in a toString() form."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * @param predicate"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * @return ArrayList\u003cString\u003e of collected notes\u003c/String\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public ArrayList\u003cString\u003e collectTaggedNotes(Predicate\u003cNote\u003e predicate) {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        ArrayList\u003cString\u003e taggedItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        int noteIndex \u003d 0;"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        int noteFragmentIndex \u003d 0;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        for (Note n : this.getNoteList()) {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            noteIndex++;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            if (predicate.test(n)) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                taggedItems.add(noteIndex + \". \" + n.toString());"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            for (Note noteFrag : n.getFilteredNoteFragments(predicate)) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                noteFragmentIndex++;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                taggedItems.add(noteIndex + \"-\" + noteFragmentIndex + \". \" + noteFrag.toString());"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            noteFragmentIndex \u003d 0;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return taggedItems;"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public ArrayList\u003cString\u003e getListOfTags() {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        ArrayList\u003cString\u003e listOfTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        for (Tag t : this.getTagList()) {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            listOfTags.add(t.getTagName());"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return listOfTags;"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public ArrayList\u003cStudyBuddyCounter\u003e getStatistics(ArrayList\u003cTag\u003e tagList) {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        ArrayList\u003cStudyBuddyCounter\u003e counterList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        for (Tag t : tagList) {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            StudyBuddyCounter studyBuddyCounter \u003d new StudyBuddyCounter();"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            HashSet\u003cTag\u003e temp \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            temp.add(t);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            FlashcardContainsTagPredicate fcp \u003d new FlashcardContainsTagPredicate(temp);"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            NoteContainsTagPredicate np \u003d new NoteContainsTagPredicate(temp);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            CheatSheetContainsTagPredicate cp \u003d new CheatSheetContainsTagPredicate(temp);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            for (Flashcard fc : this.getFlashcardList()) {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                if (fcp.test(fc)) {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                    studyBuddyCounter.increaseFlashcardCount();"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                }"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            for (Note n : this.getNoteList()) {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                if (np.test(n)) {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                    studyBuddyCounter.increaseNotesCount();"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                }"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            }"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            for (CheatSheet cs : this.getCheatSheetList()) {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                if (cp.test(cs)) {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                    studyBuddyCounter.increaseCheatSheetCount();"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            counterList.add(studyBuddyCounter);"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return counterList;"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 11,
      "ckb055": 179,
      "jaesimin": 100,
      "Sahilgat": 44,
      "-": 95,
      "Sam-limyr": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UniqueStudyBuddyList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckb055"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.exceptions.DuplicateStudyBuddyItemException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.exceptions.StudyBuddyItemNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckb055"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckb055"
        },
        "content": " * A list of StudyBuddyItems that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": " * A StudyBuddyItems is considered unique by comparing using {@code StudyBuddyItem#equals(Object)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckb055"
        },
        "content": " * As such, adding and updating of StudyBuddyItem uses StudyBuddyItem#equals(Object)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckb055"
        },
        "content": " * for equality so as to ensure that the StudyBuddyItem being added or"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckb055"
        },
        "content": " * updated is unique in the UniqueStudyBuddyList. The removal of a flashcard uses"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": " * StudyBuddyItem#equals(Object) as well so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckb055"
        },
        "content": " * as to ensure that the flashcard with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckb055"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckb055"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckb055"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckb055"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckb055"
        },
        "content": "public class UniqueStudyBuddyList\u003cT extends StudyBuddyItem\u003e implements Iterable\u003cT\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private final ObservableList\u003cT\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private final ObservableList\u003cT\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Returns true if the list contains an equivalent flashcard as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public boolean contains(T toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Adds a flashcard to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * The flashcard must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void add(T toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            throw new DuplicateStudyBuddyItemException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Replaces the flashcard {@code target} in the list with {@code editedFlashcard}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * The flashcard\u0027s fields of {@code editedFlashcard} must not be the same as another existing flashcard in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void setItem(T target, T editedItem) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        requireAllNonNull(target, editedItem);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            throw new StudyBuddyItemNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (!target.equals(editedItem) \u0026\u0026 contains(editedItem)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            throw new DuplicateStudyBuddyItemException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        internalList.set(index, editedItem);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Removes the equivalent flashcard from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * The flashcard must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void remove(T toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            throw new StudyBuddyItemNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Replaces the contents of this list with {@code replacement}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void setStudyBuddyItems(UniqueStudyBuddyList\u003cT\u003e replacement) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Replaces the contents of this list with {@code flashcards}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * {@code flashcards} must not contain duplicate flashcards."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void setStudyBuddyItems(List\u003cT\u003e studyBuddyItems) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        requireAllNonNull(studyBuddyItems);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (!studyBuddyItemsAreUnique(studyBuddyItems)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            throw new DuplicateStudyBuddyItemException();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        internalList.setAll(studyBuddyItems);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public ObservableList\u003cT\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public Iterator\u003cT\u003e iterator() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                || (other instanceof UniqueStudyBuddyList // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueStudyBuddyList ) other).internalList));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Returns true if {@code flashcards} contains only unique flashcards."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private boolean studyBuddyItemsAreUnique(List\u003cT\u003e studyBuddyItems) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        for (int i \u003d 0; i \u003c studyBuddyItems.size() - 1; i++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            for (int j \u003d i + 1; j \u003c studyBuddyItems.size(); j++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                if (studyBuddyItems.get(i).equals(studyBuddyItems.get(j))) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ckb055"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 141
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private Path studyBuddyProFilePath \u003d Paths.get(\"data\" , \"studybuddypro.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private Path cheatSheetFilePath \u003d Paths.get(\"data\", \"cheatsheets.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private Path flashcardFilePath \u003d Paths.get(\"data\", \"flashcards.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private Path noteFilePath \u003d Paths.get(\"data\", \"notes.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        setStudyBuddyProFilePath(newUserPrefs.getStudyBuddyProFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public Path getStudyBuddyProFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return studyBuddyProFilePath;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public Path getCheatSheetFilePath() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return cheatSheetFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public Path getFlashcardFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return flashcardFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public Path getNoteFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return noteFilePath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public void setStudyBuddyProFilePath(Path studyBuddyProFilePath) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        requireNonNull(studyBuddyProFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        this.studyBuddyProFilePath \u003d studyBuddyProFilePath;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                \u0026\u0026 studyBuddyProFilePath.equals(o.studyBuddyProFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return Objects.hash(guiSettings, studyBuddyProFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + studyBuddyProFilePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 10,
      "ckb055": 4,
      "Sahilgat": 11,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cheatsheet/CheatSheet.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.model.cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.StudyBuddyItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " * Represents a Cheatsheet object in the StudyBuddy application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckb055"
        },
        "content": "public class CheatSheet extends StudyBuddyItem {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private final Set\u003cContent\u003e contents \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private int contentIndex \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public CheatSheet(Title title, Set\u003cContent\u003e contents, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        super(tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        requireAllNonNull(title, contents, tags);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        this.contents.addAll(contents);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Creates the cheatsheet object: Default \u003d Contents are taken according to tags given"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @param title"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @param tags"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public CheatSheet(Title title, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        super(tags);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        requireAllNonNull(title, tags);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public Set\u003cContent\u003e getContents() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return Collections.unmodifiableSet(contents);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public Content getContent(int index) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        resetContentIndexes();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        for (Content current : contents) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            if (current.getIndex() \u003d\u003d index) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                return current;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public ArrayList\u003cContent\u003e getSortedContents() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        resetContentIndexes();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        ArrayList\u003cContent\u003e contentList \u003d new ArrayList\u003c\u003e(contents);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        ContentSortByIndex comp \u003d new ContentSortByIndex();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        contentList.sort(comp);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return contentList;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Resets the contents\u0027 indexes accordingly"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void resetContentIndexes() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        this.resetContentIndex();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        contents.forEach(this::formatContent);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public String getContentsInStringForm() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        for (Content c : contents) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            sb.append(c.toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            sb.append(\" \");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public boolean isSameCheatSheet(CheatSheet otherCheatSheet) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (otherCheatSheet \u003d\u003d this) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return otherCheatSheet !\u003d null"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                \u0026\u0026 otherCheatSheet.getTitle().equals(getTitle());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private void resetContentIndex() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        this.contentIndex \u003d 0;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private String formatContent(Content c) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        this.contentIndex++;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        c.setIndex(contentIndex);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return \"[ \" + contentIndex + \". \" + c + \" ]\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Returns true if both cheatsheets have the same identity and data fields."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * This defines a stronger notion of equality between two cheatsheets."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (!(other instanceof CheatSheet)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        CheatSheet otherCheatSheet \u003d (CheatSheet) other;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return otherCheatSheet.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                \u0026\u0026 otherCheatSheet.getContents().equals(getContents())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                \u0026\u0026 otherCheatSheet.getTags().equals(getTags());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return Objects.hash(title, contents, getTags());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        builder.append(\" Title: \")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                .append(getTitle())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                .append(\"\\n Tags: \");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        //builder.append(\" Contents: \");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        //resetContentIndexes();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        //builder.append(contents);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 119,
      "ckb055": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cheatsheet/CheatSheetContainsTagPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.model.cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " * Tests that a {@code Cheatsheet}\u0027s {@code Tag} matches any of the keywords given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class CheatSheetContainsTagPredicate implements Predicate\u003cCheatSheet\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CheatSheetContainsTagPredicate.class.getName());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public CheatSheetContainsTagPredicate (Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        logger.info(\"Filtering CheatSheets that contain at least the specified tags\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    // test on the flashcard to see if he has the tag"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public boolean test(CheatSheet cheatSheet) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        boolean hasMatchingTags;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            hasMatchingTags \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            hasMatchingTags \u003d tags.stream()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                    .allMatch(cheatSheet::containsTag);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return hasMatchingTags;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                || (other instanceof CheatSheetContainsTagPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                \u0026\u0026 tags.equals(((CheatSheetContainsTagPredicate) other).tags)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 29,
      "ckb055": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cheatsheet/Content.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.model.cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " * Represents a content of a Cheatsheet in the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidContent(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class Content {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            \"Cheatsheet contents are automatically generated according to tags specified.\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                + \"\\nAny blank contents or contents that do not only contain alphanumeric characters and spaces\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                + \"will not be added into the cheatsheet.\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                + \"\\nAll leading and trailing spaces are ignored.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * The first character of the content must not be a whitespace,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\S.*\"; //\"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public final String content;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private int index \u003d 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Constructs a {@code Content}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @param content A valid content name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public Content(String content, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        requireNonNull(content);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        checkArgument(isValidContent(content), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public Content(String question, String answer, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        requireNonNull(question, answer);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        checkArgument(isValidContent(question), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        checkArgument(isValidContent(answer), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        this.content \u003d \"Question: \" + question"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                + \"; Answer: \" + answer;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Returns true if a given string is a valid content name."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static boolean isValidContent(String test) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void setIndex(int index) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        if (!(other instanceof Content)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Content otherContent \u003d (Content) other;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return otherContent.getContent().equals(getContent())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                \u0026\u0026 otherContent.getTags().equals(getTags());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public String getContent() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return Objects.hash(content, tags);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Formatting for list"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Truncates the content for the general list command"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @return String of truncated content"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public String formatToList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        StringBuilder toBeListed \u003d new StringBuilder();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (this.content.length() \u003e 20) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            toBeListed.append(content.substring(0, 20))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                    .append(\"...\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            toBeListed.append(content);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return toBeListed.toString();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return index + \". \" + content;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 107,
      "ckb055": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cheatsheet/ContentSortByIndex.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.model.cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " * Sorts the indexes of the contents by ascending order"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class ContentSortByIndex implements Comparator\u003cContent\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Compares the indexes and sorts them"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @param c1 index of content"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @param c2 index of another content"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @return indicates which comes first in order"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public int compare(Content c1, Content c2) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        int index1 \u003d c1.getIndex();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        int index2 \u003d c2.getIndex();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        if (index1 \u003c index2) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        } else if (index1 \u003d\u003d index2) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cheatsheet/Title.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.model.cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " * Represents the title of a Cheatsheet in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            \"Titles should only contain alphanumeric characters and spaces, and it should not be blank. \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                    + \"\\nTitles have a maximum length of 100 characters. \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                    + \"\\nDuplicated titles are not recommended as it might not be checked.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                    + \"\\nAll leading and trailing spaces are ignored.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * The first character of the title must not be a whitespace,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public final String fullTitle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        title \u003d title.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        checkArgument(isValidTitle(title), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        this.fullTitle \u003d title;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 test.length() \u003c\u003d 100;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return fullTitle;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                \u0026\u0026 fullTitle.equals(((Title) other).fullTitle)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return fullTitle.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cheatsheet/TitleContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.model.cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " * Tests that a {@code CheatSheet}\u0027s {@code Title} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class TitleContainsKeywordsPredicate implements Predicate\u003cCheatSheet\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public TitleContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public boolean test(CheatSheet cheatSheet) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(cheatSheet.getTitle().fullTitle, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                || (other instanceof TitleContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                \u0026\u0026 keywords.equals(((TitleContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cheatsheet/UniqueCheatSheetList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckb055"
        },
        "content": "package seedu.address.model.cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.cheatsheet.exceptions.CheatSheetNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.cheatsheet.exceptions.DuplicateCheatSheetException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckb055"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckb055"
        },
        "content": " * Represents a list of CheatSheets that are unique."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": " * See also @UniquePersonList"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckb055"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckb055"
        },
        "content": "public class UniqueCheatSheetList implements Iterable\u003cCheatSheet\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private final ObservableList\u003cCheatSheet\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private final ObservableList\u003cCheatSheet\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public boolean contains(CheatSheet toCheck) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameCheatSheet);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void add(CheatSheet toAdd) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new DuplicateCheatSheetException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void setCheatSheet(CheatSheet target, CheatSheet editedCheatSheet) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        requireAllNonNull(target, editedCheatSheet);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new CheatSheetNotFoundException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (!target.isSameCheatSheet(editedCheatSheet) \u0026\u0026 contains(editedCheatSheet)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new DuplicateCheatSheetException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        internalList.set(index, editedCheatSheet);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void remove(CheatSheet toRemove) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new CheatSheetNotFoundException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void setCheatSheets(UniqueCheatSheetList replacement) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void setCheatSheets(List\u003cCheatSheet\u003e cheatSheets) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        requireAllNonNull(cheatSheets);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (!cheatSheetsAreUnique(cheatSheets)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new DuplicateCheatSheetException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        internalList.setAll(cheatSheets);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public ObservableList\u003cCheatSheet\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public Iterator\u003cCheatSheet\u003e iterator() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                || (other instanceof UniqueCheatSheetList // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueCheatSheetList) other).internalList));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private boolean cheatSheetsAreUnique(List\u003cCheatSheet\u003e persons) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                if (persons.get(i).isSameCheatSheet(persons.get(j))) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ckb055"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 124,
      "jaesimin": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cheatsheet/exceptions/CheatSheetNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.model.cheatsheet.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class CheatSheetNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cheatsheet/exceptions/DuplicateCheatSheetException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.model.cheatsheet.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class DuplicateCheatSheetException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public DuplicateCheatSheetException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        super(\"Operation would result in duplicate cheatsheets\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exceptions/DuplicateStudyBuddyItemException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckb055"
        },
        "content": "package seedu.address.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckb055"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckb055"
        },
        "content": " * Signals that the operation will result in duplicate StudyBuddyItems"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckb055"
        },
        "content": " * (StudyBuddyItems are considered duplicates if they have the same fields)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckb055"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckb055"
        },
        "content": "public class DuplicateStudyBuddyItemException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public DuplicateStudyBuddyItemException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        super(\"Operation would result in duplicate StudyBuddy items.\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckb055"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exceptions/StudyBuddyItemNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckb055"
        },
        "content": "package seedu.address.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckb055"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckb055"
        },
        "content": " * Signals that the operation is unable to find the specified studybuddyitem."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckb055"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": "public class StudyBuddyItemNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckb055"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/Answer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Represents a Flashcard\u0027s answer in the StudyBuddy app."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAnswer(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class Answer {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            \"Answer can take any values, and it should not be blank\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                    + \"\\nAnswers have a maximum length of 300 characters. \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                    + \"\\nAll leading and trailing spaces are ignored.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * The first character of the answer must not be a whitespace,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public final String fullAnswer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructs a {@code Answer}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param answer A valid answer."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public Answer(String answer) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        requireNonNull(answer);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        checkArgument(isValidAnswer(answer), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        fullAnswer \u003d answer;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Returns true if a given string is a valid Answer."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static boolean isValidAnswer(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 test.length() \u003c\u003d 300;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return fullAnswer;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                || (other instanceof Answer // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                \u0026\u0026 fullAnswer.equals(((Answer) other).fullAnswer)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return fullAnswer.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 11,
      "Sahilgat": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/Flashcard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.StudyBuddyItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Represents a flashcard in the StudyBuddy application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckb055"
        },
        "content": "public class Flashcard extends StudyBuddyItem {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private final Question question;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private final Answer answer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private final Statistics statistics;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public Flashcard(Question question, Answer answer, Title title, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        super(tags);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        requireAllNonNull(question, answer, tags);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.statistics \u003d new Statistics();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Every field must be present and not null. For use when converting from JSON."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public Flashcard(Question question, Answer answer, Title title, Statistics statistics, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        super(tags);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        requireAllNonNull(question, answer, statistics, tags);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.statistics \u003d statistics;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public Question getQuestion() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public Answer getAnswer() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public Statistics getStatistics() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return statistics;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void updateStatistics() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.statistics.onView();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Returns true if both flashcards have either the same Question or Title."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * This defines a weaker notion of equality between two flashcards."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public boolean isSameFlashcard(Flashcard otherFlashcard) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (otherFlashcard \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return otherFlashcard !\u003d null \u0026\u0026 (otherFlashcard.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                || otherFlashcard.getQuestion().equals(getQuestion()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Returns true if both flashcards have all the same fields."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * This defines a stronger notion of equality between two flashcards."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (!(other instanceof Flashcard)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        Flashcard otherFlashcard \u003d (Flashcard) other;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return otherFlashcard.getQuestion().equals(getQuestion())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                \u0026\u0026 otherFlashcard.getAnswer().equals(getAnswer())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                \u0026\u0026 otherFlashcard.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                \u0026\u0026 otherFlashcard.getTags().equals(getTags())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                \u0026\u0026 otherFlashcard.getStatistics().equals(getStatistics());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return Objects.hash(question, answer, title, getTags());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        builder.append(\"\\tTitle: \")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                .append(getTitle() + \"\\n\")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                .append(\"\\tTags: \");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 20,
      "ckb055": 4,
      "Sahilgat": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/FlashcardContainsTagPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " * Tests that a {@code Note}\u0027s {@code Tag} matches any of the keywords given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class FlashcardContainsTagPredicate implements Predicate\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(FlashcardContainsTagPredicate.class.getName());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public FlashcardContainsTagPredicate (Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        logger.info(\"Filtering Flashcards that contain at least the specified tags\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    // test on the flashcard to see if it has the tag"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public boolean test(Flashcard flashcard) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        boolean hasMatchingTags;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            hasMatchingTags \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            hasMatchingTags \u003d tags.stream()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                    .allMatch(flashcard::containsTag);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return hasMatchingTags;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                || (other instanceof FlashcardContainsTagPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                \u0026\u0026 tags.equals(((FlashcardContainsTagPredicate) other).tags)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 2,
      "jaesimin": 27,
      "ckb055": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/FlashcardTitleContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " *  Tests that a {@code Note}\u0027s {@code Title} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class FlashcardTitleContainsKeywordsPredicate implements Predicate\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public FlashcardTitleContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public boolean test(Flashcard flashcard) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(flashcard.getTitle().fullTitle, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                || (other instanceof FlashcardTitleContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                \u0026\u0026 keywords.equals(((FlashcardTitleContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/FlashcardTitleMatchesKeywordPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " * Tests that a {@code Note}\u0027s {@code Title} matches any of the keyphrases given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class FlashcardTitleMatchesKeywordPredicate implements Predicate\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private final String keyphrase;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public FlashcardTitleMatchesKeywordPredicate(String keyphrase) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        this.keyphrase \u003d keyphrase;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public boolean test(Flashcard flashcard) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return StringUtil.matchesPhraseIgnoreCase(flashcard.getTitle().fullTitle, keyphrase);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                || (other instanceof FlashcardTitleMatchesKeywordPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                \u0026\u0026 keyphrase.equals(((FlashcardTitleMatchesKeywordPredicate) other).keyphrase)); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/Question.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Represents a Flashcard\u0027s question in the StudyBuddy app."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidQuestion(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class Question {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            \"Question can take any values, and it should not be blank\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                + \"\\nQuestions have a maximum length of 300 characters. \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                + \"\\nDuplicated questions are not allowed.\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                + \"\\nAll leading and trailing spaces are ignored.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * The first character of the question must not be a whitespace,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public final String fullQuestion;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructs a {@code Question}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param question A valid question."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public Question(String question) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        checkArgument(isValidQuestion(question), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        fullQuestion \u003d question;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Returns true if a given string is a valid question."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static boolean isValidQuestion(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 test.length() \u003c\u003d 300;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return fullQuestion;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                || (other instanceof Question // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                \u0026\u0026 fullQuestion.equals(((Question) other).fullQuestion)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return fullQuestion.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 11,
      "Sahilgat": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/ScheduleIncrement.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.exceptions.StringToScheduleIncrementConversionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Enum class for use for remind feature"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public enum ScheduleIncrement {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    FIRST,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    SECOND,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    THIRD,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    FOURTH,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    FIFTH,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    SIXTH,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    FINAL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private int numberOfDays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private ScheduleIncrement nextIncrement;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        FIRST.numberOfDays \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        SECOND.numberOfDays \u003d 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        THIRD.numberOfDays \u003d 2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        FOURTH.numberOfDays \u003d 3;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        FIFTH.numberOfDays \u003d 5;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        SIXTH.numberOfDays \u003d 5;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        FINAL.numberOfDays \u003d 7;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        FIRST.nextIncrement \u003d SECOND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        SECOND.nextIncrement \u003d THIRD;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        THIRD.nextIncrement \u003d FOURTH;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        FOURTH.nextIncrement \u003d FIFTH;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        FIFTH.nextIncrement \u003d SIXTH;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        SIXTH.nextIncrement \u003d FINAL;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        FINAL.nextIncrement \u003d FINAL;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static ScheduleIncrement getScheduleIncrementFromString(String stringScheduleIncrement)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throws StringToScheduleIncrementConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        switch (stringScheduleIncrement) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        case \"FIRST\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return FIRST;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        case \"SECOND\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return SECOND;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        case \"THIRD\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return THIRD;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        case \"FOURTH\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return FOURTH;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        case \"FIFTH\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return FIFTH;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        case \"SIXTH\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return SIXTH;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        case \"FINAL\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return FINAL;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new StringToScheduleIncrementConversionException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Get int value of increment."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @return int value of increment"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public int getNumberOfDays() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return numberOfDays;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Get ScheduleIncrement value of next increment."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @return ScheduleIncrement value of next increment"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public ScheduleIncrement getNextIncrement() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return nextIncrement;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return this.name();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/Statistics.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Represents a Flashcard\u0027s statistics in the StudyBuddy app."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class Statistics {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            \"Statistics must have valid LocalDate lastViewed and toViewNext in the format yyyy-mm-dd and valid \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                    + \"ScheduleIncrement currentIncrement such as FIRST or FINAL\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private LocalDate lastViewed;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private LocalDate toViewNext;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private ScheduleIncrement currentIncrement;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructs a {@code Statistics}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Initializes lastViewed variable to local system time."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Initializes currentIncrement variable to determine next viewing time to default FIRST."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Initializes toViewNext variable based on lastViewed and currentIncrement."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public Statistics() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        lastViewed \u003d LocalDate.now();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        currentIncrement \u003d ScheduleIncrement.FIRST;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        updateToViewNext();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Creates a {@code Statistics} object by parsing given String parameters."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param lastViewed String of LocalDate in format yyyy-mm-dd"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param toViewNext String of LocalDate in format yyyy-mm-dd"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param currentIncrement String of ScheduleIncrement"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public Statistics(LocalDate lastViewed, LocalDate toViewNext, ScheduleIncrement currentIncrement) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.lastViewed \u003d lastViewed;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.toViewNext \u003d toViewNext;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.currentIncrement \u003d currentIncrement;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Updates lastViewed variable to current system time."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private void updateLastViewed() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.lastViewed \u003d LocalDate.now();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Increases current increment to the next increment as specified by the {@link ScheduleIncrement} enum class."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private void increaseIncrement() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.currentIncrement \u003d this.currentIncrement.getNextIncrement();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Updates toViewNext variable based on this Statistics\u0027 currentIncrement and lastViewed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private void updateToViewNext() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        long daysToAdd \u003d this.currentIncrement.getNumberOfDays();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.toViewNext \u003d this.lastViewed.plusDays(daysToAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Updates all fields from the described methods. To be used when a {@link Flashcard} is viewed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Ensures lastViewed and toViewNext will never conflict and be the same date"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void onView() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (toViewNext.isEqual(currentDate) || toViewNext.isBefore(currentDate)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            updateLastViewed();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            increaseIncrement();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            updateToViewNext();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            updateLastViewed();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public LocalDate getLastViewed() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return lastViewed;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public LocalDate getToViewNext() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return toViewNext;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public ScheduleIncrement getCurrentIncrement() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return currentIncrement;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        sb.append(\"This flashcard was last viewed on: \");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        sb.append(lastViewed.toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        sb.append(\". This flashcard should next be viewed on \");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        sb.append(toViewNext.toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        sb.append(\" for optimum revision!\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (!(other instanceof Statistics)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        Statistics otherStatistics \u003d (Statistics) other;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return otherStatistics.getLastViewed().equals(getLastViewed())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                \u0026\u0026 otherStatistics.getToViewNext().equals(getToViewNext())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                \u0026\u0026 otherStatistics.getCurrentIncrement().equals(getCurrentIncrement());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return Objects.hash(lastViewed, toViewNext, currentIncrement);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 123
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/Title.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Represents a Flashcard\u0027s title in the StudyBuddy app."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            \"Titles should only contain alphanumeric characters and spaces, and it should not be blank. \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                    + \"\\nTitles have a maximum length of 100 characters. \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                    + \"\\nDuplicated titles are not allowed.\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                    + \"\\nAll leading and trailing spaces are ignored.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * The first character of the title must not be a whitespace,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public final String fullTitle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructs a {@code Title}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param title A valid title."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        checkArgument(isValidTitle(title), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        fullTitle \u003d title;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Returns true if a given string is a valid title."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 test.length() \u003c\u003d 100;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return fullTitle;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                \u0026\u0026 fullTitle.equals(((Title) other).fullTitle)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return fullTitle.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 10,
      "Sahilgat": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/UniqueFlashcardList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.exceptions.DuplicateFlashcardException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.exceptions.DuplicateFlashcardQuestionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.exceptions.DuplicateFlashcardTitleException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.exceptions.FlashcardNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * A list of flashcards that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * A flashcard is considered unique by comparing using {@code Flashcard#equals(Object)}. As such, adding and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * updating of flashcards uses Flashcard#equals(Object) for equality so as to ensure that the flashcard being added or"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * updated is unique in the UniqueFlashcardList. The removal of a flashcard uses Flashcard#equals(Object) as well so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * as to ensure that the flashcard with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * @see Flashcard#equals(Object)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class UniqueFlashcardList implements Iterable\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private final ObservableList\u003cFlashcard\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private final ObservableList\u003cFlashcard\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Helper method to check if a flashcard contains the same question or title as any other flashcard."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param toCheck Flashcard to be checked."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param beingChecked Flashcard being checked."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @throws DuplicateFlashcardQuestionException if toCheck has same question as beingChecked"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @throws DuplicateFlashcardTitleException if toCheck has same title as beingChecked"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @throws DuplicateFlashcardException if toCheck is the same flascard as beingChecked"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private void flashcardExceptionTypeHelper(Flashcard toCheck, Flashcard beingChecked)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        throws DuplicateFlashcardQuestionException, DuplicateFlashcardTitleException, DuplicateFlashcardException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        boolean hasSameQuestion \u003d beingChecked.getQuestion().equals(toCheck.getQuestion());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        boolean hasSameTitle \u003d beingChecked.getTitle().equals(toCheck.getTitle());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (hasSameQuestion \u0026\u0026 hasSameTitle) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new DuplicateFlashcardException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } else if (hasSameQuestion) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new DuplicateFlashcardQuestionException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } else if (hasSameTitle) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new DuplicateFlashcardTitleException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Returns true if the list contains an equivalent flashcard as the given argument."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public boolean contains(Flashcard toCheck) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameFlashcard);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Adds a flashcard to the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * The flashcard must not already exist in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void add(Flashcard toAdd) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            for (Flashcard beingChecked : internalList) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                flashcardExceptionTypeHelper(toAdd, beingChecked);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Replaces the flashcard {@code target} in the list with {@code editedFlashcard}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * The flashcard\u0027s fields of {@code editedFlashcard} must not be the same as another existing flashcard in the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        requireAllNonNull(target, editedFlashcard);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new FlashcardNotFoundException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (!target.isSameFlashcard(editedFlashcard) \u0026\u0026 contains(editedFlashcard)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            for (Flashcard beingChecked : internalList) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                flashcardExceptionTypeHelper(editedFlashcard, beingChecked);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        internalList.set(index, editedFlashcard);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Removes the equivalent flashcard from the list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * The flashcard must exist in the list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void remove(Flashcard toRemove) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new FlashcardNotFoundException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Replaces the contents of this list with {@code replacement}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void setFlashcards(UniqueFlashcardList replacement) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Replaces the contents of this list with {@code flashcards}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * {@code flashcards} must not contain duplicate flashcards."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void setFlashcards(List\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        requireAllNonNull(flashcards);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (!flashcardsAreUnique(flashcards)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new DuplicateFlashcardException();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        internalList.setAll(flashcards);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public Iterator\u003cFlashcard\u003e iterator() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                || (other instanceof UniqueFlashcardList // instanceof handles nulls"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueFlashcardList) other).internalList));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Returns true if {@code flashcards} contains only unique flashcards."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private boolean flashcardsAreUnique(List\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        for (int i \u003d 0; i \u003c flashcards.size() - 1; i++) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            for (int j \u003d i + 1; j \u003c flashcards.size(); j++) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                if (flashcards.get(i).equals(flashcards.get(j))) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 167
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/exceptions/DuplicateFlashcardException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.model.flashcard.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Signals that the operation will result in duplicate Flashcards (Flashcards are considered duplicates if they have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * the same fields)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class DuplicateFlashcardException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public DuplicateFlashcardException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        super(\"Operation would result in duplicate flashcards\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/exceptions/DuplicateFlashcardQuestionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.model.flashcard.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Signals that the operation will result in duplicate Flashcards. Specifically, the flashcards are considered"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * duplicates as they have the same Title field."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class DuplicateFlashcardQuestionException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public DuplicateFlashcardQuestionException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        super(\"Operation would result in duplicate flashcards as the flashcard has the same question as an existing\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                + \"flashcard!\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/exceptions/DuplicateFlashcardTitleException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.model.flashcard.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Signals that the operation will result in duplicate Flashcards. Specifically, the flashcards are considered"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * duplicates as they have the same Title field."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class DuplicateFlashcardTitleException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public DuplicateFlashcardTitleException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        super(\"Operation would result in duplicate flashcards as the flashcard has the same title as an existing \""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                + \"flashcard!\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/exceptions/FlashcardNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.model.flashcard.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Signals that the operation is unable to find the specified flashcard."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class FlashcardNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/exceptions/StringToScheduleIncrementConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.model.flashcard.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Signals that the conversion from a ScheduleIncrement string to a ScheduleIncrement was not successful because none"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * of the cases were matched."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class StringToScheduleIncrementConversionException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public StringToScheduleIncrementConversionException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        super(\"Exception while converting ScheduleIncrement string in JSON storage to ScheduleIncrement!\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/Content.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Represents a Note\u0027s content in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidContent(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class Content {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            \"Note contents should not be blank!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * The first character of the note content must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\S.*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public final String fullContent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Constructs a {@code content}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param content A valid note content."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public Content(String content) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireNonNull(content);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        checkArgument(isValidContent(content), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        fullContent \u003d content;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Returns true if a given string is a valid note content."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static boolean isValidContent(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return fullContent;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                || (other instanceof Content // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                \u0026\u0026 fullContent.equals(((Content) other).fullContent)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return fullContent.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/Note.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.model.note.NoteFragment.NOTE_FRAGMENT_CONTENT_DETECTION_REGEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.model.note.NoteFragment.NOTE_FRAGMENT_END_DETECTION_REGEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.model.note.NoteFragment.NOTE_FRAGMENT_START_DETECTION_REGEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.model.note.NoteFragment.NOTE_FRAGMENT_TAG_DETECTION_REGEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.note.NoteFeatureUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.StudyBuddyItem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Represents a Note in the address book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckb055"
        },
        "content": "public class Note extends StudyBuddyItem {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private final Content content;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private final List\u003cNoteFragment\u003e noteFragments;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Every field must be present and not null, except for tags."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public Note(Title title, Content content, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        super(tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireAllNonNull(title, content);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.noteFragments \u003d NoteFeatureUtil.parseNoteFragmentsFromNote(this);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public Content getContent() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public Content getContentCleanedFromTags() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        String rawContent \u003d content.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        String cleanedContent \u003d rawContent.replaceAll(NOTE_FRAGMENT_CONTENT_DETECTION_REGEX, \"\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                .replaceAll(NOTE_FRAGMENT_TAG_DETECTION_REGEX, \" \")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                .replaceAll(NOTE_FRAGMENT_START_DETECTION_REGEX, \" \")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                .replaceAll(NOTE_FRAGMENT_END_DETECTION_REGEX, \" \")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                .trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return new Content(cleanedContent);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private List\u003cNoteFragment\u003e getNoteFragments() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return noteFragments;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public List\u003cNoteFragment\u003e getFilteredNoteFragments(Predicate\u003c? super NoteFragment\u003e predicate) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        List\u003cNoteFragment\u003e noteFragmentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        for (NoteFragment noteFragment : getNoteFragments()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            if (predicate.test(noteFragment)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                noteFragmentList.add(noteFragment);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return noteFragmentList;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public boolean hasNoteFragments() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return !getNoteFragments().isEmpty();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Returns true if both notes of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * This defines a weaker notion of equality between two notes."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public boolean isSameNote(Note otherNote) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (otherNote \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return otherNote !\u003d null \u0026\u0026 otherNote.getTitle().equals(getTitle());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Returns true if both notes have the same identity and data fields."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * This defines a stronger notion of equality between two notes."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (!(other instanceof Note)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Note otherNote \u003d (Note) other;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return otherNote.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                \u0026\u0026 otherNote.getContent().equals(getContent())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                \u0026\u0026 otherNote.getTags().equals(getTags());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return Objects.hash(title, content, getTags());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Returns a String displaying this {@code Note\u0027s} information as well as all following {@code NoteFragments\u0027}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @return Returns a String."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public String toStringWithNoteFragments() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder(this.toString());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (this.hasNoteFragments()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            builder.append(\"\\n\\nNote fragment tags detected:\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            for (NoteFragment frag : getNoteFragments()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                builder.append(frag.toString())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                        .append(\"\\n\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            builder.append(\"\\n\\nThe added Note has no detected note fragment tags!\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        builder.append(\"\\n\\tTitle: \")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                .append(getTitle())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                .append(\"\\n\\tContent: \")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                .append(getContent())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                .append(\"\\n\\tTags: \");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 9,
      "ckb055": 4,
      "Sam-limyr": 131
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/NoteContainsTagPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " * Tests that a {@code Note}\u0027s {@code Tag} matches any of the keywords given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class NoteContainsTagPredicate implements Predicate\u003cNote\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(NoteContainsTagPredicate.class.getName());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public NoteContainsTagPredicate (Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        logger.info(\"Filtering Notes that contain at least the specified tags\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    // test on the note to see if he has the tag"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public boolean test(Note note) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        boolean hasMatchingTags;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            hasMatchingTags \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            hasMatchingTags \u003d tags.stream()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                    .allMatch(note::containsTag);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return hasMatchingTags;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                || (other instanceof NoteContainsTagPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                \u0026\u0026 tags.equals(((NoteContainsTagPredicate) other).tags)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 29,
      "ckb055": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/NoteFragment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Represents a NoteFragment in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class NoteFragment extends Note {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String NOTE_FRAGMENT_CONTENT_DETECTION_REGEX \u003d \"C/\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String NOTE_FRAGMENT_END_DETECTION_REGEX \u003d \"(\\\\s*)+\\\\*/(\\\\s*)+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String NOTE_FRAGMENT_START_DETECTION_REGEX \u003d \"(\\\\s*)+/\\\\*(\\\\s*)+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String NOTE_FRAGMENT_TAG_DETECTION_REGEX \u003d \"TAG/\\\\S+ \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Every field must be present and not null, except for tags."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public NoteFragment(Title title, Content content, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        super(title, content, tags);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Returns true if both note fragments have the same identity and data fields."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * This defines a stronger notion of equality between two note fragments."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (!(other instanceof NoteFragment)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        NoteFragment otherNote \u003d (NoteFragment) other;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return otherNote.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                \u0026\u0026 otherNote.getContent().equals(getContent())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                \u0026\u0026 otherNote.getTags().equals(getTags());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/NoteTitleContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " *  Tests that a {@code Note}\u0027s {@code Title} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class NoteTitleContainsKeywordsPredicate implements Predicate\u003cNote\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public NoteTitleContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public boolean test(Note note) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(note.getTitle().fullTitle, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                || (other instanceof NoteTitleContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                \u0026\u0026 keywords.equals(((NoteTitleContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 4,
      "Sam-limyr": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/Title.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Represents a Note\u0027s title in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            \"Titles should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * The first character of the title must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public final String fullTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Constructs a {@code title}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param title A valid title."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        checkArgument(isValidTitle(title), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        fullTitle \u003d title;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Returns true if a given string is a valid title."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return fullTitle;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                \u0026\u0026 fullTitle.equals(((Title) other).fullTitle)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return fullTitle.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/UniqueNoteList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.exception.DuplicateNoteTitleException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.exception.NoteNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * A list of notes that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * A note is considered unique by comparing using {@code Note#isSameNote(Note)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * notes uses Note#isSameNote(Note) for equality so as to ensure that the note being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * unique in terms of identity in the UniqueNoteList. However, the removal of a note uses Note#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * as to ensure that the note with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * @see Note#isSameNote(Note)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class UniqueNoteList implements Iterable\u003cNote\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private final ObservableList\u003cNote\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private final ObservableList\u003cNote\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Returns true if the list contains an equivalent note as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public boolean contains(Note toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameNote);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Adds a note to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * The note must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void add(Note toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new DuplicateNoteTitleException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Replaces the note {@code target} in the list with {@code editedNote}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * The note identity of {@code editedNote} must not be the same as another existing note in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void setNote(Note target, Note editedNote) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireAllNonNull(target, editedNote);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new NoteNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (!target.isSameNote(editedNote) \u0026\u0026 contains(editedNote)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new DuplicateNoteTitleException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        internalList.set(index, editedNote);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Removes the equivalent note from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * The note must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void remove(Note toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new NoteNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void setNotes(UniqueNoteList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Replaces the contents of this list with {@code notes}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * {@code notes} must not contain duplicate notes."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void setNotes(List\u003cNote\u003e notes) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireAllNonNull(notes);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (!notesAreUnique(notes)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new DuplicateNoteTitleException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        internalList.setAll(notes);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public ObservableList\u003cNote\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public Iterator\u003cNote\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                || (other instanceof UniqueNoteList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueNoteList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Returns true if {@code notes} contains only unique notes."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private boolean notesAreUnique(List\u003cNote\u003e notes) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        for (int i \u003d 0; i \u003c notes.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            for (int j \u003d i + 1; j \u003c notes.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                if (notes.get(i).isSameNote(notes.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/exception/DuplicateNoteTitleException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.model.note.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class DuplicateNoteTitleException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public DuplicateNoteTitleException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        super(\"Operation would result in duplicate notes!\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/exception/NoteNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.model.note.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class NoteNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public NoteNotFoundException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        super(\"No note with that title exists!\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public boolean containsTag(Tag tag) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return this.tags.contains(tag);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 4,
      "-": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PersonContainsTagPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckb055"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckb055"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckb055"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckb055"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckb055"
        },
        "content": "public class PersonContainsTagPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public PersonContainsTagPredicate (Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    // test on the person to see if he has the tag"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return tags.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                .anyMatch(person::containsTag);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                || (other instanceof PersonContainsTagPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                \u0026\u0026 tags.equals(((PersonContainsTagPredicate) other).tags)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckb055"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        this.tagName \u003d tagName.toLowerCase();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 5,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/UniqueTagList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.tag.exceptions.DuplicateTagException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " * A list of tags that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " * A tag is considered unique by comparing using {@code Tag#equals(Tag)}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class UniqueTagList implements Iterable\u003cTag\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private final ObservableList\u003cTag\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private final ObservableList\u003cTag\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Returns true if the list contains an equivalent tag as the given argument."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public boolean contains(Tag toCheck) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Adds a tag to the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void add(Tag toAdd) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (!contains(toAdd)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            internalList.add(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    //     * Replaces the tag {@code target} in the list with {@code editedTag}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    //     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    //     * The tag identity of {@code editedTag} must not be the same as another existing tag in the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    //    public void setTag(Tag target, Tag editedTag) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    //        requireAllNonNull(target, editedTag);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    //        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    //        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    //            throw new TagNotFoundException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    //        if (!target.equals(editedTag) \u0026\u0026 contains(editedTag)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    //            throw new DuplicateTagException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    //        internalList.set(index, editedTag);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    //     * Removes the equivalent tag from the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    //     * The tag must exist in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    //    public void remove(Tag toRemove) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    //        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    //        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    //            throw new TagNotFoundException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Replaces the internal list of tags with the internal list of tags within the specified UniqueTagList."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @param replacement object that contains the replacement internal list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void setTags(UniqueTagList replacement) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Replaces the contents of this list with {@code tags}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * {@code tags} must not contain duplicate tags."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void setTags(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        requireAllNonNull(tags);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        if (!tagsAreUnique(tags)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new DuplicateTagException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        internalList.setAll(tags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public ObservableList\u003cTag\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public Iterator\u003cTag\u003e iterator() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                || (other instanceof UniqueTagList // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueTagList) other).internalList));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private boolean tagsAreUnique(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        for (int i \u003d 0; i \u003c tags.size() - 1; i++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tags.size(); j++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                if (tags.get(i).equals(tags.get(j))) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 34,
      "jaesimin": 97,
      "ckb055": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/exceptions/DuplicateTagException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.model.tag.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " * Signals that the operation will result in duplicate Tags (Tags are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class DuplicateTagException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public DuplicateTagException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        super(\"Operation would result in duplicate tags\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/exceptions/TagNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.model.tag.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class TagNotFoundException extends CommandException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public TagNotFoundException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public TagNotFoundException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        super(\"Tag not found\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 11,
      "jaesimin": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.ReadOnlyStudyBuddyPro;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.StudyBuddyPro;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.cheatsheet.Content;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public static ReadOnlyStudyBuddyPro getSampleAddressBook() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        StudyBuddyPro sampleAb \u003d new StudyBuddyPro();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Returns a content set containing the list of strings given."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static Set\u003cContent\u003e getContentSet(String... strings) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                .map(x -\u003e new Content(x, new HashSet\u003cTag\u003e()))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 10,
      "ckb055": 4,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedCheatSheet.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckb055"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.cheatsheet.Content;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.cheatsheet.Title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckb055"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckb055"
        },
        "content": " * Todo."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": " * Linking cheatsheet to JSON file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckb055"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckb055"
        },
        "content": "public class JsonAdaptedCheatSheet {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"CheatSheet\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private final List\u003cJsonAdaptedCheatSheetContent\u003e contents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Constructs a {@code JsonAdaptedCheatSheet} with the given cheatsheet details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public JsonAdaptedCheatSheet(@JsonProperty(\"title\") String title,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                                @JsonProperty(\"contents\") List\u003cJsonAdaptedCheatSheetContent\u003e contents,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                                @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (contents !\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            this.contents.addAll(contents);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Converts a given {@code CheatSheet} into this class for Jackson use."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public JsonAdaptedCheatSheet(CheatSheet source) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        title \u003d source.getTitle().fullTitle;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        contents.addAll(source.getContents().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                .map(JsonAdaptedCheatSheetContent::new)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Converts this Jackson-friendly adapted cheatSheet object into the model\u0027s {@code CheatSheet} object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted cheatSheet."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public CheatSheet toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        final List\u003cTag\u003e cheatSheetTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            cheatSheetTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        final Set\u003cContent\u003e cheatSheetContents \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        for (JsonAdaptedCheatSheetContent content : contents) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            cheatSheetContents.add(content.toModelType());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        final Set\u003cContent\u003e modelContents \u003d new HashSet\u003c\u003e(cheatSheetContents);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(cheatSheetTags);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return new CheatSheet(modelTitle, modelContents, modelTags);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ckb055"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 81,
      "jaesimin": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedCheatSheetContent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.cheatsheet.Content;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " * Jackson-friendly version of {@link Content}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "class JsonAdaptedCheatSheetContent {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @JsonProperty(\"content\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private final String content;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @JsonProperty(\"content_tags\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Constructs a {@code JsonAdaptedContent} with the given {@code content}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public JsonAdaptedCheatSheetContent("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            @JsonProperty(\"content\") String content,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            @JsonProperty(\"content_tags\") List\u003cJsonAdaptedTag\u003e tags) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        if (tags !\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            this.tags.addAll(tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Converts a given {@code Content} into this class for Jackson use."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public JsonAdaptedCheatSheetContent(Content source) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        this.content \u003d source.content;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        tags.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    //@JsonValue"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public String getContent() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    //@JsonValue"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public String getTag() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return tags.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Converts this Jackson-friendly adapted content object into the model\u0027s {@code Content} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted content."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public Content toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        if (!Content.isValidContent(content)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new IllegalValueException(Content.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        final List\u003cTag\u003e contentTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        for (JsonAdaptedTag tag : tags) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            contentTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(contentTags);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return new Content(content, modelTags);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedFlashcard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.Answer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.Question;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.ScheduleIncrement;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.Statistics;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.Title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.exceptions.StringToScheduleIncrementConversionException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Jackson-friendly version of {@link Flashcard}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "class JsonAdaptedFlashcard {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Flashcard\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final String MISSING_STATISTICS_FIELD_MESSAGE_FORMAT \u003d \"Statistic\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private final String question;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private final String answer;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private final String statisticsLastViewed;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private final String statisticsToViewNext;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private final String statisticsCurrentIncrement;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructs a {@code JsonAdaptedFlashcard} with the given person details."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public JsonAdaptedFlashcard(@JsonProperty(\"question\") String question, @JsonProperty(\"answer\") String answer,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                                @JsonProperty(\"title\") String title,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                                @JsonProperty(\"statisticsLastViewed\") String statisticsLastViewed,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                                @JsonProperty(\"statisticsToViewNext\") String statisticsToViewNext,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                                @JsonProperty(\"statisticsCurrentIncrement\") String statisticsCurrentIncrement,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                                @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.statisticsLastViewed \u003d statisticsLastViewed;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.statisticsToViewNext \u003d statisticsToViewNext;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.statisticsCurrentIncrement \u003d statisticsCurrentIncrement;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Converts a given {@code Flashcard} into this class for Jackson use."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public JsonAdaptedFlashcard(Flashcard source) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        question \u003d source.getQuestion().fullQuestion;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        answer \u003d source.getAnswer().fullAnswer;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        title \u003d source.getTitle().fullTitle;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        statisticsLastViewed \u003d source.getStatistics().getLastViewed().toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        statisticsToViewNext \u003d source.getStatistics().getToViewNext().toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        statisticsCurrentIncrement \u003d source.getStatistics().getCurrentIncrement().toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @throws IllegalValueException"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public Statistics toModelTypeHelper() throws IllegalValueException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            if (statisticsLastViewed \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_STATISTICS_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                        \"lastViewed\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            if (statisticsToViewNext \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_STATISTICS_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                        \"toViewNext\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            if (statisticsCurrentIncrement \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                throw new IllegalValueException((String.format(MISSING_STATISTICS_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                        \"currentIncrement\")));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return new Statistics(LocalDate.parse(statisticsLastViewed), LocalDate.parse(statisticsToViewNext),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                    ScheduleIncrement.getScheduleIncrementFromString(statisticsCurrentIncrement));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } catch (StringToScheduleIncrementConversionException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new IllegalValueException(e.getMessage());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new IllegalValueException(Statistics.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Converts this Jackson-friendly adapted flashcard object into the model\u0027s {@code Flashcard} object."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted flashcard."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public Flashcard toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        final List\u003cTag\u003e flashcardTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            flashcardTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (question \u003d\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Question.class.getSimpleName()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (!Question.isValidQuestion(question)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new IllegalValueException(Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        final Question modelQuestion \u003d new Question(question);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (answer \u003d\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Answer.class.getSimpleName()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (!Answer.isValidAnswer(answer)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new IllegalValueException(Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        final Answer modelAnswer \u003d new Answer(answer);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        final Statistics modelStatistics \u003d toModelTypeHelper();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(flashcardTags);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return new Flashcard(modelQuestion, modelAnswer, modelTitle, modelStatistics, modelTags);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 147
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedNote.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Jackson-friendly version of {@link Note}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "class JsonAdaptedNote {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Note\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private final String content;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Constructs a {@code JsonAdaptedNote} with the given person details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public JsonAdaptedNote(@JsonProperty(\"title\") String title, @JsonProperty(\"content\") String content,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Converts a given {@code Note} into this class for Jackson use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public JsonAdaptedNote(Note source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        title \u003d source.getTitle().fullTitle;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        content \u003d source.getContent().fullContent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Converts this Jackson-friendly adapted note object into the model\u0027s {@code Note} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted note."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public Note toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        final List\u003cTag\u003e noteTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            noteTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (content \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Content.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (!Content.isValidContent(content)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new IllegalValueException(Content.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        final Content modelContent \u003d new Content(content);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(noteTags);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return new Note(modelTitle, modelContent, modelTags);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAddressBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.ReadOnlyStudyBuddyPro;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.StudyBuddyPro;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "//Check if unused - Should be able to delete?"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckb055"
        },
        "content": "public class JsonAddressBookStorage implements StudyBuddyProStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public Optional\u003cReadOnlyStudyBuddyPro\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public Optional\u003cReadOnlyStudyBuddyPro\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param flashcardFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param cheatSheetFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param noteFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public Optional\u003cReadOnlyStudyBuddyPro\u003e readAddressBook(Path flashcardFilePath, Path noteFilePath,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                                                           Path cheatSheetFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        requireNonNull(flashcardFilePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        requireNonNull(noteFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        requireNonNull(cheatSheetFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        Optional\u003cJsonSerializableFlashcard\u003e jsonFlashcard \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                flashcardFilePath, JsonSerializableFlashcard.class);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Optional\u003cJsonSerializableNote\u003e jsonNote \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                noteFilePath, JsonSerializableNote.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Optional\u003cJsonSerializableCheatSheet\u003e jsonCheatSheet \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                cheatSheetFilePath, JsonSerializableCheatSheet.class);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (!jsonFlashcard.isPresent() \u0026\u0026 !jsonNote.isPresent() \u0026\u0026 !jsonCheatSheet.isPresent()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        StudyBuddyPro studyBuddyPro \u003d new StudyBuddyPro();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            Optional.of(jsonFlashcard.get().toModelType(studyBuddyPro));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            Optional.of(jsonNote.get().toModelType(studyBuddyPro));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            Optional.of(jsonCheatSheet.get().toModelType(studyBuddyPro));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            return Optional.of(studyBuddyPro);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            //Todo refactor code and create proper logger message"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            //logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void saveAddressBook(ReadOnlyStudyBuddyPro addressBook) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyStudyBuddyPro)}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void saveAddressBook(ReadOnlyStudyBuddyPro addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyStudyBuddyPro)}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param flashcardFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param noteFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param cheatSheetFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void saveAddressBook(ReadOnlyStudyBuddyPro addressBook, Path flashcardFilePath,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                                Path noteFilePath, Path cheatSheetFilePath) throws IOException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        requireNonNull(flashcardFilePath);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        requireNonNull(noteFilePath);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        requireNonNull(cheatSheetFilePath);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        FileUtil.createIfMissing(flashcardFilePath);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        FileUtil.createIfMissing(noteFilePath);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        FileUtil.createIfMissing(cheatSheetFilePath);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableFlashcard(addressBook), flashcardFilePath);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableNote(addressBook), noteFilePath);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableFlashcard(addressBook), cheatSheetFilePath);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d flashcard tools"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public Path getFlashcardFilePath() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return this.filePath;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d note tools"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public Path getNoteFilePath() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return this.filePath;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d cheatsheet tools"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public Path getCheatSheetFilePath() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return this.filePath;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 25,
      "Sahilgat": 48,
      "-": 73,
      "Sam-limyr": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.ReadOnlyStudyBuddyPro;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.StudyBuddyPro;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyStudyBuddyPro source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public StudyBuddyPro toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        StudyBuddyPro studyBuddyPro \u003d new StudyBuddyPro();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            if (studyBuddyPro.hasPerson(person)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            studyBuddyPro.addPerson(person);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return studyBuddyPro;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 9,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableCheatSheet.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckb055"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.ReadOnlyStudyBuddyPro;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.StudyBuddyPro;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * An Immutable CheatSheet that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckb055"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "@JsonRootName(value \u003d \"cheatsheet\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "class JsonSerializableCheatSheet {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CHEATSHEET \u003d \"Cheatsheet list contains duplicate cheatsheet(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private final List\u003cJsonAdaptedCheatSheet\u003e cheatSheets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructs a {@code JsonSerializableCheatSheet} with the given cheatsheets."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public JsonSerializableCheatSheet(@JsonProperty(\"cheatSheets\") List\u003cJsonAdaptedCheatSheet\u003e cheatSheets) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        this.cheatSheets.addAll(cheatSheets);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Converts a given {@code ReadOnlyCheatSheet} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableCheatSheet}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public JsonSerializableCheatSheet(ReadOnlyStudyBuddyPro source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        cheatSheets.addAll(source.getCheatSheetList().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                .map(JsonAdaptedCheatSheet::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Converts this flashcard book into the model\u0027s {@code CheatSheet} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * @param studyBuddyPro the addressBook flashcards should be written to"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public StudyBuddyPro toModelType(StudyBuddyPro studyBuddyPro) throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        for (JsonAdaptedCheatSheet jsonAdaptedCheatSheet : cheatSheets) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            CheatSheet cheatSheet \u003d jsonAdaptedCheatSheet.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            if (studyBuddyPro.hasCheatSheet(cheatSheet)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_CHEATSHEET);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            studyBuddyPro.addCheatSheet(cheatSheet);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return studyBuddyPro;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ckb055"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 53,
      "Sahilgat": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableFlashcard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.ReadOnlyStudyBuddyPro;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.StudyBuddyPro;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * An Immutable Flashcards class that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "@JsonRootName(value \u003d \"flashcards\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "class JsonSerializableFlashcard {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FLASHCARD \u003d \"Flashcard list contains duplicate flashcard(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private final List\u003cJsonAdaptedFlashcard\u003e flashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructs a {@code JsonSerializableFlashcard} with the given flashcards."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public JsonSerializableFlashcard(@JsonProperty(\"flashcards\") List\u003cJsonAdaptedFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.flashcards.addAll(flashcards);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Converts a given {@code ReadOnlyFlashcardBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableFlashcard}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public JsonSerializableFlashcard(ReadOnlyStudyBuddyPro source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        flashcards.addAll(source.getFlashcardList().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                .map(JsonAdaptedFlashcard::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Converts this flashcard book into the model\u0027s {@code Flashcard} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * @param studyBuddyPro the addressBook flashcards should be written to"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public StudyBuddyPro toModelType(StudyBuddyPro studyBuddyPro) throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        for (JsonAdaptedFlashcard jsonAdaptedFlashcard : flashcards) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            Flashcard flashcard \u003d jsonAdaptedFlashcard.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            if (studyBuddyPro.hasFlashcard(flashcard)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            studyBuddyPro.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return studyBuddyPro;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 8,
      "Sahilgat": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableNote.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.ReadOnlyStudyBuddyPro;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.StudyBuddyPro;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * An Immutable Notes class that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "@JsonRootName(value \u003d \"notes\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "class JsonSerializableNote {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_NOTE \u003d \"Note list contains duplicate note(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private final List\u003cJsonAdaptedNote\u003e notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Constructs a {@code JsonSerializableNote} with the given notes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public JsonSerializableNote(@JsonProperty(\"notes\") List\u003cJsonAdaptedNote\u003e notes) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.notes.addAll(notes);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Converts a given {@code ReadOnlyNoteBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableNote}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public JsonSerializableNote(ReadOnlyStudyBuddyPro source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        notes.addAll(source.getNoteList().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                .map(JsonAdaptedNote::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Converts this note book into the model\u0027s {@code Note} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * @param studyBuddyPro the addressBook notes should be written to"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public StudyBuddyPro toModelType(StudyBuddyPro studyBuddyPro) throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        for (JsonAdaptedNote jsonAdaptedNote : notes) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            Note note \u003d jsonAdaptedNote.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            if (studyBuddyPro.hasNote(note)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_NOTE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            studyBuddyPro.addNote(note);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return studyBuddyPro;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 8,
      "Sam-limyr": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonStudyBuddyStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.ReadOnlyStudyBuddyPro;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.StudyBuddyPro;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckb055"
        },
        "content": "public class JsonStudyBuddyStorage implements StudyBuddyProStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonStudyBuddyStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private Path cheatSheetFilePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private Path flashcardFilePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private Path noteFilePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * New constructor to now take in 3 filepaths, one for each mode"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param flashcardFilePath"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param noteFilePath"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param cheatSheetFilePath"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public JsonStudyBuddyStorage(Path flashcardFilePath, Path noteFilePath, Path cheatSheetFilePath) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.cheatSheetFilePath \u003d cheatSheetFilePath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.flashcardFilePath \u003d flashcardFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.noteFilePath \u003d noteFilePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public Path getCheatSheetFilePath() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return cheatSheetFilePath;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public Path getFlashcardFilePath() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return flashcardFilePath;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public Path getNoteFilePath() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return noteFilePath;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public Optional\u003cReadOnlyStudyBuddyPro\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return readAddressBook(flashcardFilePath, noteFilePath, cheatSheetFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param flashcardFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param noteFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param cheatSheetFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public Optional\u003cReadOnlyStudyBuddyPro\u003e readAddressBook(Path flashcardFilePath, Path noteFilePath,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                                                           Path cheatSheetFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        requireNonNull(flashcardFilePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        requireNonNull(noteFilePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        requireNonNull(cheatSheetFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        Optional\u003cJsonSerializableFlashcard\u003e jsonFlashcard \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                flashcardFilePath, JsonSerializableFlashcard.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Optional\u003cJsonSerializableNote\u003e jsonNote \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                noteFilePath, JsonSerializableNote.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        Optional\u003cJsonSerializableCheatSheet\u003e jsonCheatSheet \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                cheatSheetFilePath, JsonSerializableCheatSheet.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (!jsonFlashcard.isPresent() \u0026\u0026 !jsonNote.isPresent() \u0026\u0026 !jsonCheatSheet.isPresent()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        StudyBuddyPro studyBuddyPro \u003d new StudyBuddyPro();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            Optional.of(jsonFlashcard.get().toModelType(studyBuddyPro));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            Optional.of(jsonNote.get().toModelType(studyBuddyPro));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            Optional.of(jsonCheatSheet.get().toModelType(studyBuddyPro));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            return Optional.of(studyBuddyPro);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            //Todo refactor code and create proper logger message"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            //logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void saveAddressBook(ReadOnlyStudyBuddyPro addressBook) throws IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        saveAddressBook(addressBook, flashcardFilePath, noteFilePath, cheatSheetFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyStudyBuddyPro)}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param flashcardFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param noteFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param cheatSheetFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void saveAddressBook(ReadOnlyStudyBuddyPro addressBook, Path flashcardFilePath,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                                Path noteFilePath, Path cheatSheetFilePath) throws IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        requireNonNull(flashcardFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        requireNonNull(noteFilePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        requireNonNull(cheatSheetFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        FileUtil.createIfMissing(flashcardFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        FileUtil.createIfMissing(noteFilePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        FileUtil.createIfMissing(cheatSheetFilePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableFlashcard(addressBook), flashcardFilePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableNote(addressBook), noteFilePath);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableCheatSheet(addressBook), cheatSheetFilePath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 22,
      "Sahilgat": 53,
      "-": 41,
      "Sam-limyr": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.ReadOnlyStudyBuddyPro;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckb055"
        },
        "content": "public interface Storage extends StudyBuddyProStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Path getCheatSheetFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Path getFlashcardFilePath();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Path getNoteFilePath();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Optional\u003cReadOnlyStudyBuddyPro\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    void saveAddressBook(ReadOnlyStudyBuddyPro addressBook) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 5,
      "Sahilgat": 4,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.ReadOnlyStudyBuddyPro;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private StudyBuddyProStorage studyBuddyProStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public StorageManager(StudyBuddyProStorage studyBuddyProStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        this.studyBuddyProStorage \u003d studyBuddyProStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public Optional\u003cReadOnlyStudyBuddyPro\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return readAddressBook(studyBuddyProStorage.getFlashcardFilePath(), studyBuddyProStorage.getNoteFilePath(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                studyBuddyProStorage.getCheatSheetFilePath());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public Optional\u003cReadOnlyStudyBuddyPro\u003e readAddressBook(Path flashcardFilePath, Path noteFilePath,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                                                           Path cheatsheetFilePath)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        logger.fine(\"Attempting to read data from files: \" + flashcardFilePath"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                + \", \" + noteFilePath + \", \" + cheatsheetFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return studyBuddyProStorage.readAddressBook(flashcardFilePath, noteFilePath, cheatsheetFilePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void saveAddressBook(ReadOnlyStudyBuddyPro addressBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        saveAddressBook(addressBook, studyBuddyProStorage.getFlashcardFilePath(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                getNoteFilePath(), getCheatSheetFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void saveAddressBook(ReadOnlyStudyBuddyPro addressBook, Path flashcardFilePath, Path noteFilePath,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                                Path cheatsheetFilePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        logger.fine(\"Attempting to write to data files: \" + flashcardFilePath"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                + \", \" + noteFilePath + \", \" + cheatsheetFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        studyBuddyProStorage.saveAddressBook(addressBook, flashcardFilePath, noteFilePath, cheatsheetFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CheatSheet methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public Path getCheatSheetFilePath() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return studyBuddyProStorage.getCheatSheetFilePath();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Flashcard methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public Path getFlashcardFilePath() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return studyBuddyProStorage.getFlashcardFilePath();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Note methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public Path getNoteFilePath() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return studyBuddyProStorage.getNoteFilePath();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 21,
      "Sahilgat": 12,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StudyBuddyProStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.ReadOnlyStudyBuddyPro;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.StudyBuddyPro;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckb055"
        },
        "content": " * Represents a storage for {@link StudyBuddyPro}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckb055"
        },
        "content": "public interface StudyBuddyProStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    // TO RENAME THE INTERFACE NAME"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Path getCheatSheetFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Path getFlashcardFilePath();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    Path getNoteFilePath();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyStudyBuddyPro}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Optional\u003cReadOnlyStudyBuddyPro\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    Optional\u003cReadOnlyStudyBuddyPro\u003e readAddressBook(Path flashcardFilePath, Path noteFilePath,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                                                    Path cheatsheetFilePath)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Saves the given {@link ReadOnlyStudyBuddyPro} to the storage."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    void saveAddressBook(ReadOnlyStudyBuddyPro addressBook) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyStudyBuddyPro)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    void saveAddressBook(ReadOnlyStudyBuddyPro addressBook, Path flashcardFilePath, Path noteFilePath,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                         Path cheatsheetFilePath) throws IOException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ckb055": 16,
      "Sahilgat": 4,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ActivityWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.logic.FunctionMode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " * The UI Component responsible for displaying the windows of different features as tabs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class ActivityWindow extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private static final String FXML \u003d \"ActivityWindow.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private static final int FLASHCARD_TAB_INDEX \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private static final int NOTES_TAB_INDEX \u003d 2;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private static final int CHEATSHEET_TAB_INDEX \u003d 3;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private TabPane activityWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private BorderPane flashcardTabWindow;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private BorderPane cheatsheetTabWindow;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private BorderPane notesTabWindow;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private FlashcardTabWindowController flashcardTabWindowController;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private CheatsheetTabWindowController cheatsheetTabWindowController;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private NotesTabWindowController notesTabWindowController;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public ActivityWindow() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Switches the view of the activity window."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @param targetMode Function mode that user wants to switch to"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public void switchWindowTo(FunctionMode targetMode) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        switch (targetMode) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        case FLASHCARD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            activityWindow.getSelectionModel().select(FLASHCARD_TAB_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        case NOTE:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            activityWindow.getSelectionModel().select(NOTES_TAB_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        case CHEATSHEET:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            activityWindow.getSelectionModel().select(CHEATSHEET_TAB_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            assert false : \"Invalid target mode\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public void displayFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        flashcardTabWindowController.loadFlashcard(flashcard);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public void showAnswer() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        flashcardTabWindowController.showFlashcardAns();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public void startTimeTrial(Optional\u003cArrayList\u003cFlashcard\u003e\u003e deck) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        flashcardTabWindowController.startTimeTrial(deck);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void displayNote(Note note) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        notesTabWindowController.loadNote(note);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void displayCheatSheet(CheatSheet cheatSheet) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        cheatsheetTabWindowController.loadCheatSheet(cheatSheet);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void switchCheatSheetContent(int index) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        cheatsheetTabWindowController.showSpecificTagContents(index);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void displayEmptyCheatSheet() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        cheatsheetTabWindowController.loadEmpty();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 75,
      "jaesimin": 11,
      "Sam-limyr": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CheatSheetCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckb055"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckb055"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckb055"
        },
        "content": " * Represents a CheatSheetCard for JavaFX, similar to PersonCard"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckb055"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": "public class CheatSheetCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private static final String FXML \u003d \"CheatSheetListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public final CheatSheet cheatSheet;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public CheatSheetCard(CheatSheet cheatSheet, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        this.cheatSheet \u003d cheatSheet;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        name.setText(cheatSheet.getTitle().fullTitle);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        cheatSheet.getTags().stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        if (!(other instanceof CheatSheetCard)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        // state check TODO"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        CheatSheetCard card \u003d (CheatSheetCard) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return id.getText().equals(card.id.getText());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ckb055"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 69,
      "jaesimin": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CheatSheetListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckb055"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckb055"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckb055"
        },
        "content": " * Similar to PersonListPanel for JavaFX"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckb055"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": "public class CheatSheetListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private static final String FXML \u003d \"CheatSheetListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CheatSheetListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private ListView\u003cCheatSheet\u003e cheatSheetListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public CheatSheetListPanel(ObservableList\u003cCheatSheet\u003e cheatSheetList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        cheatSheetListView.setItems(cheatSheetList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        cheatSheetListView.setCellFactory(listView -\u003e new CheatSheetListPanel.CheatSheetListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    class CheatSheetListViewCell extends ListCell\u003cCheatSheet\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        protected void updateItem(CheatSheet cheatSheet, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            super.updateItem(cheatSheet, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            if (empty || cheatSheet \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                setGraphic(new CheatSheetCard(cheatSheet, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckb055"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CheatsheetTabWindowController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.cheatsheet.Content;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " * Controller class that handles what happens within the Cheatsheet Tab within the Activity Window."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class CheatsheetTabWindowController {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private static Optional\u003cCheatSheet\u003e currCheatSheet;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private TextArea cheatsheetArea;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private ListView\u003cString\u003e tagArea;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static Optional\u003cCheatSheet\u003e getCurrCheatSheet() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return currCheatSheet;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static void setCurrCheatSheet(CheatSheet cs) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        currCheatSheet \u003d Optional.of(cs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Displays empty body of the cheatsheet"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void loadEmpty() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        currCheatSheet \u003d Optional.empty();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        cheatsheetArea.setText(\"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        tagArea.setItems(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Displays the question of the cheatsheet specified in the cheatsheet tab window."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @param cheatSheet cheatsheet to be displayed"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void loadCheatSheet(CheatSheet cheatSheet) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        currCheatSheet \u003d Optional.of(cheatSheet);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        StringBuilder toDisplay \u003d new StringBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        for (Content c: cheatSheet.getSortedContents()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            toDisplay.append(c.toString())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                    .append(\"\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        cheatsheetArea.setText(toDisplay.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Set\u003cTag\u003e tags \u003d cheatSheet.getTags();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        ObservableList\u003cString\u003e items \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        items.add(\"List of tags:\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        items.add(\"All Tags\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        for (Tag t: tags) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            items.add(counter + \". \" + t.getTagName());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        tagArea.setItems(items);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        highlightTabs(1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Displays only the contents for a specific tag"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * @param tagIndex the tag index shown on the GUI"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void showSpecificTagContents(int tagIndex) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        int targetIndex \u003d tagIndex + 1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        highlightTabs(targetIndex);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        String tagName \u003d tagArea.getItems().get(targetIndex);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Tag targetTag \u003d new Tag(tagName.substring(3));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        StringBuilder toDisplay \u003d new StringBuilder();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        for (Content c: currCheatSheet.get().getContents()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            if (c.getTags().contains(targetTag)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                toDisplay.append(c.toString())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                        .append(\"\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        cheatsheetArea.setText(toDisplay.toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private void highlightTabs(int index) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        tagArea.getSelectionModel().select(index);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chanjunren": 7,
      "jaesimin": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.exceptions.UnknownCommandResultTypeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } catch (CommandException | ParseException | UnknownCommandResultTypeException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                UnknownCommandResultTypeException;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 4,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FlashcardTabWindowController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.animation.KeyFrame;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.animation.KeyValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.animation.Timeline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.beans.property.IntegerProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " * Controller class that handles what happens within the Flashcard Tab within the Activity Window."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class FlashcardTabWindowController {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private static final Integer TIMER_DURATION \u003d 5;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private static final Integer SHOW_ANSWER_DURATION \u003d 3;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private static final Integer ONE_FLASHCARD_DURATION \u003d TIMER_DURATION + SHOW_ANSWER_DURATION;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private static Optional\u003cFlashcard\u003e currFlashcard;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private static boolean isAnswerShown;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private Label timerLabel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private StackPane rightPane;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private TextArea qnsTextArea;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private TextArea ansTextArea;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private IntegerProperty currentSeconds;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private Timeline timeline;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        currentSeconds \u003d new SimpleIntegerProperty(TIMER_DURATION);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        timerLabel.textProperty().bind(currentSeconds.asString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        timerLabel.setVisible(false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        currFlashcard \u003d Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Displays the question of the flashcard specified in the flashcard tab window."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @param flashcard flashcard to be displayed"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private void loadTimetrialFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        flashcard.updateStatistics();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        qnsTextArea.setText(flashcard.getQuestion().toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        ansTextArea.setText(flashcard.getAnswer().toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        ansTextArea.setVisible(false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        timerLabel.setVisible(true);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        startTimer();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Displays the question of the flashcard specified in the flashcard tab window."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @param flashcard flashcard to be displayed"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public void loadFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        qnsTextArea.setText(flashcard.getQuestion().toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        ansTextArea.setText(flashcard.getAnswer().toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        ansTextArea.setVisible(false);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        currFlashcard \u003d Optional.of(flashcard);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        isAnswerShown \u003d false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Flashes the answer of the flashcard upon the show command."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public void showFlashcardAns() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        currFlashcard.get().updateStatistics();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        ansTextArea.setVisible(true);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        timerLabel.setVisible(false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        isAnswerShown \u003d true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Hides the timer and flashes the answer of the flashcard."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private void showTimetrialFlashcardAns() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        ansTextArea.setVisible(true);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        timerLabel.setVisible(false);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        isAnswerShown \u003d true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Starts the timer countdown."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private void startTimer() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        // Adapted from https://asgteach.com/2011/10/javafx-animation-and-binding-simple-countdown-timer-2/"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        if (timeline !\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            timeline.stop();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        currentSeconds.set(TIMER_DURATION);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        timeline \u003d new Timeline(new KeyFrame(Duration.seconds(TIMER_DURATION + 1),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                new KeyValue(currentSeconds, 0)),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                new KeyFrame(Duration.seconds(TIMER_DURATION), e -\u003e showTimetrialFlashcardAns()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        timeline.play();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Starts the time trial based with the deck passed."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @param deck deck of flashcards to be tested"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public void startTimeTrial(Optional\u003cArrayList\u003cFlashcard\u003e\u003e deck) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        resetTexts();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        currFlashcard \u003d Optional.empty();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        Timeline timeline \u003d new Timeline();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        int cardCount \u003d 0;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        for (Flashcard fc: deck.get()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            timeline.getKeyFrames().addAll("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                new KeyFrame(Duration.seconds(cardCount * ONE_FLASHCARD_DURATION), e -\u003e loadTimetrialFlashcard(fc),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                new KeyValue(currentSeconds, 0)),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                new KeyFrame(Duration.seconds(cardCount * ONE_FLASHCARD_DURATION + TIMER_DURATION),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                    e -\u003e showTimetrialFlashcardAns()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            cardCount++;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        timeline.getKeyFrames().add(new KeyFrame(Duration.seconds(cardCount * ONE_FLASHCARD_DURATION),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            e -\u003e resetTexts()));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        timeline.play();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Empties the qnsTextArea and ansTextArea."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private void resetTexts() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        qnsTextArea.setText(\"\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        ansTextArea.setText(\"\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public static Optional\u003cFlashcard\u003e getCurrFlashcard() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return currFlashcard;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public static boolean isAnswerShown() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return isAnswerShown;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 152,
      "Sahilgat": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String USERGUIDE_URL \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            \"https://github.com/AY1920S1-CS2103T-W13-3/main/blob/master/docs/UserGuide.adoc\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    //\"https://se-education.org/addressbook-level3/UserGuide.html\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 3,
      "-": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_WELCOME_STUDYBUDDYPRO;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.animation.FadeTransition;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.logic.FunctionMode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.commandresults.CheatSheetCommandResult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.commandresults.FlashcardCommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.commandresults.GlobalCommandResult;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.commandresults.NoteCommandResult;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.exceptions.UnknownCommandResultTypeException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private static final String FXML \u003d \"MainWindowCopy.fxml\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private ActivityWindow activityWindow;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private StackPane activityWindowPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private StackPane noteCardListPanelPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private ImageView notesHighlightCircle;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private ImageView fcHighlightCircle;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private ImageView csHighlightCircle;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private ImageView currentHighlightedCircle;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        activityWindow \u003d new ActivityWindow();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    //To adjust this method to show relative path when switching between modes"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        activityWindow \u003d new ActivityWindow();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        activityWindowPlaceholder.getChildren().add(activityWindow.getRoot());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        resultDisplay.setFeedbackToUser(MESSAGE_WELCOME_STUDYBUDDYPRO);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getStudyBuddyProFilePath());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            UnknownCommandResultTypeException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            if (commandResult.isGlobalCommandResult()) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                executeGlobalCommandHelper((GlobalCommandResult) commandResult);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            } else if (commandResult.isFlashcardCommandResult()) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                executeFlashcardCommandHelper((FlashcardCommandResult) commandResult);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            } else if (commandResult.isCheatSheetCommandResult()) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                executeCheatSheetCommandHelper((CheatSheetCommandResult) commandResult);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            } else if (commandResult.isNoteCommandResult()) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                executeNoteCommandHelper((NoteCommandResult) commandResult);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                throw new UnknownCommandResultTypeException(\"Invalid CommandResult type!\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } catch (CommandException | ParseException | UnknownCommandResultTypeException e) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param globalCommandResult"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private void executeGlobalCommandHelper(GlobalCommandResult globalCommandResult) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (globalCommandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            handleHelp();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (globalCommandResult.isExit()) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            handleExit();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (globalCommandResult.isToggle()) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            toggleModeTo(globalCommandResult.getTargetMode().get());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param flashcardCommandResult"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private void executeFlashcardCommandHelper(FlashcardCommandResult flashcardCommandResult) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        if (flashcardCommandResult.isTimeTrial()) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            activityWindow.startTimeTrial(flashcardCommandResult.getDeck());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        } else if (flashcardCommandResult.getFlashcard().isPresent()) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            activityWindow.displayFlashcard(flashcardCommandResult.getFlashcard().get());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        } else if (flashcardCommandResult.isShowAns()) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            activityWindow.showAnswer();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param cheatSheetCommandResult"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private void executeCheatSheetCommandHelper(CheatSheetCommandResult cheatSheetCommandResult) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (cheatSheetCommandResult.getCheatSheet().isPresent()) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            activityWindow.displayCheatSheet(cheatSheetCommandResult.getCheatSheet().get());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        } else if (cheatSheetCommandResult.isSwitchTags()) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            activityWindow.switchCheatSheetContent(cheatSheetCommandResult.getTagIndex().get());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            activityWindow.displayEmptyCheatSheet();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param noteCommandResult"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private void executeNoteCommandHelper(NoteCommandResult noteCommandResult) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (noteCommandResult.getNote().isPresent()) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            activityWindow.displayNote(noteCommandResult.getNote().get());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Switches the list of available commands based on the function that the user wants to use."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @param targetMode Function mode that user wants to switch to"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private void toggleModeTo (FunctionMode targetMode) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        deselectCircle(currentHighlightedCircle);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        switch (targetMode) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        case FLASHCARD:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            currentHighlightedCircle \u003d fcHighlightCircle;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        case CHEATSHEET:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            currentHighlightedCircle \u003d csHighlightCircle;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        case NOTE:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            currentHighlightedCircle \u003d notesHighlightCircle;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        activityWindow.switchWindowTo(targetMode);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        highlightCircle(currentHighlightedCircle);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private void deselectCircle(ImageView targetCircle) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        FadeTransition ft \u003d new FadeTransition(Duration.millis(400), targetCircle);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        ft.setToValue(0);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        ft.play();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private void highlightCircle(ImageView targetCircle) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        FadeTransition ft \u003d new FadeTransition(Duration.millis(400), targetCircle);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        ft.setToValue(1);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        ft.play();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 67,
      "ckb055": 3,
      "jaesimin": 7,
      "Sahilgat": 51,
      "-": 186,
      "Sam-limyr": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/NoteCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * An UI component that displays information of a {@code Note}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class NoteCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private static final String FXML \u003d \"NoteListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * As a consequence, UI elements\u0027 variable titles cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public final Note note;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private Label content;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public NoteCard(Note note, int displayedIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        title.setText(note.getTitle().fullTitle);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        content.setText(note.getContent().fullContent);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        /*note.getTags().stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagTitle))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagTitle)));*/"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (!(other instanceof NoteCard)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        NoteCard card \u003d (NoteCard) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                \u0026\u0026 note.equals(card.note);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/NoteCardListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Panel containing the list of notes."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class NoteCardListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private static final String FXML \u003d \"NoteListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(NoteCardListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private ListView\u003cNote\u003e noteListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public NoteCardListPanel(ObservableList\u003cNote\u003e noteList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        noteListView.setItems(noteList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        noteListView.setCellFactory(listView -\u003e new NoteListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Note} using a {@code NoteCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    class NoteListViewCell extends ListCell\u003cNote\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        protected void updateItem(Note note, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            super.updateItem(note, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            if (empty || note \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                setGraphic(new NoteCard(note, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/NotesTabWindowController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " * Controller class that handles what happens within the Notes Tab within the Activity Window."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class NotesTabWindowController {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private TextArea titleTextArea;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private TextArea contentTextArea;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Displays the question of the note specified in the note tab window."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @param note note to be displayed"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void loadNote(Note note) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        titleTextArea.setText(\"Title:\\n\" + note.getTitle().toString() + \"\\n\\nTags:\\n\" + note.getTags().toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        contentTextArea.setText(\"Content:\\n\\n\" + note.getContent().toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 19,
      "Sam-limyr": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/appIcon.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 1,
      "-": 84
    }
  },
  {
    "path": "src/main/resources/view/ActivityWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003cStackPane stylesheets\u003d\"@DarkTheme.css\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "       \u003cTabPane fx:id\u003d\"activityWindow\" tabClosingPolicy\u003d\"UNAVAILABLE\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "           \u003ctabs\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "               \u003cTab text\u003d\"EmptyTab\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                   \u003ccontent\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                       \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                   \u003c/content\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "               \u003c/Tab\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "               \u003cTab text\u003d\"FlashcardTab\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                    \u003cfx:include fx:id\u003d\"flashcardTabWindow\" source\u003d\"FlashcardTabWindow.fxml\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "               \u003c/Tab\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "               \u003cTab text\u003d\"NotesTab\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                   \u003cfx:include fx:id\u003d\"notesTabWindow\" source\u003d\"NotesTabWindow.fxml\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "               \u003c/Tab\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "               \u003cTab text\u003d\"CheatsheetTab\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                   \u003cfx:include fx:id\u003d\"cheatsheetTabWindow\" source\u003d\"CheatsheetTabWindow.fxml\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "               \u003c/Tab\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "           \u003c/tabs\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "       \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 29
    }
  },
  {
    "path": "src/main/resources/view/CheatSheetListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ckb055": 34
    }
  },
  {
    "path": "src/main/resources/view/CheatSheetListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    \u003cListView fx:id\u003d\"cheatSheetListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ckb055": 8
    }
  },
  {
    "path": "src/main/resources/view/CheatsheetTabWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003cBorderPane fx:id\u003d\"cheatsheetTabWindow\" styleClass\u003d\"background\" stylesheets\u003d\"@DarkTheme.css\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"seedu.address.ui.CheatsheetTabWindowController\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "   \u003ccenter\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "      \u003cSplitPane dividerPositions\u003d\"0.2\" maxWidth\u003d\"0.2\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        \u003citems\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "          \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                  \u003cListView fx:id\u003d\"tagArea\" fixedCellSize\u003d\"0.0\" minWidth\u003d\"0.0\" mouseTransparent\u003d\"true\" styleClass\u003d\"result-display\" stylesheets\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "          \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                  \u003cTextArea fx:id\u003d\"cheatsheetArea\" editable\u003d\"false\" styleClass\u003d\"result-display\" stylesheets\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        \u003c/items\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "      \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "   \u003c/center\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 4,
      "jaesimin": 22
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "#timerLabel {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    -fx-font-size: 70px;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "#qnsTextArea .content {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     -fx-border-color: #383838;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\t -fx-background-radius: 0;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\t -fx-text-fill: white;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "#ansTextArea .content {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     -fx-border-color: #383838;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\t -fx-background-radius: 0;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\t -fx-text-fill: white;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "#titleTextArea .content {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     -fx-border-color: #383838;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\t -fx-background-radius: 0;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\t -fx-text-fill: white;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "#contentTextArea .content {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     -fx-border-color: #383838;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\t -fx-background-radius: 0;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\t -fx-text-fill: white;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "#cheatsheetArea .content {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    -fx-border-color: #383838;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "#tagArea .content {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    -fx-border-color: #383838;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".list-view .list-cell {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    -fx-background-color: #383838;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".list-view .list-cell:selected {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    -fx-background-color: #ffea00;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    -fx-tab-max-height: 0 ;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    visibility: hidden ;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chanjunren": 30,
      "jaesimin": 25,
      "-": 351,
      "Sam-limyr": 15
    }
  },
  {
    "path": "src/main/resources/view/FlashcardTabWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003cBorderPane fx:id\u003d\"flashcardTabWindow\" styleClass\u003d\"background\" stylesheets\u003d\"@DarkTheme.css\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"seedu.address.ui.FlashcardTabWindowController\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "   \u003ccenter\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "      \u003cHBox style\u003d\"-fx-border-color: #383838;\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            \u003cTextArea fx:id\u003d\"qnsTextArea\" editable\u003d\"false\" nodeOrientation\u003d\"LEFT_TO_RIGHT\" styleClass\u003d\"result-display\" stylesheets\u003d\"@DarkTheme.css\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "               \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                  \u003cInsets /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "               \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                  \u003cInsets /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            \u003c/TextArea\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            \u003cSeparator fx:id\u003d\"flashcardSeparator\" orientation\u003d\"VERTICAL\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            \u003cStackPane fx:id\u003d\"rightPane\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                  \u003cTextArea fx:id\u003d\"ansTextArea\" editable\u003d\"false\" styleClass\u003d\"result-display\" stylesheets\u003d\"@DarkTheme.css\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                  \u003cLabel fx:id\u003d\"timerLabel\" stylesheets\u003d\"@DarkTheme.css\" text\u003d\"500\" textFill\u003d\"RED\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                        \u003cFont size\u003d\"47.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                     \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "   \u003c/center\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 37
    }
  },
  {
    "path": "src/main/resources/view/MainWindowCopy.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003cfx:root minHeight\u003d\"800.0\" minWidth\u003d\"800.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"StudyBuddy Pro\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    \u003cImage url\u003d\"@/images/appIcon.png\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            \u003cGridPane alignment\u003d\"CENTER\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "              \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "              \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "              \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                \u003cRowConstraints vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                \u003cRowConstraints vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "              \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                  \u003cVBox GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" style\u003d\"-fx-border-color: #383838;\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                      \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                      \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                           \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                              \u003cInsets left\u003d\"20.0\" right\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                           \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" style\u003d\"-fx-border-color: #8C6262; -fx-border-radius: 5px; -fx-border-width: 3px; -fx-background-radius: 5px;\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                           \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                              \u003cInsets /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                           \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                           \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                              \u003cInsets left\u003d\"20.0\" right\u003d\"20.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                           \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" left\u003d\"30.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                     \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                     \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                  \u003cImageView fitHeight\u003d\"150.0\" fitWidth\u003d\"150.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                     \u003cimage\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                        \u003cImage url\u003d\"@../images/appIcon.png\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                     \u003c/image\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                     \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                        \u003cInsets left\u003d\"20.0\" top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                     \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                  \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                  \u003cVBox fx:id\u003d\"functionIconsPlaceholder\" alignment\u003d\"CENTER\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                        \u003cStackPane\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                              \u003cImageView fx:id\u003d\"fcHighlightCircle\" fitHeight\u003d\"120.0\" fitWidth\u003d\"120.0\" opacity\u003d\"0.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                                 \u003cimage\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                                    \u003cImage url\u003d\"@../images/selectCircle.png\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                                 \u003c/image\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                              \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                              \u003cImageView fitHeight\u003d\"85.0\" fitWidth\u003d\"85.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                                 \u003cimage\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                                    \u003cImage url\u003d\"@../images/flashcardIcon.png\" /\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                                 \u003c/image\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                              \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                        \u003cStackPane prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                              \u003cImageView fx:id\u003d\"notesHighlightCircle\" fitHeight\u003d\"120.0\" fitWidth\u003d\"120.0\" opacity\u003d\"0.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                                 \u003cimage\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                                    \u003cImage url\u003d\"@../images/selectCircle.png\" /\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                                 \u003c/image\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                              \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                              \u003cImageView fitHeight\u003d\"85.0\" fitWidth\u003d\"85.0\" nodeOrientation\u003d\"INHERIT\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" StackPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                                 \u003cimage\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                                    \u003cImage url\u003d\"@../images/notesIcon.png\" /\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                                 \u003c/image\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                              \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                        \u003cStackPane\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                              \u003cImageView fx:id\u003d\"csHighlightCircle\" fitHeight\u003d\"120.0\" fitWidth\u003d\"120.0\" opacity\u003d\"0.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                                 \u003cimage\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                                    \u003cImage url\u003d\"@../images/selectCircle.png\" /\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                                 \u003c/image\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                              \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                              \u003cImageView fitHeight\u003d\"85.0\" fitWidth\u003d\"85.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                                 \u003cimage\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                                    \u003cImage url\u003d\"@../images/cheatsheetIcon.png\" /\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                                 \u003c/image\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                              \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" left\u003d\"25.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"activityWindowPlaceholder\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                      \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" left\u003d\"50.0\" right\u003d\"25.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                     \u003c/GridPane.margin\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                  \u003cInsets /\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        \u003cVBox fx:id\u003d\"personList\" maxHeight\u003d\"50.0\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" maxHeight\u003d\"50.0\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 153
    }
  },
  {
    "path": "src/main/resources/view/NotesTabWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003cBorderPane fx:id\u003d\"notesTabWindow\" styleClass\u003d\"background\" stylesheets\u003d\"@DarkTheme.css\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"seedu.address.ui.NotesTabWindowController\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "   \u003ccenter\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "      \u003cSplitPane dividerPositions\u003d\"0.3, 0.5\" stylesheets\u003d\"@DarkTheme.css\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        \u003citems\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "          \u003cAnchorPane styleClass\u003d\"split-pane\" stylesheets\u003d\"@DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                  \u003cTextArea fx:id\u003d\"titleTextArea\" editable\u003d\"false\" prefHeight\u003d\"290.0\" prefWidth\u003d\"320.0\" styleClass\u003d\"result-display\" stylesheets\u003d\"@DarkTheme.css\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            \u003cSeparator orientation\u003d\"VERTICAL\" stylesheets\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "          \u003cAnchorPane styleClass\u003d\"split-pane\" stylesheets\u003d\"@DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                  \u003cTextArea fx:id\u003d\"contentTextArea\" editable\u003d\"false\" styleClass\u003d\"result-display\" stylesheets\u003d\"@DarkTheme.css\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        \u003c/items\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "      \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "   \u003c/center\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 4,
      "Sam-limyr": 23
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 8,
      "Sam-limyr": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/appIcon.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "//import seedu.address.logic.commands.person.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import seedu.address.logic.commands.global.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//public class LogicManagerTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    @TempDir"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    public Path temporaryFolder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    private Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        // Execute add command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//     * Executes the command and confirms that"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//            String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//     * Executes the command and confirms that"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//            super(filePath);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 161,
      "Sam-limyr": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.commands.cheatsheet.EditCheatSheetCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.person.EditCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.StudyBuddyPro;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.cheatsheet.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.model.flashcard.FlashcardTitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.ScheduleIncrement;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.Statistics;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.model.note.NoteTitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.testutil.EditCheatSheetDescriptorBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String SPACE \u003d \" \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final Statistics DUE_STATISTICS \u003d new Statistics(LocalDate.now().minusDays(1),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            LocalDate.now(), ScheduleIncrement.FIRST);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final Statistics OVERDUE_STATISICS \u003d new Statistics(LocalDate.of(2010, 6, 12),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            LocalDate.of(2010, 6, 13), ScheduleIncrement.FIRST);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final String VALID_QUESTION_ONE \u003d \"What is the IntelliJ keyboard shortcut to find a class, file or \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            + \"symbol?\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final String VALID_ANSWER_ONE \u003d \"Ctrl + Shift + N\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final String VALID_TITLE_ONE \u003d \"IntelliJ Question 1\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final String VALID_QUESTION_TWO \u003d \"What is the IntelliJ keyboard shortcut to highlight all \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            + \"occurrences of the selected fragment in the current file?\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final String VALID_ANSWER_TWO \u003d \"Ctrl + Shift + F7\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final String VALID_TITLE_TWO \u003d \"IntelliJ Question 2\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final String VALID_TAG_INTELLIJ \u003d \"IntelliJ\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final String VALID_TAG_SHORTCUTS \u003d \"Shortcuts\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String VALID_TAG_CHEATSHEET \u003d \"cheatsheet\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String VALID_TAG_FORMULA \u003d \"formula\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String VALID_TAG_IMPORTANT \u003d \"important\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String VALID_TITLE_MATH \u003d \"maths\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String VALID_TITLE_GEM \u003d \"gem module\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String INVALID_TITLE_DESC \u003d \" \" + PREFIX_TITLE + \"Title\u0026\"; // \u0027\u0026\u0027 not allowed in titles"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String VALID_CONTENT_MATH \u003d \"math\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String VALID_CONTENT_SCIENCE \u003d \"science\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String VALID_CONTENT_CHINESE \u003d \"chinese\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String VALID_CONTENT_ENGLISH \u003d \"english\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String VALID_CONTENT_PE \u003d \"physical education\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String TITLE_DESC_CS1 \u003d \" \" + PREFIX_TITLE + VALID_TITLE_MATH;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String TITLE_DESC_CS2 \u003d \" \" + PREFIX_TITLE + VALID_TITLE_GEM;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String TAG_DESC_CHEATSHEET \u003d \" \" + PREFIX_TAG + VALID_TAG_CHEATSHEET;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String TAG_DESC_IMPORTANT \u003d \" \" + PREFIX_TAG + VALID_TAG_IMPORTANT;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public static final String VALID_TAG_MODULE \u003d \"cs2100\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public static final String TAG_DESC_MODULE \u003d \" \" + PREFIX_TAG + VALID_TAG_MODULE;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String VALID_TITLE_SAMPLE \u003d \"Sample title\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String VALID_TITLE_PIPELINE \u003d \"Pipelining Definition\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String VALID_CONTENT_SAMPLE \u003d \"Sample Content\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String VALID_CONTENT_PIPELINE \u003d \"Pipelining is the process of making a single processor run \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"multiple instructions simultaneously.\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String VALID_TAG_CS2100 \u003d \"CS2100\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String VALID_TAG_MIDTERMS \u003d \"Midterms\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String VALID_NOTE_TITLE_PIPELINE \u003d SPACE + PREFIX_TITLE + VALID_TITLE_PIPELINE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String VALID_NOTE_CONTENT_PIPELINE \u003d SPACE + PREFIX_CONTENT + VALID_CONTENT_PIPELINE;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String VALID_NOTE_TAG_1_PIPELINE \u003d SPACE + PREFIX_TAG + VALID_TAG_CS2100;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String VALID_NOTE_TAG_2_PIPELINE \u003d SPACE + PREFIX_TAG + VALID_TAG_MIDTERMS;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String INVALID_NOTE_TITLE \u003d \"*\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String INVALID_NOTE_CONTENT \u003d \" \";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String INVALID_NOTE_TAG \u003d \"Two words\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String INVALID_NOTE_TITLE_PIPELINE \u003d SPACE + PREFIX_TITLE + INVALID_NOTE_TITLE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String INVALID_NOTE_CONTENT_PIPELINE \u003d SPACE + PREFIX_CONTENT + INVALID_NOTE_CONTENT;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String INVALID_NOTE_TAG_PIPELINE \u003d SPACE + PREFIX_TAG + INVALID_NOTE_TAG;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String EXPECTED_VIEW_SAMPLE \u003d \"Viewing note: \\n\\tTitle: Sample Title\\n\\tContent: Sample \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"Content\\n\\tTags: [sampletag2][sampletag1]\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String EXPECTED_VIEW_PIPELINE \u003d \"\\nTitle: Pipelining Definition\\nContent: Pipelining is the \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"process of making a single processor run multiple instructions simultaneously.\\nTags: [CS2100] \""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"[Midterms]\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String EXPECTED_LIST_RESULT \u003d \"1. Sample Title - Sample Content\\n2. Pipelining Definition - \""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"Pipelining is the process of making a single processor run multiple instructions simultaneously.\\n3. \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"Potatoes - I really like potatoes.\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final EditCheatSheetCommand.EditCheatSheetDescriptor DESC_CS6;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final EditCheatSheetCommand.EditCheatSheetDescriptor DESC_CS7;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        DESC_CS6 \u003d new EditCheatSheetDescriptorBuilder()"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                .withTitle(VALID_TITLE_MATH).withTags(VALID_TAG_CHEATSHEET).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        DESC_CS7 \u003d new EditCheatSheetDescriptorBuilder()"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                .withTitle(VALID_TITLE_GEM).withTags(VALID_TAG_CHEATSHEET, VALID_TAG_FORMULA).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(CommandTestUtil.class.getName());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            logger.info(\"expectedCommandResult\\n\" + expectedCommandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            logger.info(\"result\\n\" + result.getFeedbackToUser());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        //"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        CommandResult expectedCommandResult; \u003d new GlobalCommandResult(expectedMessage);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        StudyBuddyPro expectedStudyBuddyPro \u003d new StudyBuddyPro(actualModel.getStudyBuddyPro());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertEquals(expectedStudyBuddyPro, actualModel.getStudyBuddyPro());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the cheatsheet at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static void showCheatSheetAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredCheatSheetList().size());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        CheatSheet cheatSheet \u003d model.getFilteredCheatSheetList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        final String[] splitTitle \u003d cheatSheet.getTitle().fullTitle.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        model.updateFilteredCheatSheetList(new TitleContainsKeywordsPredicate(Arrays.asList(splitTitle[0])));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertEquals(1, model.getFilteredCheatSheetList().size());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the note at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public static void showFlashcardAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredFlashcardList().size());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        Flashcard flashcard \u003d model.getFilteredFlashcardList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        final String[] splitTitle \u003d flashcard.getTitle().fullTitle.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        model.updateFilteredFlashcardList(new FlashcardTitleContainsKeywordsPredicate(Arrays.asList(splitTitle[0])));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        assertEquals(1, model.getFilteredFlashcardList().size());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the note at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static void showNoteAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredNoteList().size());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Note note \u003d model.getFilteredNoteList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        final String[] splitTitle \u003d note.getTitle().fullTitle.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        model.updateFilteredNoteList(new NoteTitleContainsKeywordsPredicate(Arrays.asList(splitTitle[0])));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        logger.info(\"Number of Notes: \" + model.getFilteredNoteList().size());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertEquals(1, model.getFilteredNoteList().size());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 20,
      "jaesimin": 46,
      "ckb055": 5,
      "Sahilgat": 23,
      "-": 125,
      "Sam-limyr": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/cheatsheet/AddCheatSheetCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.logic.commands.cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.cheatsheet.AddCheatSheetCommand.MESSAGE_SUCCESSFUL_AUTOGENERATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.flashcard.Answer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.flashcard.Question;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.flashcard.Title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.testutil.CheatSheetBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class AddCheatSheetCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void constructor_nullCheatSheet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCheatSheetCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void execute_cheatSheetAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        ModelManager model \u003d new ModelManager();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        CheatSheet validCheatSheet \u003d new CheatSheetBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        CommandResult commandResult \u003d new AddCheatSheetCommand(validCheatSheet).execute(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                String.format(AddCheatSheetCommand.MESSAGE_SUCCESS, validCheatSheet)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                        + \"\\n\" + 0 + MESSAGE_SUCCESSFUL_AUTOGENERATE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertEquals(Arrays.asList(validCheatSheet).toString(), model.getFilteredCheatSheetList().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void execute_duplicateCheatSheet_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        CheatSheet validCheatSheet \u003d new CheatSheetBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        AddCheatSheetCommand addCheatSheetCommand \u003d new AddCheatSheetCommand(validCheatSheet);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        ModelManager model \u003d new ModelManager();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        model.addCheatSheet(validCheatSheet);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                AddCheatSheetCommand.MESSAGE_DUPLICATE_CHEATSHEET, () -\u003e addCheatSheetCommand.execute(model));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        CheatSheet cs1 \u003d new CheatSheetBuilder().withTitle(\"cs1\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        CheatSheet cs2 \u003d new CheatSheetBuilder().withTitle(\"cs2\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        AddCheatSheetCommand addCs1Command \u003d new AddCheatSheetCommand(cs1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        AddCheatSheetCommand addCs2Command \u003d new AddCheatSheetCommand(cs2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertTrue(addCs1Command.equals(addCs1Command));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        AddCheatSheetCommand addAliceCommandCopy \u003d new AddCheatSheetCommand(cs1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertTrue(addCs1Command.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertFalse(addCs1Command.equals(1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertFalse(addCs1Command.equals(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertFalse(addCs1Command.equals(addCs2Command));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void method_getRelevantContents_returnsTrue() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Set\u003cTag\u003e tagList1 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Set\u003cTag\u003e tagList2 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Set\u003cTag\u003e tagList3 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        tagList1.add(new Tag(\"tag1\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        tagList2.add(new Tag(\"tag2\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        tagList3.add(new Tag(\"tag3\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        tagList3.add(new Tag(\"tag4\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Flashcard flashcard \u003d new Flashcard(new Question(\"question1\"), new Answer(\"answer1\"),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                new Title(\"fctitle1\"), tagList1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Flashcard flashcard1 \u003d new Flashcard(new Question(\"question2\"), new Answer(\"answer2\"),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                new Title(\"fctitle2\"), tagList3);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Note note \u003d new Note(new seedu.address.model.note.Title(\"ntitle1\"),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                new Content(\"content1\"), tagList2);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Note note1 \u003d new Note(new seedu.address.model.note.Title(\"ntitle2\"),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                new Content(\"content2\"), tagList3);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        ModelManager model \u003d new ModelManager();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        model.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        model.addFlashcard(flashcard1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        model.addNote(note);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        model.addNote(note1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        CheatSheet cs \u003d new CheatSheetBuilder().build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        AddCheatSheetCommand addCsCommand \u003d new AddCheatSheetCommand(cs);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Set\u003cseedu.address.model.cheatsheet.Content\u003e content1 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        content1.add(new seedu.address.model.cheatsheet.Content(flashcard.getQuestion().toString(),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                flashcard.getAnswer().toString(), flashcard.getTags()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Set\u003cseedu.address.model.cheatsheet.Content\u003e content2 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        content2.add(new seedu.address.model.cheatsheet.Content("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                note.getContentCleanedFromTags().toString(), note.getTags()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Set\u003cseedu.address.model.cheatsheet.Content\u003e content3 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        content3.add(new seedu.address.model.cheatsheet.Content(flashcard1.getQuestion().toString(),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                flashcard1.getAnswer().toString(), flashcard1.getTags()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        content3.add(new seedu.address.model.cheatsheet.Content("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                note1.getContentCleanedFromTags().toString(), note1.getTags()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // only fc"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertEquals(content1, addCsCommand.getRelevantContents(tagList1, model));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // only note"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertEquals(content2, addCsCommand.getRelevantContents(tagList2, model));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // TO-BE-TESTED: only note fragment"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // both note and fc"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertEquals(content3, addCsCommand.getRelevantContents(tagList3, model));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 141
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/cheatsheet/CheatSheetCommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.logic.commands.cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.commandresults.CheatSheetCommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class CheatSheetCommandResultTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    //To implement"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    //public static final CheatSheetBuilder CheatSheet_BUILDER \u003d new CheatSheetBuilder();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        //CheatSheetCommandResult with variables feedbackToUser: \"feedback\", Optional\u003cCheatSheet\u003e: Optional.empty()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        CheatSheetCommandResult commandResult \u003d new CheatSheetCommandResult(\"feedback\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertTrue(commandResult.equals(new CheatSheetCommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertTrue(commandResult.equals(new CheatSheetCommandResult(\"feedback\", Optional.empty())));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertFalse(commandResult.equals(new CheatSheetCommandResult(\"different\")));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        /* To implement"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // different Optional\u003cCheatSheet\u003e value -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertFalse(commandResult.equals(new CheatSheetCommandResult(\"feedback\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                Optional.of(CheatSheet_BUILDER.build()))));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        //CheatSheetCommandResult with variables feedbackToUser: \"feedback\", Optional\u003cCheatSheet\u003e: Optional.empty()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        CommandResult commandResult \u003d new CheatSheetCommandResult(\"feedback\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CheatSheetCommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CheatSheetCommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        /* To implement"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // different Optional\u003cCheatSheet\u003e value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CheatSheetCommandResult(\"feedback\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                Optional.of(CheatSheet_BUILDER.build())).hashCode());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/cheatsheet/DeleteCheatSheetCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.logic.commands.cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showCheatSheetAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.testutil.TypicalCheatSheets.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CHEATSHEET;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CHEATSHEET;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class DeleteCheatSheetCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCheatSheetList().size() + 1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        DeleteCheatSheetCommand deleteCommand \u003d new DeleteCheatSheetCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_CHEATSHEET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        showCheatSheetAtIndex(model, INDEX_FIRST_CHEATSHEET);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_CHEATSHEET;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of studybuddy book list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getStudyBuddyPro().getCheatSheetList().size());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        DeleteCheatSheetCommand deleteCommand \u003d new DeleteCheatSheetCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_CHEATSHEET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        DeleteCheatSheetCommand deleteFirstCommand \u003d new DeleteCheatSheetCommand(INDEX_FIRST_CHEATSHEET);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        DeleteCheatSheetCommand deleteSecondCommand \u003d new DeleteCheatSheetCommand(INDEX_SECOND_CHEATSHEET);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        DeleteCheatSheetCommand deleteFirstCommandCopy \u003d new DeleteCheatSheetCommand(INDEX_FIRST_CHEATSHEET);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no cheatsheet."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private void showNoCheatSheet(Model model) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        model.updateFilteredCheatSheetList(p -\u003e false);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertTrue(model.getFilteredCheatSheetList().isEmpty());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 4,
      "ckb055": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/cheatsheet/EditCheatSheetCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.logic.commands.cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CS6;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CS7;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT_CHINESE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT_ENGLISH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT_MATH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CHEATSHEET;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FORMULA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_IMPORTANT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_GEM;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_MATH;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showCheatSheetAtIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.testutil.TypicalCheatSheets.getTypicalAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CHEATSHEET;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CHEATSHEET;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.commands.cheatsheet.EditCheatSheetCommand.EditCheatSheetDescriptor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.commands.global.ClearCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.cheatsheet.Content;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.testutil.CheatSheetBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.testutil.EditCheatSheetDescriptorBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class EditCheatSheetCommandTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void execute_duplicateCheatSheetUnfilteredList_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        CheatSheet firstCheatSheet \u003d model.getFilteredCheatSheetList().get(INDEX_FIRST_CHEATSHEET.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        EditCheatSheetDescriptor descriptor \u003d new EditCheatSheetDescriptorBuilder(firstCheatSheet).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        EditCheatSheetCommand editCommand \u003d new EditCheatSheetCommand(INDEX_SECOND_CHEATSHEET, descriptor);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCheatSheetCommand.MESSAGE_DUPLICATE_CHEATSHEET);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void execute_duplicateCheatSheetFilteredList_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        showCheatSheetAtIndex(model, INDEX_FIRST_CHEATSHEET);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        CheatSheet csInList \u003d model.getStudyBuddyPro().getCheatSheetList()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                .get(INDEX_SECOND_CHEATSHEET.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        EditCheatSheetCommand editCommand \u003d new EditCheatSheetCommand(INDEX_FIRST_CHEATSHEET,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                new EditCheatSheetDescriptorBuilder(csInList).build());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCheatSheetCommand.MESSAGE_DUPLICATE_CHEATSHEET);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void execute_invalidCheatSheetIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCheatSheetList().size() + 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        EditCheatSheetDescriptor descriptor \u003d new EditCheatSheetDescriptorBuilder()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                .withTitle(VALID_TITLE_GEM).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        EditCheatSheetCommand editCommand \u003d new EditCheatSheetCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_CHEATSHEET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void execute_invalidCheatSheetIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        showCheatSheetAtIndex(model, INDEX_FIRST_CHEATSHEET);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_CHEATSHEET;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getStudyBuddyPro().getCheatSheetList().size());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        EditCheatSheetCommand editCommand \u003d new EditCheatSheetCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                new EditCheatSheetDescriptorBuilder().withTitle(VALID_TITLE_GEM).build());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_CHEATSHEET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        final EditCheatSheetCommand standardCommand \u003d new EditCheatSheetCommand(INDEX_FIRST_CHEATSHEET, DESC_CS6);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        EditCheatSheetDescriptor copyDescriptor \u003d new EditCheatSheetDescriptor(DESC_CS6);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        EditCheatSheetCommand commandWithSameValues \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                new EditCheatSheetCommand(INDEX_FIRST_CHEATSHEET, copyDescriptor);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCheatSheetCommand(INDEX_SECOND_CHEATSHEET, DESC_CS6)));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCheatSheetCommand(INDEX_FIRST_CHEATSHEET, DESC_CS7)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void method_updateContents_success() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        CheatSheet testEdit \u003d new CheatSheetBuilder()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                .withTitle(VALID_TITLE_MATH).withTags(VALID_TAG_CHEATSHEET)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                .withContents(VALID_CONTENT_ENGLISH, VALID_CONTENT_CHINESE, VALID_CONTENT_MATH).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        ArrayList\u003cInteger\u003e testRemove \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        testRemove.add(1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Set\u003cContent\u003e contentList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // remove 1 content"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        contentList.add(testEdit.getContent(2));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        contentList.add(testEdit.getContent(3));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertEquals(contentList, EditCheatSheetCommand.updateContents(testEdit, testRemove));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // remove all content"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        testRemove.add(2);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        testRemove.add(3);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        contentList.clear();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertEquals(contentList, EditCheatSheetCommand.updateContents(testEdit, testRemove));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void method_updateTags_success() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        CheatSheet testEdit \u003d new CheatSheetBuilder()"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                .withTitle(VALID_TITLE_MATH).withTags(VALID_TAG_CHEATSHEET, VALID_TAG_FORMULA, VALID_TAG_IMPORTANT)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                .withContents(VALID_CONTENT_ENGLISH, VALID_CONTENT_CHINESE, VALID_CONTENT_MATH).build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Set\u003cTag\u003e testRemove \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        testRemove.add(new Tag(VALID_TAG_CHEATSHEET));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        tagList.add(new Tag(VALID_TAG_FORMULA));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        tagList.add(new Tag(VALID_TAG_IMPORTANT));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // remove 1 tag"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertEquals(tagList, EditCheatSheetCommand.updateTags(testEdit, testRemove));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // remove all tags"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        testRemove.add(new Tag(VALID_TAG_FORMULA));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        testRemove.add(new Tag(VALID_TAG_IMPORTANT));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        tagList.clear();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertEquals(tagList, EditCheatSheetCommand.updateTags(testEdit, testRemove));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    //TO-BE-TESTED: removeIrrelevantContents()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 167,
      "ckb055": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/cheatsheet/FilterCheatSheetByTagCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.logic.commands.cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.testutil.TypicalCheatSheets.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.cheatsheet.CheatSheetContainsTagPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class FilterCheatSheetByTagCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Set\u003cTag\u003e firstUserInput \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        firstUserInput.add(new Tag(\"first\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Set\u003cTag\u003e secondUserInput \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        secondUserInput.add(new Tag(\"second\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        ArrayList\u003cString\u003e firstUserDisplay \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        firstUserDisplay.add(\"first\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        ArrayList\u003cString\u003e secondUserDisplay \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        firstUserDisplay.add(\"second\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        CheatSheetContainsTagPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                new CheatSheetContainsTagPredicate(firstUserInput);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        CheatSheetContainsTagPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                new CheatSheetContainsTagPredicate(secondUserInput);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        FilterCheatSheetByTagCommand findFirstCommand \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                new FilterCheatSheetByTagCommand(firstPredicate, firstUserDisplay);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        FilterCheatSheetByTagCommand findSecondCommand \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                new FilterCheatSheetByTagCommand(secondPredicate, secondUserDisplay);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        FilterCheatSheetByTagCommand findFirstCommandCopy \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                new FilterCheatSheetByTagCommand(firstPredicate, firstUserDisplay);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 4,
      "ckb055": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/cheatsheet/ViewCheatSheetCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.logic.commands.cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class ViewCheatSheetCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/cheatsheet/ViewSpecificCheatSheetTagCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.logic.commands.cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CHEATSHEET;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_IMPORTANT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.testutil.CheatSheetBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.ui.CheatsheetTabWindowController;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class ViewSpecificCheatSheetTagCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void constructor_nullIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ViewSpecificCheatSheetTagCommand(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void execute_cheatSheetAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        ModelManager model \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Index validIndex \u003d new Index(1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        CheatsheetTabWindowController.setCurrCheatSheet("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                new CheatSheetBuilder().withTags(VALID_TAG_CHEATSHEET, VALID_TAG_IMPORTANT).build());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        CommandResult commandResult \u003d new ViewSpecificCheatSheetTagCommand(validIndex).execute(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                String.format(ViewSpecificCheatSheetTagCommand.VIEW_TAG_CONTENT_SUCCESS, validIndex.getOneBased()),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Index validIndex1 \u003d new Index(1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Index validIndex2 \u003d new Index(2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        ViewSpecificCheatSheetTagCommand viewCommand1 \u003d new ViewSpecificCheatSheetTagCommand(validIndex1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        ViewSpecificCheatSheetTagCommand viewCommand2 \u003d new ViewSpecificCheatSheetTagCommand(validIndex2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertTrue(viewCommand1.equals(viewCommand1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        ViewSpecificCheatSheetTagCommand copy \u003d new ViewSpecificCheatSheetTagCommand(validIndex1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertTrue(viewCommand1.equals(copy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertFalse(viewCommand1.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertFalse(viewCommand1.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertFalse(viewCommand1.equals(viewCommand2));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/commandresults/FlashcardCommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.logic.commands.commandresults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class FlashcardCommandResultTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final FlashcardBuilder FLASHCARD_BUILDER \u003d new FlashcardBuilder();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        //FlashcardCommandResult with variables feedbackToUser: \"feedback\", Optional\u003cFlashcard\u003e: Optional.empty()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        FlashcardCommandResult commandResult \u003d new FlashcardCommandResult(\"feedback\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertTrue(commandResult.equals(new FlashcardCommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertTrue(commandResult.equals(new FlashcardCommandResult(\"feedback\", Optional.empty())));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertFalse(commandResult.equals(new FlashcardCommandResult(\"different\")));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // different Optional\u003cFlashcard\u003e value -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertFalse(commandResult.equals(new FlashcardCommandResult(\"feedback\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                Optional.of(FLASHCARD_BUILDER.build()))));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        //FlashcardCommandResult with variables feedbackToUser: \"feedback\", Optional\u003cFlashcard\u003e: Optional.empty()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        CommandResult commandResult \u003d new FlashcardCommandResult(\"feedback\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertEquals(commandResult.hashCode(), new FlashcardCommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new FlashcardCommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // different Optional\u003cFlashcard\u003e value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new FlashcardCommandResult(\"feedback\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                Optional.of(FLASHCARD_BUILDER.build())).hashCode());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/commandresults/GlobalCommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.logic.commands.commandresults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.FunctionMode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class GlobalCommandResultTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        //GlobalCommandResult with variables feedbackToUser: \"feedback\", showHelp: False, exit; False, toggle: False,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        //Optional\u003ctargetMode\u003e: Optional.empty()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        GlobalCommandResult commandResult \u003d new GlobalCommandResult(\"feedback\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertTrue(commandResult.equals(new GlobalCommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertTrue(commandResult.equals(new GlobalCommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertFalse(commandResult.equals(new GlobalCommandResult(\"different\")));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertFalse(commandResult.equals(new GlobalCommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertFalse(commandResult.equals(new GlobalCommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // different toggle value -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertFalse(commandResult.equals((new GlobalCommandResult(\"feedback\", false,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                false, true, Optional.empty()))));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        //different targetMode values -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertFalse(commandResult.equals((new GlobalCommandResult(\"feedback\", false,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                false, false, Optional.of(FunctionMode.CHEATSHEET)))));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        //GlobalCommandResult with variables feedbackToUser: \"feedback\", showHelp: False, exit; False, toggle: False,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        //Optional\u003ctargetMode\u003e: Optional.empty()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        CommandResult commandResult \u003d new GlobalCommandResult(\"feedback\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertEquals(commandResult.hashCode(), new GlobalCommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new GlobalCommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new GlobalCommandResult(\"feedback\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                true, false).hashCode());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new GlobalCommandResult(\"feedback\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                false, true).hashCode());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // different toggle value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new GlobalCommandResult(\"feedback\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                false, false, true, Optional.empty()).hashCode());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // different targetMode value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new GlobalCommandResult(\"feedback\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                false, false, false, Optional.of(FunctionMode.CHEATSHEET)).hashCode());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/commandresults/NoteCommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.logic.commands.commandresults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.testutil.NoteBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class NoteCommandResultTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final NoteBuilder NOTE_BUILDER \u003d new NoteBuilder();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        //NoteCommandResult with variables feedbackToUser: \"feedback\", Optional\u003cNote\u003e: Optional.empty()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        NoteCommandResult commandResult \u003d new NoteCommandResult(\"feedback\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertTrue(commandResult.equals(new NoteCommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertTrue(commandResult.equals(new NoteCommandResult(\"feedback\", Optional.empty())));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertFalse(commandResult.equals(new NoteCommandResult(\"different\")));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // different Optional\u003cNote\u003e value -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertFalse(commandResult.equals(new NoteCommandResult(\"feedback\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                Optional.of(NOTE_BUILDER.build()))));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        //NoteCommandResult with variables feedbackToUser: \"feedback\", Optional\u003cNote\u003e: Optional.empty()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        CommandResult commandResult \u003d new NoteCommandResult(\"feedback\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertEquals(commandResult.hashCode(), new NoteCommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new NoteCommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // different Optional\u003cNote\u003e value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new NoteCommandResult(\"feedback\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                Optional.of(NOTE_BUILDER.build())).hashCode());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/flashcard/AddFlashcardCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.logic.commands.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.FunctionMode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.ReadOnlyStudyBuddyPro;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.StudyBuddyCounter;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.StudyBuddyItem;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.StudyBuddyPro;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class AddFlashcardCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void constructor_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddFlashcardCommand(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void execute_flashcardAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        ModelStubAcceptingFlashcardAdded modelStub \u003d new ModelStubAcceptingFlashcardAdded();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        Flashcard validFlashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        CommandResult commandResult \u003d new AddFlashcardCommand(validFlashcard).execute(modelStub);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertEquals(String.format(AddFlashcardCommand.MESSAGE_SUCCESS, validFlashcard),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertEquals(Arrays.asList(validFlashcard), modelStub.flashcardsAdded);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void execute_duplicateFlashcard_throwsCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        Flashcard validFlashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        AddFlashcardCommand addCommand \u003d new AddFlashcardCommand(validFlashcard);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithFlashcard(validFlashcard);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertThrows(CommandException.class, AddFlashcardCommand.MESSAGE_DUPLICATE_FLASHCARD, () -\u003e addCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                .execute(modelStub));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        Flashcard maths \u003d new FlashcardBuilder().withTitle(\"Math Question 1\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        Flashcard cs \u003d new FlashcardBuilder().withTitle(\"CS Question 1\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        AddFlashcardCommand addMathsCommand \u003d new AddFlashcardCommand(maths);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        AddFlashcardCommand addCsCommand \u003d new AddFlashcardCommand(cs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertTrue(addMathsCommand.equals(addMathsCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        AddFlashcardCommand addMathsCommandCopy \u003d new AddFlashcardCommand(maths);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertTrue(addMathsCommand.equals(addMathsCommandCopy));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertFalse(addMathsCommand.equals(1));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertFalse(addMathsCommand.equals(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertFalse(addMathsCommand.equals(addCsCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        public Path getStudyBuddyProFilePath() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        public void setStudyBuddyProFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public void addNote(Note note) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public void setStudyBuddyPro(ReadOnlyStudyBuddyPro newData) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public ReadOnlyStudyBuddyPro getStudyBuddyPro() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public ObservableList\u003cTag\u003e getFilteredTagList() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public void updateFilteredTagList(Predicate\u003cTag\u003e predicate) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dTagging stuff\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public ArrayList\u003cString\u003e collectTaggedItems(Predicate\u003cStudyBuddyItem\u003e predicate) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public ArrayList\u003cString\u003e collectTaggedCheatSheets(Predicate\u003cCheatSheet\u003e predicate) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public ArrayList\u003cString\u003e collectTaggedFlashcards(Predicate\u003cFlashcard\u003e predicate) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public ArrayList\u003cFlashcard\u003e getTaggedFlashcards(Predicate\u003cFlashcard\u003e predicate) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public ArrayList\u003cString\u003e collectTaggedNotes(Predicate\u003cNote\u003e predicate) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dPerson stuff\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public ArrayList\u003cStudyBuddyCounter\u003e getStatistics(ArrayList\u003cTag\u003e tagList) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dPerson stuff\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dFlashcard stuff\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public void addFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public ObservableList\u003cFlashcard\u003e getFilteredFlashcardList() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public void updateFilteredFlashcardList(Predicate\u003cFlashcard\u003e predicate) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public String formatOutputListString(FunctionMode mode) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public \u003cT\u003e String formatList(FilteredList\u003cT\u003e object) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public void deleteFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dNote stuff\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public boolean hasNote(Note note) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public void deleteNote(Note target) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public void setNote(Note target, Note editedNote) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public ObservableList\u003cNote\u003e getFilteredNoteList() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public void updateFilteredNoteList(Predicate\u003cNote\u003e predicate) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dCheatSheet stuff\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public boolean hasCheatSheet(CheatSheet cheatSheet) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public void setCheatSheet(CheatSheet target, CheatSheet editedCheatSheet) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public void addCheatSheet(CheatSheet cheatSheet) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public ObservableList\u003cCheatSheet\u003e getFilteredCheatSheetList() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public void updateFilteredCheatSheetList(Predicate\u003cCheatSheet\u003e predicate) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public void deleteCheatSheet(CheatSheet cheatSheet) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public ArrayList\u003cString\u003e getListOfTags() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * A Model stub that contains a single flashcard."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private class ModelStubWithFlashcard extends ModelStub {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        private final Flashcard flashcard;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        ModelStubWithFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            this.flashcard \u003d flashcard;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return this.flashcard.isSameFlashcard(flashcard);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * A Model stub that always accept the flashcard being added."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private class ModelStubAcceptingFlashcardAdded extends ModelStub {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        final ArrayList\u003cFlashcard\u003e flashcardsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return flashcardsAdded.stream().anyMatch(flashcard::isSameFlashcard);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public void addFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            flashcardsAdded.add(flashcard);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public ReadOnlyStudyBuddyPro getStudyBuddyPro() {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return new StudyBuddyPro();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 2,
      "Sahilgat": 350
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/flashcard/DeleteFlashcardCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.logic.commands.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "//import static seedu.address.commons.core.Messages.DELETE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_ARE_YOU_SURE_WANT_TO_DELETE_FLASHCARD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_HIT_ENTER_TO_DELETE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showFlashcardAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "//import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "//import seedu.address.logic.commands.commandresults.FlashcardCommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "//import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "//import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * {@code DeleteFlashcardCommand}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class DeleteFlashcardCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        Flashcard flashcardToDelete \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        DeleteFlashcardCommand deleteCommand \u003d new DeleteFlashcardCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteFlashcardCommand.MESSAGE_DELETE_FLASHCARD_SUCCESS,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                flashcardToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        CommandResult expectedCommandResult \u003d new FlashcardCommandResult(expectedMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getStudyBuddyPro(), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        expectedModel.deleteFlashcard(flashcardToDelete);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            CommandResult result \u003d deleteCommand.execute(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            assertEquals(e, new CommandException(MESSAGE_ARE_YOU_SURE_WANT_TO_DELETE_FLASHCARD"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                    + \"\\n\" + flashcardToDelete"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                    + \"\\n\" + MESSAGE_HIT_ENTER_TO_DELETE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        //assertCommandSuccess(deleteCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFlashcardList().size() + 1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        DeleteFlashcardCommand deleteFlashcardCommand \u003d new DeleteFlashcardCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        assertCommandFailure(deleteFlashcardCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        Flashcard flashcardToDelete \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        DeleteFlashcardCommand deleteFlashcardCommand \u003d new DeleteFlashcardCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteFlashcardCommand.MESSAGE_DELETE_FLASHCARD_SUCCESS,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        flashcardToDelete);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        CommandResult expectedCommandResult \u003d new FlashcardCommandResult(expectedMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getStudyBuddyPro(), new UserPrefs());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        expectedModel.deleteFlashcard(flashcardToDelete);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        showNoFlashcard(expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertCommandSuccess(deleteFlashcardCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getStudyBuddyPro().getFlashcardList().size());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        DeleteFlashcardCommand deleteFlashcardCommand \u003d new DeleteFlashcardCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertCommandFailure(deleteFlashcardCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        DeleteFlashcardCommand deleteFirstCommand \u003d new DeleteFlashcardCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        DeleteFlashcardCommand deleteSecondCommand \u003d new DeleteFlashcardCommand(INDEX_SECOND_FLASHCARD);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        DeleteFlashcardCommand deleteFirstCommandCopy \u003d new DeleteFlashcardCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private void showNoFlashcard(Model model) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        model.updateFilteredFlashcardList(f -\u003e false);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        assertTrue(model.getFilteredFlashcardList().isEmpty());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 87,
      "Sahilgat": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/flashcard/RemindFlashcardCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.logic.commands.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DUE_STATISTICS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OVERDUE_STATISICS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_ONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_TWO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_ONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_TWO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_ONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_TWO;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "//import seedu.address.model.flashcard.Question;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class RemindFlashcardCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private Flashcard overdueFlashcard \u003d new FlashcardBuilder().withQuestion(VALID_QUESTION_ONE)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            .withAnswer(VALID_ANSWER_ONE)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            .withTitle(VALID_TITLE_ONE)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            .withStatistics(OVERDUE_STATISICS).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private Flashcard dueFlashcard \u003d new FlashcardBuilder().withQuestion(VALID_QUESTION_TWO)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            .withAnswer(VALID_ANSWER_TWO)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            .withTitle(VALID_TITLE_TWO)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            .withStatistics(DUE_STATISTICS).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/flashcard/ShowFlashcardAnswerCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "package seedu.address.logic.commands.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class ShowFlashcardAnswerCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/flashcard/StartTimeTrialCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "package seedu.address.logic.commands.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class StartTimeTrialCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/flashcard/ViewFlashcardCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "package seedu.address.logic.commands.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class ViewFlashcardCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/global/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.logic.commands.global;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.commandresults.GlobalCommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.StudyBuddyPro;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        GlobalCommandResult expectedCommandResult \u003d new GlobalCommandResult("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                ClearCommand.MESSAGE_SUCCESS + \"the entire StudyBuddy book!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertCommandSuccess(new ClearCommand(true), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        expectedModel.setStudyBuddyPro(new StudyBuddyPro());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        GlobalCommandResult expectedCommandResult \u003d new GlobalCommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                ClearCommand.MESSAGE_SUCCESS + \"the entire StudyBuddy book!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertCommandSuccess(new ClearCommand(true), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 7,
      "ckb055": 2,
      "Sahilgat": 2,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/global/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.logic.commands.global;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.logic.commands.global.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.commandresults.GlobalCommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        CommandResult expectedCommandResult \u003d new GlobalCommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                false, true);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 6,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/global/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.logic.commands.global;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.logic.commands.global.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.commandresults.GlobalCommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        CommandResult expectedCommandResult \u003d new GlobalCommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 5,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/global/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.logic.commands.global;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getStudyBuddyPro(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 7,
      "ckb055": 1,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/global/SwitchModeCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.logic.commands.global;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for SwitchModeCommand."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class SwitchModeCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        // To be implemented."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 21,
      "Sahilgat": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/note/AddNoteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.logic.commands.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.FunctionMode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.ReadOnlyStudyBuddyPro;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.StudyBuddyCounter;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.StudyBuddyItem;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.StudyBuddyPro;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.testutil.NoteBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class AddNoteCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void constructor_nullNote_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddNoteCommand(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void execute_noteWithNoNoteFragments_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        ModelStubAcceptingNoteAdded modelStub \u003d new ModelStubAcceptingNoteAdded();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Note validNote \u003d new NoteBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        CommandResult commandResult \u003d new AddNoteCommand(validNote).execute(modelStub);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertEquals(String.format(AddNoteCommand.MESSAGE_SUCCESS, validNote.toStringWithNoteFragments()),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertEquals(Arrays.asList(validNote), modelStub.notesAdded);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void execute_noteWithMultipleNoteFragments_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        ModelStubAcceptingNoteAdded modelStub \u003d new ModelStubAcceptingNoteAdded();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Note validNote \u003d new NoteBuilder().withContent(NoteBuilder.EXTRA_CONTENT).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        CommandResult commandResult \u003d new AddNoteCommand(validNote).execute(modelStub);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertEquals(String.format(AddNoteCommand.MESSAGE_SUCCESS, validNote.toStringWithNoteFragments()),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertEquals(Arrays.asList(validNote), modelStub.notesAdded);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void constructor_noteTitleOfOnlyWhiteSpace_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new NoteBuilder().withTitle(\"\").build());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new NoteBuilder().withTitle(\" \").build());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new NoteBuilder().withTitle(\"  \").build());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void constructor_noteContentOfOnlyWhiteSpace_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new NoteBuilder().withContent(\"\").build());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new NoteBuilder().withContent(\" \").build());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new NoteBuilder().withContent(\"  \").build());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void execute_duplicateNote_throwsCommandException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Note validNote \u003d new NoteBuilder().build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        AddNoteCommand addNoteCommand \u003d new AddNoteCommand(validNote);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithNote(validNote);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertThrows(CommandException.class, AddNoteCommand.MESSAGE_DUPLICATE_NOTE, ("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            ) -\u003e addNoteCommand.execute(modelStub));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Note sucks \u003d new NoteBuilder().withTitle(\"Pipelining sucks\").build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Note rocks \u003d new NoteBuilder().withTitle(\"Pipelining rocks\").build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        AddNoteCommand addSucksCommand \u003d new AddNoteCommand(sucks);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        AddNoteCommand addRocksCommand \u003d new AddNoteCommand(rocks);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertTrue(addSucksCommand.equals(addSucksCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        AddNoteCommand addSucksCommandCopy \u003d new AddNoteCommand(sucks);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertTrue(addSucksCommand.equals(addSucksCommandCopy));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertFalse(addSucksCommand.equals(1));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertFalse(addSucksCommand.equals(null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // different note -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertFalse(addSucksCommand.equals(addRocksCommand));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        public Path getStudyBuddyProFilePath() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        public void setStudyBuddyProFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public void addNote(Note note) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        public void setStudyBuddyPro(ReadOnlyStudyBuddyPro newData) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        public ReadOnlyStudyBuddyPro getStudyBuddyPro() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        public ObservableList\u003cTag\u003e getFilteredTagList() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        public void updateFilteredTagList(Predicate\u003cTag\u003e predicate) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public boolean hasNote(Note note) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public void deleteNote(Note target) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public void setNote(Note target, Note editedNote) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public void updateFilteredNoteList(Predicate\u003cNote\u003e predicate) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public ObservableList\u003cNote\u003e getFilteredNoteList() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public void addFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public void deleteFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public void updateFilteredFlashcardList(Predicate\u003cFlashcard\u003e predicate) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        public String formatOutputListString(FunctionMode mode) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        public ArrayList\u003cStudyBuddyCounter\u003e getStatistics(ArrayList\u003cTag\u003e tagList) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        public \u003cT\u003e String formatList(FilteredList\u003cT\u003e object) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public void addCheatSheet(CheatSheet cheatSheet) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public boolean hasCheatSheet(CheatSheet cheatSheet) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public void setCheatSheet(CheatSheet target, CheatSheet editedCheatSheet) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public ObservableList\u003cCheatSheet\u003e getFilteredCheatSheetList() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public void updateFilteredCheatSheetList(Predicate\u003cCheatSheet\u003e predicate) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public void deleteCheatSheet(CheatSheet cheatSheet) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public ObservableList\u003cFlashcard\u003e getFilteredFlashcardList() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        public ArrayList\u003cString\u003e collectTaggedItems(Predicate\u003cStudyBuddyItem\u003e predicate) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        public ArrayList\u003cString\u003e collectTaggedCheatSheets(Predicate\u003cCheatSheet\u003e predicate) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        public ArrayList\u003cString\u003e collectTaggedFlashcards(Predicate\u003cFlashcard\u003e predicate) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        public ArrayList\u003cFlashcard\u003e getTaggedFlashcards(Predicate\u003cFlashcard\u003e predicate) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        public ArrayList\u003cString\u003e collectTaggedNotes(Predicate\u003cNote\u003e predicate) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        public ArrayList\u003cString\u003e getListOfTags() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private class ModelStubWithNote extends ModelStub {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        private final Note note;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        ModelStubWithNote(Note note) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            requireNonNull(note);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            this.note \u003d note;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public boolean hasNote(Note note) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            requireNonNull(note);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            return this.note.isSameNote(note);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * A Model stub that always accepts the note being added."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private class ModelStubAcceptingNoteAdded extends ModelStub {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        final ArrayList\u003cNote\u003e notesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public boolean hasNote(Note note) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            requireNonNull(note);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            return notesAdded.stream().anyMatch(note::isSameNote);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public void addNote(Note note) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            requireNonNull(note);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            notesAdded.add(note);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        public ReadOnlyStudyBuddyPro getStudyBuddyPro() {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            return new StudyBuddyPro();"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chanjunren": 7,
      "jaesimin": 25,
      "ckb055": 38,
      "Sahilgat": 6,
      "Sam-limyr": 301
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/note/DeleteNoteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.logic.commands.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showNoteAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_NOTE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_NOTE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.testutil.TypicalNotes.getTypicalNoteList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * {@code DeleteNoteCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class DeleteNoteCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalNoteList(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    //    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    //        Note noteToDelete \u003d model.getFilteredNoteList().get(INDEX_FIRST_NOTE.getZeroBased());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    //        DeleteNoteCommand deleteNoteCommand \u003d new DeleteNoteCommand(INDEX_FIRST_NOTE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    //"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    //        String expectedMessage \u003d String.format(DeleteNoteCommand.MESSAGE_DELETE_NOTE_SUCCESS, noteToDelete);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    //        NoteCommandResult expectedCommandResult \u003d new NoteCommandResult(expectedMessage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    //"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    //        ModelManager expectedModel \u003d new ModelManager(model.getStudyBuddyPro(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    //        expectedModel.deleteNote(noteToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    //"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    //        assertCommandSuccess(deleteNoteCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredNoteList().size() + 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        DeleteNoteCommand deleteNoteCommand \u003d new DeleteNoteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertCommandFailure(deleteNoteCommand, model, Messages.MESSAGE_INVALID_NOTE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    //    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    //        showNoteAtIndex(model, INDEX_FIRST_NOTE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    //"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    //        Note noteToDelete \u003d model.getFilteredNoteList().get(INDEX_FIRST_NOTE.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    //        DeleteNoteCommand deleteNoteCommand \u003d new DeleteNoteCommand(INDEX_FIRST_NOTE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    //"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    //        String expectedMessage \u003d String.format(DeleteNoteCommand.MESSAGE_DELETE_NOTE_SUCCESS, noteToDelete);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    //        NoteCommandResult expectedCommandResult \u003d new NoteCommandResult(expectedMessage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    //"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    //        Model expectedModel \u003d new ModelManager(model.getStudyBuddyPro(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    //        expectedModel.deleteNote(noteToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    //        showNoNote(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    //"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    //        assertCommandSuccess(deleteNoteCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        showNoteAtIndex(model, INDEX_FIRST_NOTE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_NOTE;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getStudyBuddyPro().getNoteList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        DeleteNoteCommand deleteNoteCommand \u003d new DeleteNoteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertCommandFailure(deleteNoteCommand, model, Messages.MESSAGE_INVALID_NOTE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        DeleteNoteCommand deleteFirstNoteCommand \u003d new DeleteNoteCommand(INDEX_FIRST_NOTE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        DeleteNoteCommand deleteSecondNoteCommand \u003d new DeleteNoteCommand(INDEX_SECOND_NOTE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertTrue(deleteFirstNoteCommand.equals(deleteFirstNoteCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        DeleteNoteCommand deleteFirstNoteCommandCopy \u003d new DeleteNoteCommand(INDEX_FIRST_NOTE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertTrue(deleteFirstNoteCommand.equals(deleteFirstNoteCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertFalse(deleteFirstNoteCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertFalse(deleteFirstNoteCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // different note -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertFalse(deleteFirstNoteCommand.equals(deleteSecondNoteCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private void showNoNote(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        model.updateFilteredNoteList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertTrue(model.getFilteredNoteList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 12,
      "Sahilgat": 1,
      "Sam-limyr": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/note/NoteFeatureUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.commands.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.NoteFragment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class NoteFeatureUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private static final String VALID_TITLE \u003d \"Valid title\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private static final String VALID_CONTENT \u003d \"Valid content\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private static final String INVALID_NOTE_FRAGMENT \u003d \"Invalid note fragment\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private static final String VALID_NOTE_1 \u003d \"Valid /* TAG/test1 TAG/test2 C/note */ fragment\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private static final String VALID_NOTE_1_FRAGMENT_1 \u003d \"TAG/test1 TAG/test2 C/note\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private static final String VALID_NOTE_2 \u003d \"/* C/Valid TAG/test1 */ /* TAG/test2 TAG/test3 \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"C/note */ /* \" + \"TAG/test4 C/fragment */\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private static final String VALID_NOTE_2_FRAGMENT_1 \u003d \"C/Valid TAG/test1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private static final String VALID_NOTE_2_FRAGMENT_2 \u003d \"TAG/test2 TAG/test3 C/note\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private static final String VALID_NOTE_2_FRAGMENT_3 \u003d \"TAG/test4 C/fragment\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void parseNoteFragmentMatches_stringWithOneMatch_returnsListWithOneNoteFragment() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        List\u003cString\u003e expectedList \u003d List.of(VALID_NOTE_1_FRAGMENT_1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertEquals(expectedList, NoteFeatureUtil.parseNoteFragmentMatches(VALID_NOTE_1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void parseNoteFragmentMatches_stringWithMultipleMatches_returnsListWithMultipleStrings()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        List\u003cString\u003e expectedList \u003d List.of(VALID_NOTE_2_FRAGMENT_1, VALID_NOTE_2_FRAGMENT_2, VALID_NOTE_2_FRAGMENT_3);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertEquals(expectedList, NoteFeatureUtil.parseNoteFragmentMatches(VALID_NOTE_2));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void parseNoteFragmentMatches_stringWithNoMatches_returnsEmptyList() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertEquals(Collections.emptyList(), NoteFeatureUtil.parseNoteFragmentMatches(INVALID_NOTE_FRAGMENT));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void parseNoteFragmentsFromString_listWithMultipleStrings_returnsListWithMultipleNoteFragments()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        NoteFragment frag1 \u003d new NoteFragment(new Title(VALID_TITLE),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                ParserUtil.parseContentFromNoteFragment(VALID_NOTE_2_FRAGMENT_1),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                ParserUtil.parseTagsFromNoteFragment(VALID_NOTE_2_FRAGMENT_1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        NoteFragment frag2 \u003d new NoteFragment(new Title(VALID_TITLE),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                ParserUtil.parseContentFromNoteFragment(VALID_NOTE_2_FRAGMENT_2),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                ParserUtil.parseTagsFromNoteFragment(VALID_NOTE_2_FRAGMENT_2));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        NoteFragment frag3 \u003d new NoteFragment(new Title(VALID_TITLE),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                ParserUtil.parseContentFromNoteFragment(VALID_NOTE_2_FRAGMENT_3),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                ParserUtil.parseTagsFromNoteFragment(VALID_NOTE_2_FRAGMENT_3));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        List\u003cNoteFragment\u003e expectedList \u003d List.of(frag1, frag2, frag3);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertEquals(expectedList, ParserUtil.parseNoteFragmentsFromString(new Title(VALID_TITLE),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                List.of(VALID_NOTE_2_FRAGMENT_1, VALID_NOTE_2_FRAGMENT_2, VALID_NOTE_2_FRAGMENT_3)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void parseNoteFragmentsFromString_emptyList_returnsEmptyList() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        List\u003cNoteFragment\u003e expectedList \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertEquals(expectedList, NoteFeatureUtil.parseNoteFragmentsFromString(new Title(VALID_TITLE),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                Collections.emptyList()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void parseNoteFragmentsFromString_listWithInvalidString_throwsParseException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        List\u003cString\u003e actualList \u003d List.of(INVALID_NOTE_FRAGMENT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e NoteFeatureUtil"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                .parseNoteFragmentsFromString(new Title(VALID_TITLE), actualList));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/note/ViewRawNoteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.commands.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXPECTED_VIEW_SAMPLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showNoteAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_NOTE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_NOTE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.testutil.TypicalNotes.getTypicalNoteList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.commandresults.NoteCommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ViewNoteCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class ViewRawNoteCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalNoteList(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalNoteList(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Note noteToView \u003d model.getFilteredNoteList().get(INDEX_FIRST_NOTE.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        ViewNoteCommand viewNoteCommand \u003d new ViewNoteCommand(INDEX_FIRST_NOTE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        String expectedMessage \u003d String.format(EXPECTED_VIEW_SAMPLE, noteToView);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        NoteCommandResult noteCommandResult \u003d new NoteCommandResult(expectedMessage, Optional.of(noteToView));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertCommandSuccess(viewNoteCommand, model, noteCommandResult, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredNoteList().size() + 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        ViewNoteCommand viewNoteCommand \u003d new ViewNoteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertCommandFailure(viewNoteCommand, model, Messages.MESSAGE_INVALID_NOTE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        showNoteAtIndex(model, INDEX_FIRST_NOTE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Note noteToView \u003d model.getFilteredNoteList().get(INDEX_FIRST_NOTE.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        ViewNoteCommand viewNoteCommand \u003d new ViewNoteCommand(INDEX_FIRST_NOTE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        String expectedMessage \u003d String.format(EXPECTED_VIEW_SAMPLE, noteToView);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getStudyBuddyPro(), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        showNoteAtIndex(expectedModel, INDEX_FIRST_NOTE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertCommandSuccess(viewNoteCommand, model, new NoteCommandResult(expectedMessage, Optional.of(noteToView)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        showNoteAtIndex(model, INDEX_FIRST_NOTE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_NOTE;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getStudyBuddyPro().getNoteList().size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        ViewNoteCommand viewNoteCommand \u003d new ViewNoteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertCommandFailure(viewNoteCommand, model, Messages.MESSAGE_INVALID_NOTE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        ViewNoteCommand viewFirstNoteCommand \u003d new ViewNoteCommand(INDEX_FIRST_NOTE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        ViewNoteCommand viewSecondNoteCommand \u003d new ViewNoteCommand(INDEX_SECOND_NOTE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertTrue(viewFirstNoteCommand.equals(viewFirstNoteCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        ViewNoteCommand viewFirstNoteCommandCopy \u003d new ViewNoteCommand(INDEX_FIRST_NOTE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertTrue(viewFirstNoteCommand.equals(viewFirstNoteCommandCopy));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertFalse(viewFirstNoteCommand.equals(1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertFalse(viewFirstNoteCommand.equals(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // different note -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertFalse(viewFirstNoteCommand.equals(viewSecondNoteCommand));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/person/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /* Void test. Kept as reference for format. To change assertCommandSuccess usage to use CommandResult type in third"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    argument."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Person personInList \u003d model.getStudyBuddyPro().getPersonList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 1,
      "ckb055": 1,
      "Sahilgat": 3,
      "-": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/person/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.FunctionMode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.ReadOnlyStudyBuddyPro;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.StudyBuddyCounter;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.StudyBuddyItem;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.StudyBuddyPro;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        public Path getStudyBuddyProFilePath() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        public void setStudyBuddyProFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public void addNote(Note note) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        public void setStudyBuddyPro(ReadOnlyStudyBuddyPro newData) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        public ReadOnlyStudyBuddyPro getStudyBuddyPro() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        public ObservableList\u003cTag\u003e getFilteredTagList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        public void updateFilteredTagList(Predicate\u003cTag\u003e predicate) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dTagging stuff\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        public ArrayList\u003cString\u003e collectTaggedItems(Predicate\u003cStudyBuddyItem\u003e predicate) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        public ArrayList\u003cString\u003e collectTaggedCheatSheets(Predicate\u003cCheatSheet\u003e predicate) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        public ArrayList\u003cString\u003e collectTaggedFlashcards(Predicate\u003cFlashcard\u003e predicate) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        public ArrayList\u003cFlashcard\u003e getTaggedFlashcards(Predicate\u003cFlashcard\u003e predicate) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        public ArrayList\u003cString\u003e collectTaggedNotes(Predicate\u003cNote\u003e predicate) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dPerson stuff\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        public ArrayList\u003cStudyBuddyCounter\u003e getStatistics(ArrayList\u003cTag\u003e tagList) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dFlashcard stuff\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dFlashcard stuff\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        public void addFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        public ObservableList\u003cFlashcard\u003e getFilteredFlashcardList() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        public void updateFilteredFlashcardList(Predicate\u003cFlashcard\u003e predicate) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        public String formatOutputListString(FunctionMode mode) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        public \u003cT\u003e String formatList(FilteredList\u003cT\u003e object) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        public void deleteFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dNote stuff\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        public boolean hasNote(Note note) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        public void deleteNote(Note target) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        public void setNote(Note target, Note editedNote) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        public ObservableList\u003cNote\u003e getFilteredNoteList() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public void updateFilteredNoteList(Predicate\u003cNote\u003e predicate) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dCheatSheet stuff\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        public boolean hasCheatSheet(CheatSheet cheatSheet) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        public void setCheatSheet(CheatSheet target, CheatSheet editedCheatSheet) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        public void addCheatSheet(CheatSheet cheatSheet) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        public ObservableList\u003cCheatSheet\u003e getFilteredCheatSheetList() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        public void updateFilteredCheatSheetList(Predicate\u003cCheatSheet\u003e predicate) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        public void deleteCheatSheet(CheatSheet cheatSheet) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        public ArrayList\u003cString\u003e getListOfTags() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        private final Person note;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        ModelStubWithPerson(Person note) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            requireNonNull(note);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            this.note \u003d note;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public boolean hasPerson(Person note) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            requireNonNull(note);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            return this.note.isSamePerson(note);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * A Model stub that always accept the note being added."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public boolean hasPerson(Person note) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            requireNonNull(note);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            return personsAdded.stream().anyMatch(note::isSamePerson);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public void addPerson(Person note) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            requireNonNull(note);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            personsAdded.add(note);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        public ReadOnlyStudyBuddyPro getStudyBuddyPro() {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            return new StudyBuddyPro();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 13,
      "jaesimin": 57,
      "ckb055": 54,
      "Sahilgat": 25,
      "-": 169,
      "Sam-limyr": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/person/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /* Void test. Kept as reference for format. To change assertCommandSuccess usage to use CommandResult type in third"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    argument."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /* Void test. Kept as reference for format. To change assertCommandSuccess usage to use CommandResult type in third"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    argument."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getStudyBuddyPro().getPersonList().size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 1,
      "ckb055": 1,
      "Sahilgat": 6,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/person/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.commands.global.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.person.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Person personInList \u003d model.getStudyBuddyPro().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getStudyBuddyPro().getPersonList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /* Void test. Kept as reference for format. To change assertCommandSuccess usage to use CommandResult type in third"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    argument."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /* Void test. Kept as reference for format. To change assertCommandSuccess usage to use CommandResult type in third"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    argument."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /* Void test. Kept as reference for format. To change assertCommandSuccess usage to use CommandResult type in third"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    argument."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /* Void test. Kept as reference for format. To change assertCommandSuccess usage to use CommandResult type in third"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    argument."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 2,
      "ckb055": 2,
      "Sahilgat": 12,
      "-": 163,
      "Sam-limyr": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/person/EditPersonDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.person.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 1,
      "-": 56,
      "Sam-limyr": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/person/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /* Void test. Kept as reference for format. To change assertCommandSuccess usage to use CommandResult type in third"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    argument."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /* Void test. Kept as reference for format. To change assertCommandSuccess usage to use CommandResult type in third"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    argument."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 1,
      "Sahilgat": 6,
      "-": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "//import seedu.address.logic.commands.person.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import seedu.address.logic.commands.global.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "//import seedu.address.logic.commands.person.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "//import seedu.address.logic.commands.person.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "//import seedu.address.logic.commands.person.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "//import seedu.address.logic.commands.global.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "//import seedu.address.logic.commands.person.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "//import seedu.address.logic.commands.global.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import seedu.address.logic.commands.global.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//public class AddressBookParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "//    private final StudyBuddyProParser parser \u003d new StudyBuddyProParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "////    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "////    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "////        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "////        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "////        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "////    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "////    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "////    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "////        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "////                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "////        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "////    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    /* To fix"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    //To fix - Because flashcard currently only allows alphanumeric characters in question and answer field"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    public void parseCommand_add_flashcard() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        Flashcard flashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        AddFlashcardCommand command \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//                (AddFlashcardCommand) parser.parseCommand(FlashcardUtil.getAddFlashcardCommand(flashcard));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        assertEquals(new AddFlashcardCommand(flashcard), command);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//          String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    public void parseCommand_deleteFlashcard() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        //        assertTrue(parser.parseCommand(DeleteFlashcardCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        //          instanceof DeleteFlashcardCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    public void parseCommand_switchMode() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//        // To be implemented"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 1,
      "jaesimin": 116,
      "Sahilgat": 2,
      "Sam-limyr": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(CommandParserTestUtil.class.getName());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            logger.info(userInput);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful or has an {@code"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * IllegalArgumentException} and that the error message equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static void assertParseFailureIllegalArgument(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        } catch (IllegalArgumentException | ParseException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "Sam-limyr": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/cheatsheet/AddCheatSheetCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckb055"
        },
        "content": "package seedu.address.logic.parser.cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CHEATSHEET;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_IMPORTANT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_CS1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_CS2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CHEATSHEET;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_IMPORTANT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_GEM;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_MATH;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.testutil.TypicalCheatSheets.CS6;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.testutil.TypicalCheatSheets.CS7;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.commands.cheatsheet.AddCheatSheetCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.cheatsheet.Title;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.testutil.CheatSheetBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckb055"
        },
        "content": "class AddCheatSheetCommandParserTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private AddCheatSheetCommandParser parser \u003d new AddCheatSheetCommandParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        CheatSheet expectedCheatSheet \u003d new CheatSheetBuilder(CS6)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                .withTitle(VALID_TITLE_MATH)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                .withTags(VALID_TAG_CHEATSHEET).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TITLE_DESC_CS1"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                + TAG_DESC_CHEATSHEET, new AddCheatSheetCommand(expectedCheatSheet));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // multiple title - last title accepted"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_CS2 + TITLE_DESC_CS1 + TAG_DESC_CHEATSHEET,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                new AddCheatSheetCommand(expectedCheatSheet));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        CheatSheet expectedCheatSheetMultipleTags \u003d new CheatSheetBuilder(CS7)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                .withTitle(VALID_TITLE_GEM)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                .withTags(VALID_TAG_CHEATSHEET, VALID_TAG_IMPORTANT).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_CS2 + TAG_DESC_CHEATSHEET + TAG_DESC_IMPORTANT,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                new AddCheatSheetCommand(expectedCheatSheetMultipleTags));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        String expectedMessage1 \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                AddCheatSheetCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        String expectedMessage2 \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                AddCheatSheetCommand.MESSAGE_TAG_RESTRICTION);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // missing title prefix"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_MATH + TAG_DESC_CHEATSHEET, expectedMessage1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // missing tag prefix"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_CS1, expectedMessage2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_MATH + VALID_TAG_CHEATSHEET, expectedMessage1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertParseFailure(parser, INVALID_TITLE_DESC + TAG_DESC_CHEATSHEET, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_CS1 + INVALID_TAG_DESC + TAG_DESC_CHEATSHEET,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertParseFailure(parser, INVALID_TITLE_DESC + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + TITLE_DESC_CS1 + TAG_DESC_CHEATSHEET,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCheatSheetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ckb055"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 7,
      "jaesimin": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/cheatsheet/DeleteCheatSheetCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.logic.parser.cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CHEATSHEET;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.commands.cheatsheet.DeleteCheatSheetCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class DeleteCheatSheetCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private DeleteCheatSheetCommandParser parser \u003d new DeleteCheatSheetCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCheatSheetCommand(INDEX_FIRST_CHEATSHEET));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                (MESSAGE_INVALID_COMMAND_FORMAT, DeleteCheatSheetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 4,
      "ckb055": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/cheatsheet/EditCheatSheetCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.logic.parser.cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CHEATSHEET;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_IMPORTANT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_CS1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_CS2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CHEATSHEET;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_IMPORTANT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_GEM;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_MATH;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CHEATSHEET;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CHEATSHEET;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.commands.cheatsheet.EditCheatSheetCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.commands.cheatsheet.EditCheatSheetCommand.EditCheatSheetDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.cheatsheet.Title;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.testutil.EditCheatSheetDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class EditCheatSheetCommandParserTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCheatSheetCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private EditCheatSheetCommandParser parser \u003d new EditCheatSheetCommandParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_MATH, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCheatSheetCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertParseFailure(parser, \"-5\" + TITLE_DESC_CS1, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertParseFailure(parser, \"0\" + TITLE_DESC_CS1, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TITLE_DESC, Title.MESSAGE_CONSTRAINTS); // invalid title"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // valid title followed by invalid title. The test case for invalid title followed by valid title"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertParseFailure(parser, \"1\" + TITLE_DESC_CS1 + INVALID_TITLE_DESC, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TITLE_DESC + INVALID_TAG_DESC, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_CHEATSHEET;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TITLE_DESC_CS1 + TAG_DESC_CHEATSHEET;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        EditCheatSheetDescriptor descriptor \u003d new EditCheatSheetDescriptorBuilder().withTitle(VALID_TITLE_MATH)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                .withTags(VALID_TAG_CHEATSHEET).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        EditCheatSheetCommand expectedCommand \u003d new EditCheatSheetCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CHEATSHEET;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TITLE_DESC_CS2;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        EditCheatSheetDescriptor descriptor \u003d new EditCheatSheetDescriptorBuilder().withTitle(VALID_TITLE_GEM).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        EditCheatSheetCommand expectedCommand \u003d new EditCheatSheetCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CHEATSHEET;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TITLE_DESC_CS1 + TAG_DESC_CHEATSHEET + TITLE_DESC_CS1"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                + TITLE_DESC_CS2 + TAG_DESC_IMPORTANT + TAG_DESC_CHEATSHEET + TITLE_DESC_CS1 + TAG_DESC_CHEATSHEET;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        EditCheatSheetDescriptor descriptor \u003d new EditCheatSheetDescriptorBuilder().withTitle(VALID_TITLE_MATH)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                 .withTags(VALID_TAG_CHEATSHEET, VALID_TAG_IMPORTANT)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        EditCheatSheetCommand expectedCommand \u003d new EditCheatSheetCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CHEATSHEET;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_TITLE_DESC + TITLE_DESC_CS1;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        EditCheatSheetDescriptor descriptor \u003d new EditCheatSheetDescriptorBuilder().withTitle(VALID_TITLE_MATH).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        EditCheatSheetCommand expectedCommand \u003d new EditCheatSheetCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/cheatsheet/FilterCheatSheetByTagCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckb055"
        },
        "content": "package seedu.address.logic.parser.cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.commands.cheatsheet.FilterCheatSheetByTagCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.cheatsheet.CheatSheetContainsTagPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckb055"
        },
        "content": "class FilterCheatSheetByTagCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private FilterCheatSheetByTagCommandParser parser \u003d new FilterCheatSheetByTagCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                FilterCheatSheetByTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void parse_validArgs_returnsFilterCheatSheetByTagCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Tag tagOne \u003d new Tag(\"cs2100\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        tagSet.add(tagOne);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        ArrayList\u003cString\u003e tagList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        tagList.add(\"cs2100\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        FilterCheatSheetByTagCommand expectedFilterCheatSheetByTagCommand \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                new FilterCheatSheetByTagCommand(new CheatSheetContainsTagPredicate(tagSet), tagList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertParseSuccess(parser, TAG_DESC_MODULE, expectedFilterCheatSheetByTagCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertParseSuccess(parser, \" \\n \" + TAG_DESC_MODULE + \" \\n \\t\", expectedFilterCheatSheetByTagCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckb055"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/cheatsheet/ViewCheatSheetCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.logic.parser.cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class ViewCheatSheetCommandParserTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/cheatsheet/ViewSpecificCheatSheetTagCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.logic.parser.cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CHEATSHEET;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.commands.cheatsheet.ViewSpecificCheatSheetTagCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class ViewSpecificCheatSheetTagCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private ViewSpecificCheatSheetTagCommandParser parser \u003d new ViewSpecificCheatSheetTagCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertParseSuccess(parser, \"1\", new ViewSpecificCheatSheetTagCommand(INDEX_FIRST_CHEATSHEET));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewSpecificCheatSheetTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/flashcard/AddFlashcardCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.logic.commands.AddFlashcardCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class AddFlashcardCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private AddFlashcardCommandParser parser \u003d new AddFlashcardCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private final String nonEmptyQuestion \u003d \"What is 1 + 1?\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private final String nonEmptyAnswer \u003d \"2\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void parse_indexSpecified_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // have remark"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_REMARK + nonEmptyRemark;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        AddFlashcardCommand expectedCommand \u003d new AddFlashcardCommand(INDEX_FIRST_PERSON, nonEmptyRemark);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // no remark"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_REMARK;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        expectedCommand \u003d new AddFlashcardCommand(INDEX_FIRST_PERSON, \"\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void parse_missingCompulsoryField_failure() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddFlashcardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // no parameters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertParseFailure(parser, AddFlashcardCommand.COMMAND_WORD, expectedMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // no index"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertParseFailure(parser, AddFlashcardCommand.COMMAND_WORD + \" \" + nonEmptyRemark, expectedMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/flashcard/DeleteFlashcardCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.logic.parser.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class DeleteFlashcardCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "//    private DeleteFlashcardCommandParser parser \u003d new DeleteFlashcardCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "//    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "////        assertParseSuccess(parser, \"1\", new DeleteFlashcardCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "//    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "//        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 22,
      "jaesimin": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/flashcard/FilterFlashcardByTagCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckb055"
        },
        "content": "package seedu.address.logic.parser.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.commands.flashcard.FilterFlashcardByTagCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.flashcard.FlashcardContainsTagPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckb055"
        },
        "content": "class FilterFlashcardByTagCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private FilterFlashcardByTagCommandParser parser \u003d new FilterFlashcardByTagCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                FilterFlashcardByTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void parse_validArgs_returnsFilterFlashcardByTagCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Tag tagOne \u003d new Tag(\"cs2100\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        tagSet.add(tagOne);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        ArrayList\u003cString\u003e tagList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        tagList.add(\"cs2100\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        FilterFlashcardByTagCommand expectedFilterFlashcardByTagCommand \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                new FilterFlashcardByTagCommand(new FlashcardContainsTagPredicate(tagSet), tagList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertParseSuccess(parser, TAG_DESC_MODULE, expectedFilterFlashcardByTagCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertParseSuccess(parser, \" \\n \" + TAG_DESC_MODULE + \" \\n \\t\", expectedFilterFlashcardByTagCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckb055"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/global/FilterAllByTagCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.logic.parser.global;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.commands.global.FilterAllByTagCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.parser.FilterAllByTagCommandParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.StudyBuddyItemContainsTagPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckb055"
        },
        "content": "class FilterAllByTagCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private FilterAllByTagCommandParser parser \u003d new FilterAllByTagCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                FilterAllByTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void parse_validArgs_returnsFilterAllByTagCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Tag tagOne \u003d new Tag(\"cs2100\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        tagSet.add(tagOne);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        ArrayList\u003cString\u003e tagList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        tagList.add(\"cs2100\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        FilterAllByTagCommand expectedFilterAllByTagCommand \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                new FilterAllByTagCommand(new StudyBuddyItemContainsTagPredicate(tagSet), tagList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertParseSuccess(parser, TAG_DESC_MODULE, expectedFilterAllByTagCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertParseSuccess(parser, \" \\n \" + TAG_DESC_MODULE + \" \\n \\t\", expectedFilterAllByTagCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckb055"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 2,
      "ckb055": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/note/AddNoteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.parser.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NOTE_CONTENT_PIPELINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NOTE_TAG_PIPELINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NOTE_TITLE_PIPELINE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SPACE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT_PIPELINE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NOTE_CONTENT_PIPELINE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NOTE_TAG_1_PIPELINE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NOTE_TAG_2_PIPELINE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NOTE_TITLE_PIPELINE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CS2100;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_PIPELINE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailureIllegalArgument;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.testutil.TypicalNotes.PIPELINE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.note.AddNoteCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.testutil.NoteBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class AddNoteCommandParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private AddNoteCommandParser parser \u003d new AddNoteCommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public AddNoteCommandParser getParser() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return parser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Note expectedNote \u003d new NoteBuilder(PIPELINE).withTags(VALID_TAG_CS2100).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertParseSuccess(getParser(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                PREAMBLE_WHITESPACE + VALID_NOTE_TITLE_PIPELINE + VALID_NOTE_CONTENT_PIPELINE"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                        + VALID_NOTE_TAG_1_PIPELINE, new AddNoteCommand(expectedNote));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // duplicate tags - only one accepted"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertParseSuccess(getParser(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                VALID_NOTE_TITLE_PIPELINE + VALID_NOTE_CONTENT_PIPELINE + VALID_NOTE_TAG_1_PIPELINE"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                        + VALID_NOTE_TAG_1_PIPELINE, new AddNoteCommand(expectedNote));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        expectedNote \u003d new NoteBuilder(PIPELINE).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertParseSuccess(getParser(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                VALID_NOTE_TITLE_PIPELINE + VALID_NOTE_CONTENT_PIPELINE + VALID_NOTE_TAG_1_PIPELINE"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                        + VALID_NOTE_TAG_2_PIPELINE, new AddNoteCommand(expectedNote));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Note expectedNote \u003d new NoteBuilder(PIPELINE).withTags().build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertParseSuccess(getParser(), VALID_NOTE_TITLE_PIPELINE + VALID_NOTE_CONTENT_PIPELINE,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                new AddNoteCommand(expectedNote));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddNoteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // missing space in front"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertParseFailure(getParser(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                PREFIX_TITLE + VALID_TITLE_PIPELINE + VALID_NOTE_CONTENT_PIPELINE + VALID_NOTE_TAG_1_PIPELINE,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // nonempty preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertParseFailure(getParser(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                PREAMBLE_NON_EMPTY + VALID_NOTE_TITLE_PIPELINE + VALID_NOTE_CONTENT_PIPELINE"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                        + VALID_NOTE_TAG_1_PIPELINE, expectedMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // missing title prefix"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertParseFailure(getParser(),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                VALID_NOTE_CONTENT_PIPELINE + VALID_NOTE_TAG_1_PIPELINE,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // missing content prefix"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertParseFailure(getParser(),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                 VALID_NOTE_TITLE_PIPELINE + VALID_NOTE_TAG_1_PIPELINE,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertParseFailure(getParser(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                SPACE + VALID_TITLE_PIPELINE + SPACE + VALID_CONTENT_PIPELINE + VALID_NOTE_TAG_1_PIPELINE,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertParseFailureIllegalArgument(getParser(), INVALID_NOTE_TITLE_PIPELINE + VALID_NOTE_CONTENT_PIPELINE"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                        + VALID_NOTE_TAG_1_PIPELINE, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // invalid content"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertParseFailureIllegalArgument(getParser(), VALID_NOTE_TITLE_PIPELINE + INVALID_NOTE_CONTENT_PIPELINE"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                + VALID_NOTE_TAG_1_PIPELINE, Content.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertParseFailureIllegalArgument(getParser(), VALID_NOTE_TITLE_PIPELINE + VALID_NOTE_CONTENT_PIPELINE"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                + INVALID_NOTE_TAG_PIPELINE, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertParseFailureIllegalArgument(getParser(), INVALID_NOTE_TITLE_PIPELINE + INVALID_NOTE_CONTENT_PIPELINE"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                + VALID_NOTE_TAG_1_PIPELINE, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertParseFailure(getParser(), PREAMBLE_NON_EMPTY + VALID_NOTE_TITLE_PIPELINE"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                + VALID_NOTE_CONTENT_PIPELINE + VALID_NOTE_TAG_1_PIPELINE,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddNoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/note/DeleteNoteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.parser.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_NOTE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.note.DeleteNoteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * outside of the DeleteNoteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * same path through the DeleteNoteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class DeleteNoteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private DeleteNoteCommandParser parser \u003d new DeleteNoteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void parse_validArgs_returnsDeleteNoteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteNoteCommand(INDEX_FIRST_NOTE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                DeleteNoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/note/FilterNoteByTagCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckb055"
        },
        "content": "package seedu.address.logic.parser.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.logic.commands.note.FilterNoteByTagCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.note.NoteContainsTagPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckb055"
        },
        "content": "class FilterNoteByTagCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private FilterNoteByTagCommandParser parser \u003d new FilterNoteByTagCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                FilterNoteByTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public void parse_validArgs_returnsFilterNoteByTagCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Tag tagOne \u003d new Tag(\"cs2100\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        tagSet.add(tagOne);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        ArrayList\u003cString\u003e tagList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        tagList.add(\"cs2100\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        FilterNoteByTagCommand expectedFilterNoteByTagCommand \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckb055"
        },
        "content": "                new FilterNoteByTagCommand(new NoteContainsTagPredicate(tagSet), tagList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertParseSuccess(parser, TAG_DESC_MODULE, expectedFilterNoteByTagCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertParseSuccess(parser, \" \\n \" + TAG_DESC_MODULE + \" \\n \\t\", expectedFilterNoteByTagCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckb055"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/person/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.person.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 1,
      "-": 139,
      "Sam-limyr": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/person/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.person.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 1,
      "-": 30,
      "Sam-limyr": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/person/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.person.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.person.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 1,
      "-": 208,
      "Sam-limyr": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/person/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.person.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 1,
      "-": 32,
      "Sam-limyr": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertEquals(new StudyBuddyPro(), new StudyBuddyPro(modelManager.getStudyBuddyPro()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        userPrefs.setStudyBuddyProFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        userPrefs.setStudyBuddyProFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setStudyBuddyProFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        modelManager.setStudyBuddyProFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        assertEquals(path, modelManager.getStudyBuddyProFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        StudyBuddyPro studyBuddyPro \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        StudyBuddyPro differentStudyBuddyPro \u003d new StudyBuddyPro();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        modelManager \u003d new ModelManager(studyBuddyPro, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(studyBuddyPro, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentStudyBuddyPro, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(studyBuddyPro, userPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        differentUserPrefs.setStudyBuddyProFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(studyBuddyPro, differentUserPrefs)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 6,
      "ckb055": 8,
      "-": 118
    }
  },
  {
    "path": "src/test/java/seedu/address/model/StudyBuddyProTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckb055"
        },
        "content": "public class StudyBuddyProTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private final StudyBuddyPro studyBuddyPro \u003d new StudyBuddyPro();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertEquals(Collections.emptyList(), studyBuddyPro.getPersonList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e studyBuddyPro.resetData(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        StudyBuddyPro newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        studyBuddyPro.resetData(newData);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertEquals(newData, studyBuddyPro);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /* To fix"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        List\u003cFlashcard\u003e newFlashcards \u003d Arrays.asList(MATH_ONE, CS_ONE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons, newFlashcards);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e studyBuddyPro.hasPerson(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertFalse(studyBuddyPro.hasPerson(ALICE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        studyBuddyPro.addPerson(ALICE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertTrue(studyBuddyPro.hasPerson(ALICE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        studyBuddyPro.addPerson(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertTrue(studyBuddyPro.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e studyBuddyPro.getPersonList().remove(0));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons and flashcard list can violate interface constraints."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private static class StudyBuddyProStub implements ReadOnlyStudyBuddyPro {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        private final ObservableList\u003cFlashcard\u003e flashcards \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        private final ObservableList\u003cNote\u003e notes \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        private final ObservableList\u003cCheatSheet\u003e cheatSheets \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        StudyBuddyProStub(Collection\u003cPerson\u003e persons, Collection\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            this.flashcards.setAll(flashcards);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        public ObservableList\u003cCheatSheet\u003e getCheatSheetList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ckb055"
        },
        "content": "            return cheatSheets;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        public ObservableList\u003cTag\u003e getTagList() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            return tags;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        public ObservableList\u003cFlashcard\u003e getFlashcardList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return flashcards;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public ObservableList\u003cNote\u003e getNoteList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            return notes;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 10,
      "ckb055": 21,
      "Sahilgat": 12,
      "-": 82,
      "Sam-limyr": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setStudyBuddyProFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 1,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/model/cheatsheet/CheatSheetContainsTagPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.model.cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.testutil.CheatSheetBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class CheatSheetContainsTagPredicateTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        HashSet\u003cTag\u003e firstPredicateTagList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        firstPredicateTagList.add(new Tag(\"first\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        HashSet\u003cTag\u003e secondPredicateTagList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        secondPredicateTagList.add(new Tag(\"first\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        secondPredicateTagList.add(new Tag(\"second\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        CheatSheetContainsTagPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                new CheatSheetContainsTagPredicate(firstPredicateTagList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        CheatSheetContainsTagPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                new CheatSheetContainsTagPredicate(secondPredicateTagList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        CheatSheetContainsTagPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                new CheatSheetContainsTagPredicate(firstPredicateTagList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // different cheatsheet -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void test_cheatSheetContainsTag_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        HashSet\u003cTag\u003e firstPredicateTagList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        firstPredicateTagList.add(new Tag(\"first\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        HashSet\u003cTag\u003e secondPredicateTagList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        secondPredicateTagList.add(new Tag(\"first\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        secondPredicateTagList.add(new Tag(\"second\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        CheatSheetContainsTagPredicate predicate \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                new CheatSheetContainsTagPredicate(firstPredicateTagList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertTrue(predicate.test(new CheatSheetBuilder().withTags(\"first\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        predicate \u003d new CheatSheetContainsTagPredicate(secondPredicateTagList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertTrue(predicate.test(new CheatSheetBuilder().withTags(\"first\", \"second\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        //predicate \u003d new CheatSheetContainsTagPredicate(secondPredicateTagList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        //assertTrue(predicate.test(new CheatSheetBuilder().withTags(\"first\", \"third\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        //predicate \u003d new CheatSheetContainsTagPredicate(secondPredicateTagList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        //assertTrue(predicate.test(new CheatSheetBuilder().withTags(\"first\", \"seCoUnD\").build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void test_cheatSheetDoesNotContainTags_returnsFalse() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        HashSet\u003cTag\u003e firstPredicateTagList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        firstPredicateTagList.add(new Tag(\"first\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        HashSet\u003cTag\u003e secondPredicateTagList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        secondPredicateTagList.add(new Tag(\"first\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        secondPredicateTagList.add(new Tag(\"second\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        CheatSheetContainsTagPredicate predicate \u003d new CheatSheetContainsTagPredicate(new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertFalse(predicate.test(new CheatSheetBuilder().withTags(\"first\").build()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        predicate \u003d new CheatSheetContainsTagPredicate(firstPredicateTagList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertFalse(predicate.test(new CheatSheetBuilder().withTags(\"third\").build()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // Matches title, but does not match tag"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        predicate \u003d new CheatSheetContainsTagPredicate(firstPredicateTagList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertFalse(predicate.test(new CheatSheetBuilder().withTitle(\"first\").withTags(\"third\").build()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        predicate \u003d new CheatSheetContainsTagPredicate(secondPredicateTagList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertFalse(predicate.test(new CheatSheetBuilder().withTags(\"first\", \"third\").build()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 86,
      "ckb055": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/model/cheatsheet/CheatSheetTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.model.cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_IMPORTANT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_GEM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_MATH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.testutil.TypicalCheatSheets.CS6;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.testutil.TypicalCheatSheets.CS7;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.testutil.CheatSheetBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class CheatSheetTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        CheatSheet cheatSheet \u003d new CheatSheetBuilder().build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e cheatSheet.getTags().remove(0));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void isSameCheatSheet() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertTrue(CS6.isSameCheatSheet(CS6));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertFalse(CS6.isSameCheatSheet(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // different title and tags -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        CheatSheet editedCs6 \u003d new CheatSheetBuilder(CS6)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                .withTitle(VALID_TITLE_GEM).withTags(VALID_TAG_IMPORTANT).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertFalse(CS6.isSameCheatSheet(editedCs6));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        editedCs6 \u003d new CheatSheetBuilder(CS6).withTitle(VALID_TITLE_GEM).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertFalse(CS6.isSameCheatSheet(editedCs6));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // same title, different tags -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        editedCs6 \u003d new CheatSheetBuilder(CS6)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                .withTitle(VALID_TITLE_MATH)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                .withTags(VALID_TAG_IMPORTANT).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertTrue(CS6.isSameCheatSheet(editedCs6));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        CheatSheet cs6Copy \u003d new CheatSheetBuilder(CS6).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertTrue(CS6.equals(cs6Copy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertTrue(CS6.equals(CS6));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertFalse(CS6.equals(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertFalse(CS6.equals(5));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // different cheatsheet -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertFalse(CS6.equals(CS7));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        CheatSheet editedCs6 \u003d new CheatSheetBuilder(CS6).withTitle(VALID_TITLE_GEM).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertFalse(CS6.equals(editedCs6));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        editedCs6 \u003d new CheatSheetBuilder(CS6).withTags(VALID_TAG_IMPORTANT).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertFalse(CS6.equals(editedCs6));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/model/cheatsheet/ContentTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.model.cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class ContentTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private final Set\u003cTag\u003e defaultTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private final String defaultQuestion \u003d \"question\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private final String defaultAnswer \u003d \"answer\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Content(null, null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Content(\"Has Content\", null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Content(null, defaultTags));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Content(null, null, null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Content(defaultQuestion, null, null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Content(null, defaultAnswer, null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Content(null, null, defaultTags));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Content(null, defaultAnswer, defaultTags));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Content(defaultQuestion, null, defaultTags));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Content(defaultQuestion, defaultAnswer, null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void constructor_invalidContent_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Content(\"\", defaultTags));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Content(\"\", \"\", defaultTags));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Content(\"\", defaultAnswer, defaultTags));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Content(defaultQuestion, \"\", defaultTags));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void isValidContent() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Content.isValidContent(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // invalid Content"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertFalse(Content.isValidContent(\"\")); // empty string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertFalse(Content.isValidContent(\" \")); // spaces only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // valid Content"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertTrue(Content.isValidContent(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertTrue(Content.isValidContent(\"content*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertTrue(Content.isValidContent(\"this is a content\")); // alphabets only"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertTrue(Content.isValidContent(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertTrue(Content.isValidContent(\"this is the 2nd content\")); // alphanumeric characters"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertTrue(Content.isValidContent(\"The Capital Content\")); // with capital letters"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertTrue(Content.isValidContent("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                \"This Title is a very \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                        + \"Loooooooooooooooooooooooooooo00oooooooooooooooooooooooooooooooooooooooong \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                        + \"tiTle\")); // long content"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void method_equals() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Content content \u003d new Content(\"A content\", defaultTags);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Content anotherContent \u003d new Content(\"Another content\", defaultTags);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertTrue(content.equals(content));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertTrue(content.equals(new Content(\"A content\", defaultTags)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertFalse(content.equals(anotherContent));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertFalse(content.equals(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertFalse(new Content(defaultQuestion, defaultAnswer, defaultTags).equals("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                new Content(defaultQuestion, \"some other answer\", defaultTags)));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void method_formatToList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertEquals(\"The truncated conten...\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                new Content(\"The truncated content that is very long\", defaultTags).formatToList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertEquals(\"Question: question; ...\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                new Content(defaultQuestion, defaultAnswer, defaultTags).formatToList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/model/cheatsheet/TitleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.model.cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class TitleTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Title(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void constructor_invalidTitle_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        String invalidTitle \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Title(invalidTitle));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void constructor_removedLeadingTrailingSpaces() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Title leadingTitle \u003d new Title(\"      title with leading spaces\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Title trailingTitle \u003d new Title(\"title with trailing spaces       \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Title bothTitle \u003d new Title(\"    title with both kinds of spaces    \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // expects all leading or/and trailing of spaces to be removed"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertEquals(\"title with leading spaces\", leadingTitle.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertEquals(\"title with trailing spaces\", trailingTitle.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertEquals(\"title with both kinds of spaces\", bothTitle.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void method_toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertEquals(\"This is a title\", new Title(\"This is a title\").toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertNotEquals(123, new Title(\"123\").toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void method_equals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Title title \u003d new Title(\"A title\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Title anotherTitle \u003d new Title(\"Another title\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertTrue(title.equals(title));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertTrue(title.equals(new Title(\"A title\")));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertFalse(title.equals(anotherTitle));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertFalse(title.equals(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void isValidTitle() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Title.isValidTitle(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // invalid Title"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertFalse(Title.isValidTitle(\"\")); // empty string"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertFalse(Title.isValidTitle(\" \")); // spaces only"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertFalse(Title.isValidTitle(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertFalse(Title.isValidTitle(\"title*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertFalse(Title.isValidTitle(\"This Title is a very \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                + \"Loooooooooooooooooooooooooooo0000oooooooooooooooooooooooooooooooooooooooong \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                + \"tiTle\")); // more than max length titles"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        // valid Title"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertTrue(Title.isValidTitle(\"this is a title\")); // alphabets only"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertTrue(Title.isValidTitle(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertTrue(Title.isValidTitle(\"this is the 2nd title\")); // alphanumeric characters"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertTrue(Title.isValidTitle(\"The Capital Title\")); // with capital letters"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertTrue(Title.isValidTitle("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                \"This Title is a very \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                + \"Loooooooooooooooooooooooooooo00oooooooooooooooooooooooooooooooooooooooong\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                + \" tiTle\")); // max length titles"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/model/cheatsheet/UniqueCheatSheetListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.model.cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CHEATSHEET;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_MATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.testutil.TypicalCheatSheets.CS6;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.testutil.TypicalCheatSheets.CS7;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.cheatsheet.exceptions.CheatSheetNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.cheatsheet.exceptions.DuplicateCheatSheetException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.testutil.CheatSheetBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class UniqueCheatSheetListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private final UniqueCheatSheetList uniqueCheatSheetList \u003d new UniqueCheatSheetList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void contains_nullCheatSheet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCheatSheetList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void contains_cheatSheetNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertFalse(uniqueCheatSheetList.contains(CS6));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void contains_cheatSheetInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        uniqueCheatSheetList.add(CS6);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertTrue(uniqueCheatSheetList.contains(CS6));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void contains_cheatSheetWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        uniqueCheatSheetList.add(CS6);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        CheatSheet editedCs6 \u003d new CheatSheetBuilder(CS6)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                .withTitle(VALID_TITLE_MATH)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                .withTags(VALID_TAG_CHEATSHEET)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertTrue(uniqueCheatSheetList.contains(editedCs6));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void add_nullCheatSheet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCheatSheetList.add(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void add_duplicateCheatSheet_throwsDuplicateCheatSheetException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        uniqueCheatSheetList.add(CS6);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertThrows(DuplicateCheatSheetException.class, () -\u003e uniqueCheatSheetList.add(CS6));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void setCheatSheet_nullTargetCheatSheet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertThrows(NullPointerException.class, ("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                ) -\u003e uniqueCheatSheetList.setCheatSheet(null, CS6));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void setCheatSheet_nullEditedCheatSheet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertThrows(NullPointerException.class, ("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                ) -\u003e uniqueCheatSheetList.setCheatSheet(CS6, null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void setCheatSheet_targetCheatSheetNotInList_throwsCheatSheetNotFoundException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertThrows(CheatSheetNotFoundException.class, () -\u003e uniqueCheatSheetList.setCheatSheet(CS6, CS6));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void setCheatSheet_editedCheatSheetIsSameCheatSheet_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        uniqueCheatSheetList.add(CS6);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        uniqueCheatSheetList.setCheatSheet(CS6, CS6);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        UniqueCheatSheetList expectedUniqueCheatSheetList \u003d new UniqueCheatSheetList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        expectedUniqueCheatSheetList.add(CS6);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertEquals(expectedUniqueCheatSheetList, uniqueCheatSheetList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void setCheatSheet_editedCheatSheetHasSameIdentity_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        uniqueCheatSheetList.add(CS6);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        CheatSheet editedCS6 \u003d new CheatSheetBuilder(CS6)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                .withTitle(VALID_TITLE_MATH)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                .withTags(VALID_TAG_CHEATSHEET)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        uniqueCheatSheetList.setCheatSheet(CS6, editedCS6);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        UniqueCheatSheetList expectedUniqueCheatSheetList \u003d new UniqueCheatSheetList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        expectedUniqueCheatSheetList.add(editedCS6);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertEquals(expectedUniqueCheatSheetList, uniqueCheatSheetList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void setCheatSheet_editedCheatSheetHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        uniqueCheatSheetList.add(CS6);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        uniqueCheatSheetList.setCheatSheet(CS6, CS7);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        UniqueCheatSheetList expectedUniqueCheatSheetList \u003d new UniqueCheatSheetList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        expectedUniqueCheatSheetList.add(CS7);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertEquals(expectedUniqueCheatSheetList, uniqueCheatSheetList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void setCheatSheet_editedCheatSheetHasNonUniqueIdentity_throwsDuplicateCheatSheetException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        uniqueCheatSheetList.add(CS6);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        uniqueCheatSheetList.add(CS7);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertThrows(DuplicateCheatSheetException.class, () -\u003e uniqueCheatSheetList.setCheatSheet(CS6, CS7));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void remove_nullCheatSheet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCheatSheetList.remove(null));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertThrows(CheatSheetNotFoundException.class, () -\u003e uniqueCheatSheetList.remove(CS6));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        uniqueCheatSheetList.add(CS6);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        uniqueCheatSheetList.remove(CS6);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        UniqueCheatSheetList expectedUniqueCheatSheetList \u003d new UniqueCheatSheetList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertEquals(expectedUniqueCheatSheetList, uniqueCheatSheetList);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void setCheatSheets_nullUniqueCheatSheetList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertThrows(NullPointerException.class, ("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                ) -\u003e uniqueCheatSheetList.setCheatSheets((UniqueCheatSheetList) null));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void setCheatSheets_uniqueCheatSheetList_replacesOwnListWithProvidedUniqueCheatSheetList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        uniqueCheatSheetList.add(CS6);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        UniqueCheatSheetList expectedUniquePersonList \u003d new UniqueCheatSheetList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        expectedUniquePersonList.add(CS7);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        uniqueCheatSheetList.setCheatSheets(expectedUniquePersonList);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniqueCheatSheetList);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void setCheatSheets_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertThrows(NullPointerException.class, ("
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                ) -\u003e uniqueCheatSheetList.setCheatSheets((List\u003cCheatSheet\u003e) null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void setCheatSheets_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        uniqueCheatSheetList.add(CS6);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        List\u003cCheatSheet\u003e personList \u003d Collections.singletonList(CS7);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        uniqueCheatSheetList.setCheatSheets(personList);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        UniqueCheatSheetList expectedUniqueCheatSheetList \u003d new UniqueCheatSheetList();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        expectedUniqueCheatSheetList.add(CS7);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertEquals(expectedUniqueCheatSheetList, uniqueCheatSheetList);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        List\u003cCheatSheet\u003e listWithDuplicateCheatSheets \u003d Arrays.asList(CS6, CS6);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                DuplicateCheatSheetException.class, ("
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                        ) -\u003e uniqueCheatSheetList.setCheatSheets(listWithDuplicateCheatSheets));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                UnsupportedOperationException.class, ("
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "                        ) -\u003e uniqueCheatSheetList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 180
    }
  },
  {
    "path": "src/test/java/seedu/address/model/flashcard/AnswerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class AnswerTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Answer(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void constructor_invalidAnswer_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        String invalidAnswer \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Answer(invalidAnswer));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void method_toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertEquals(\"This is an answer.\", new Answer(\"This is an answer.\").toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertNotEquals(123, new Answer(\"123\").toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        Answer answer \u003d new Answer(\"An answer?\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        Answer anotherAnswer \u003d new Answer(\"Another answer...\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertTrue(answer.equals(answer));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertTrue(answer.equals(new Answer(\"An answer?\")));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertFalse(answer.equals(anotherAnswer));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertFalse(answer.equals(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void isValidAnswer() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // null question"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Answer.isValidAnswer(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // invalid questions"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertFalse(Answer.isValidAnswer(\"\")); // empty string"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertFalse(Answer.isValidAnswer(\" \")); // spaces only"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertFalse(Answer.isValidAnswer(\"This answer is a very \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                + \"Loooooooooooooooooooooooooooo0000oooooooooooooooooooooooooooooooooooooooong \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                + \"Loooooooooooooooooooooooooooo0000oooooooooooooooooooooooooooooooooooooooong \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                + \"Loooooooooooooooooooooooooooo0000oooooooooooooooooooooooooooooooooooooooong \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                + \"Loooooooooooooooooooooooooooo0000oooooooooooooooooooooooooooooooooooooooong \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                + \"answer\")); // more than max length answer"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // valid questions"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"a\")); // one character"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"123456\")); // numbers only"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"+-*\u0026\")); // only non-alphanumeric"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"Hydrogen-99\")); // alphanumeric and non-alphanumeric mix"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"Weak van der Walls force.\")); // short answer"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"This question is exactly 300 characters long! \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                + \"This question is exactly 300 characters long! Filler..This question is exactly 300 characters long!\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                + \"This question is exactly 300 characters long! Filler..This question is exactly 300 characters long!\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                + \"This question is exactly 300 characters long! Filler....\")); // max length answer"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/model/flashcard/QuestionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class QuestionTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Question(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void constructor_invalidQuestion_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        String invalidQuestion \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Question(invalidQuestion));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void method_toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertEquals(\"Is this a question?\", new Question(\"Is this a question?\").toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertNotEquals(123, new Question(\"123\").toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        Question question \u003d new Question(\"A question.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        Question anotherQuestion \u003d new Question(\"Another question...\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertTrue(question.equals(question));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertTrue(question.equals(new Question(\"A question.\")));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertFalse(question.equals(anotherQuestion));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertFalse(question.equals(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void isValidQuestion() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // null question"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Question.isValidQuestion(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // invalid questions"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertFalse(Question.isValidQuestion(\"\")); // empty string"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertFalse(Question.isValidQuestion(\" \")); // spaces only"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertFalse(Question.isValidQuestion(\"This question is a very \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                + \"Loooooooooooooooooooooooooooo0000oooooooooooooooooooooooooooooooooooooooong \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                + \"Loooooooooooooooooooooooooooo0000oooooooooooooooooooooooooooooooooooooooong \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                + \"Loooooooooooooooooooooooooooo0000oooooooooooooooooooooooooooooooooooooooong \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                + \"Loooooooooooooooooooooooooooo0000oooooooooooooooooooooooooooooooooooooooong \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                + \"question\")); // more than max length question"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // valid questions"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"a\")); // one character"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"123456\")); // numbers only"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"+-*\u0026\")); // only non-alphanumeric"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"What is my name?\")); // alphanumeric and non-alphanumeric mix"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"What is my name\")); // short question"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"This question is exactly 300 characters long! \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                + \"This question is exactly 300 characters long! Filler..This question is exactly 300 characters long!\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                + \"This question is exactly 300 characters long! Filler..This question is exactly 300 characters long!\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                + \"This question is exactly 300 characters long! Filler....\")); // max length question"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/model/flashcard/TitleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class TitleTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Title(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void constructor_invalidTitle_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        String invalidTitle \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Title(invalidTitle));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void method_toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertEquals(\"This is a title\", new Title(\"This is a title\").toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertNotEquals(123, new Title(\"123\").toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void method_equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        Title title \u003d new Title(\"A title\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        Title anotherTitle \u003d new Title(\"Another title\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertTrue(title.equals(title));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertTrue(title.equals(new Title(\"A title\")));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertFalse(title.equals(anotherTitle));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertFalse(title.equals(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void isValidTitle() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Title.isValidTitle(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // invalid Title"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertFalse(Title.isValidTitle(\"\")); // empty string"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertFalse(Title.isValidTitle(\" \")); // spaces only"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertFalse(Title.isValidTitle(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertFalse(Title.isValidTitle(\"title*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertFalse(Title.isValidTitle(\"This Title is a very \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                + \"Loooooooooooooooooooooooooooo0000oooooooooooooooooooooooooooooooooooooooong \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                + \"tiTle\")); // more than max length titles"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // valid Title"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertTrue(Title.isValidTitle(\"this is a title\")); // alphabets only"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertTrue(Title.isValidTitle(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertTrue(Title.isValidTitle(\"this is the 2nd title\")); // alphanumeric characters"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertTrue(Title.isValidTitle(\"The Capital Title\")); // with capital letters"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertTrue(Title.isValidTitle("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                \"This Title is a very \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                        + \"Loooooooooooooooooooooooooooo00oooooooooooooooooooooooooooooooooooooooong\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                        + \" tiTle\")); // max length titles"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/model/flashcard/UniqueFlashcardListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_INTELLIJ;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_ONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.CS_ONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.MATH_ONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.exceptions.DuplicateFlashcardException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "//import seedu.address.model.flashcard.exceptions.DuplicateFlashcardQuestionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "//import seedu.address.model.flashcard.exceptions.DuplicateFlashcardTitleException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.exceptions.FlashcardNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class UniqueFlashcardListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private final UniqueFlashcardList uniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void contains_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.contains(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void contains_flashcardNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertFalse(uniqueFlashcardList.contains(MATH_ONE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void contains_flashcardInList_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        uniqueFlashcardList.add(MATH_ONE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertTrue(uniqueFlashcardList.contains(MATH_ONE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    //Issue?"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void contains_flashcardWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        uniqueFlashcardList.add(MATH_ONE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        Flashcard editedMathOne \u003d new FlashcardBuilder(MATH_ONE)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                .withTitle(VALID_TITLE_ONE)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                .withTags(VALID_TAG_INTELLIJ)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertTrue(uniqueFlashcardList.contains(editedMathOne));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void add_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.add(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    //Add more here?"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void add_duplicateFlashcard_throwsDuplicateFlashcardException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        uniqueFlashcardList.add(MATH_ONE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertThrows(DuplicateFlashcardException.class, () -\u003e uniqueFlashcardList.add(MATH_ONE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void setFlashcard_nullTargetFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertThrows(NullPointerException.class, ("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        ) -\u003e uniqueFlashcardList.setFlashcard(null, MATH_ONE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void setFlashcard_nullEditedFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertThrows(NullPointerException.class, ("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        ) -\u003e uniqueFlashcardList.setFlashcard(MATH_ONE, null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void setFlashcard_targetFlashcardNotInList_throwsFlashcardNotFoundException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertThrows(FlashcardNotFoundException.class, () -\u003e uniqueFlashcardList.setFlashcard(MATH_ONE, MATH_ONE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void setFlashcard_editedFlashcardIsSameFlashcard_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        uniqueFlashcardList.add(MATH_ONE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        uniqueFlashcardList.setFlashcard(MATH_ONE, MATH_ONE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        expectedUniqueFlashcardList.add(MATH_ONE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void setFlashcard_editedFlashcardHasSameIdentity_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        uniqueFlashcardList.add(MATH_ONE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        Flashcard editedMathOne \u003d new FlashcardBuilder(MATH_ONE)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                .withTitle(VALID_TITLE_ONE)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                .withTags(VALID_TAG_INTELLIJ)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        uniqueFlashcardList.setFlashcard(MATH_ONE, editedMathOne);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        expectedUniqueFlashcardList.add(editedMathOne);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void setFlashcard_editedFlashcardHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        uniqueFlashcardList.add(MATH_ONE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        uniqueFlashcardList.setFlashcard(MATH_ONE, CS_ONE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        expectedUniqueFlashcardList.add(CS_ONE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void setFlashcard_editedFlashcardHasNonUniqueIdentity_throwsDuplicateFlashcardException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        uniqueFlashcardList.add(MATH_ONE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        uniqueFlashcardList.add(CS_ONE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertThrows(DuplicateFlashcardException.class, () -\u003e uniqueFlashcardList.setFlashcard(MATH_ONE, CS_ONE));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void remove_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.remove(null));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertThrows(FlashcardNotFoundException.class, () -\u003e uniqueFlashcardList.remove(MATH_ONE));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        uniqueFlashcardList.add(MATH_ONE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        uniqueFlashcardList.remove(MATH_ONE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void setFlashcards_nullUniqueFlashcardList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertThrows(NullPointerException.class, ("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        ) -\u003e uniqueFlashcardList.setFlashcards((UniqueFlashcardList) null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void setFlashcards_uniqueFlashcardList_replacesOwnListWithProvidedUniqueFlashcardList() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        uniqueFlashcardList.add(MATH_ONE);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        UniqueFlashcardList expectedUniquePersonList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        expectedUniquePersonList.add(CS_ONE);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        uniqueFlashcardList.setFlashcards(expectedUniquePersonList);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void setFlashcards_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertThrows(NullPointerException.class, ("
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        ) -\u003e uniqueFlashcardList.setFlashcards((List\u003cFlashcard\u003e) null));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void setFlashcards_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        uniqueFlashcardList.add(MATH_ONE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        List\u003cFlashcard\u003e personList \u003d Collections.singletonList(CS_ONE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        uniqueFlashcardList.setFlashcards(personList);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        expectedUniqueFlashcardList.add(CS_ONE);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        List\u003cFlashcard\u003e listWithDuplicateFlashcards \u003d Arrays.asList(MATH_ONE, MATH_ONE);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                DuplicateFlashcardException.class, ("
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                ) -\u003e uniqueFlashcardList.setFlashcards(listWithDuplicateFlashcards));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                UnsupportedOperationException.class, ("
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                ) -\u003e uniqueFlashcardList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 182
    }
  },
  {
    "path": "src/test/java/seedu/address/model/note/NoteTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.testutil.TypicalNotes.PIPELINE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.testutil.TypicalNotes.SAMPLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.testutil.NoteBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class NoteTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public void toString_format_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        tags.add(new Tag(\"sampleTag\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Note note \u003d new Note(new Title(\"this is a title\"), new Content(\"this is a content\"), tags);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        assertEquals(note.toString(), \"\\nTitle: this is a title\\nContent: this is a content\\nTags: [sampleTag]\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void requireNonNull_noTitleProvided_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertThrows(java.lang.IllegalArgumentException.class, () -\u003e new Note(new Title(\"title\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                new Content(\"\"), null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Note note \u003d new NoteBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e note.getTags().remove(0));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void isSameNote() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertTrue(SAMPLE.isSameNote(SAMPLE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertFalse(SAMPLE.isSameNote(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Note differentTitle \u003d new NoteBuilder(SAMPLE).withTitle(\"Different Sample Title\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertFalse(SAMPLE.isSameNote(differentTitle));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // same title -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Note sameTitle \u003d new NoteBuilder(SAMPLE).withTitle(\"Sample Title\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertTrue(SAMPLE.isSameNote(sameTitle));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Note sampleCopy \u003d new NoteBuilder(SAMPLE).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertTrue(SAMPLE.equals(sampleCopy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertTrue(SAMPLE.equals(SAMPLE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertFalse(SAMPLE.equals(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertFalse(SAMPLE.equals(5));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // different note -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertFalse(SAMPLE.equals(PIPELINE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Note editedAlice \u003d new NoteBuilder(SAMPLE).withTitle(\"Different Sample Title\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertFalse(SAMPLE.equals(editedAlice));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 8,
      "Sam-limyr": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.StudyBuddyPro;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        StudyBuddyPro studyBuddyProFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        StudyBuddyPro typicalPersonsStudyBuddyPro \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertEquals(studyBuddyProFromFile, typicalPersonsStudyBuddyPro);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 4,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonStudyBuddyProStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.ReadOnlyStudyBuddyPro;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.StudyBuddyPro;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckb055"
        },
        "content": "public class JsonStudyBuddyProStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private java.util.Optional\u003cReadOnlyStudyBuddyPro\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        StudyBuddyPro original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        ReadOnlyStudyBuddyPro readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertEquals(original, new StudyBuddyPro(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertEquals(original, new StudyBuddyPro(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertEquals(original, new StudyBuddyPro(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private void saveAddressBook(ReadOnlyStudyBuddyPro addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new StudyBuddyPro(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 11,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        userPrefs.setStudyBuddyProFilePath(Paths.get(\"data\", \"studybuddypro.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 1,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * UPDATE: This test was removed as it is inapplicable (No more typical address book) - To restructure"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void getFlashcardFilePath() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertNotNull(storageManager.getFlashcardFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void getNoteFilePath() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertNotNull(storageManager.getNoteFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void getCheatSheetFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        assertNotNull(storageManager.getCheatSheetFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 14,
      "-": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.StudyBuddyPro;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private StudyBuddyPro studyBuddyPro;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        studyBuddyPro \u003d new StudyBuddyPro();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public AddressBookBuilder(StudyBuddyPro studyBuddyPro) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        this.studyBuddyPro \u003d studyBuddyPro;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        studyBuddyPro.addPerson(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public StudyBuddyPro build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return studyBuddyPro;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 8,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/CheatSheetBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckb055"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.cheatsheet.Content;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.cheatsheet.Title;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckb055"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckb055"
        },
        "content": " * A utility class to help with building CheatSheet objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckb055"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckb055"
        },
        "content": "public class CheatSheetBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"title\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private Set\u003cContent\u003e contents;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public CheatSheetBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        this.contents \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Initializes the CheatSheetBuilder with the data of {@code cheatSheetToCopy}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public CheatSheetBuilder(CheatSheet cheatSheetToCopy) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        title \u003d cheatSheetToCopy.getTitle();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        contents \u003d cheatSheetToCopy.getContents();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(cheatSheetToCopy.getTags());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Sets the {@code Title} of the {@code CheatSheet} that we are building."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public CheatSheetBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code CheatSheet} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ckb055"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public CheatSheetBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Parses the {@code contents} into a {@code Set\u003cContent\u003e}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * and set it to the {@code CheatSheet} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public CheatSheetBuilder withContents(String ... contents) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        this.contents \u003d SampleDataUtil.getContentSet(contents);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public CheatSheet build() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        return new CheatSheet(title, contents, tags);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ckb055"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 56,
      "jaesimin": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditCheatSheetDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.logic.commands.cheatsheet.EditCheatSheetCommand.EditCheatSheetDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.cheatsheet.Title;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " * A utility class to help with building EditCheatSheetDescriptor objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class EditCheatSheetDescriptorBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private EditCheatSheetDescriptor descriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public EditCheatSheetDescriptorBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        descriptor \u003d new EditCheatSheetDescriptor();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public EditCheatSheetDescriptorBuilder(EditCheatSheetDescriptor descriptor) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        this.descriptor \u003d new EditCheatSheetDescriptor(descriptor);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Returns an {@code EditCheatSheetDescriptor} with fields containing {@code cheatsheet}\u0027s details"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public EditCheatSheetDescriptorBuilder(CheatSheet cheatSheet) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        descriptor \u003d new EditCheatSheetDescriptor();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        descriptor.setTitle(cheatSheet.getTitle());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        descriptor.setTags(cheatSheet.getTags());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Sets the {@code Title} of the {@code EditCheatSheetDescriptor} that we are building."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public EditCheatSheetDescriptorBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        descriptor.setTitle(new Title(title));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditCheatSheetDescriptor}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public EditCheatSheetDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public EditCheatSheetDescriptor build() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.person.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 86,
      "Sam-limyr": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/FlashcardBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.Answer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.Question;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.Statistics;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.Title;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * A utility class to help with building Flashcard objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class FlashcardBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final String DEFAULT_QUESTION \u003d \"What is binary value for true\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final String DEFAULT_ANSWER \u003d \"1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"My first flashcard\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final Statistics DEFAULT_STATISTICS \u003d new Statistics();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private Question question;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private Answer answer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private Statistics statistics;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public FlashcardBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        question \u003d new Question(DEFAULT_QUESTION);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        answer \u003d new Answer(DEFAULT_ANSWER);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        statistics \u003d new Statistics();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Initializes the FlashcardBuilder with the data of {@code flashcardToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public FlashcardBuilder(Flashcard flashcardToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        question \u003d flashcardToCopy.getQuestion();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        answer \u003d flashcardToCopy.getAnswer();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        title \u003d flashcardToCopy.getTitle();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(flashcardToCopy.getTags());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Sets the {@code Question} of the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public FlashcardBuilder withQuestion(String question) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.question \u003d new Question(question);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public FlashcardBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Sets the {@code Answer} of the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public FlashcardBuilder withAnswer(String answer) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.answer \u003d new Answer(answer);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Sets the {@code Title} of the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public FlashcardBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Sets the {@code Statistics} of the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public FlashcardBuilder withStatistics(Statistics statistics) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.statistics \u003d statistics;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public Flashcard build() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return new Flashcard(question, answer, title, tags);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/FlashcardUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.flashcard.AddFlashcardCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * A utility class for Flashcard testing."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class FlashcardUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Returns an add command string for adding the {@code flashcard}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static String getAddFlashcardCommand(Flashcard flashcard) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return AddFlashcardCommand.COMMAND_WORD + \" \" + getFlashcardDetails(flashcard);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Returns the part of command string for the given {@code flashcard}\u0027s details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static String getFlashcardDetails(Flashcard flashcard) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        sb.append(PREFIX_QUESTION + flashcard.getQuestion().fullQuestion + \" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        sb.append(PREFIX_ANSWER + flashcard.getAnswer().fullAnswer + \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        flashcard.getTags().stream().forEach(s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 53,
      "Sam-limyr": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/NoteBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * A utility class to help with building Note objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class NoteBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"Pipeline Definition\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String DEFAULT_CONTENT \u003d \"Pipelining is a process where a processor simultaneously runs \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"multiple instructions\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String EXTRA_CONTENT \u003d \"Pipelining is a /* C/process TAG/important */ where a /* C/processor \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"TAG/cs2100 TAG/cheatsheet */ simultaneously runs multiple instructions. tag/cs\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private Content phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public NoteBuilder() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        phone \u003d new Content(DEFAULT_CONTENT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Initializes the NoteBuilder with the data of {@code noteToCopy}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public NoteBuilder(Note noteToCopy) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        title \u003d noteToCopy.getTitle();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        phone \u003d noteToCopy.getContent();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(noteToCopy.getTags());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Sets the {@code Title} of the {@code Note} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public NoteBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Note} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public NoteBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Sets the {@code Content} of the {@code Note} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public NoteBuilder withContent(String phone) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.phone \u003d new Content(phone);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public Note build() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return new Note(title, phone, tags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.person.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.person.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 60,
      "Sam-limyr": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalCheatSheets.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CHEATSHEET;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FORMULA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_IMPORTANT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_GEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_MATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.StudyBuddyPro;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "import seedu.address.model.cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " * A utility class containing a list of {@code CheatSheet} objects to be used in tests."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "public class TypicalCheatSheets {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final CheatSheet CS1 \u003d new CheatSheetBuilder()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            .withTitle(\"Cheatsheet 1\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            .withTags(\"cs2103t\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final CheatSheet CS2 \u003d new CheatSheetBuilder()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            .withTitle(\"cs 2\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            .withTags(\"cs2101\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final CheatSheet CS3 \u003d new CheatSheetBuilder()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            .withTitle(\"Cheatsheetszxc 3\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            .withTags(\"cs2102\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final CheatSheet CS4 \u003d new CheatSheetBuilder()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            .withTitle(\"ccss 4\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            .withTags(\"cs2105\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final CheatSheet CS5 \u003d new CheatSheetBuilder()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            .withTitle(\"sc 5\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            .withTags(\"lsm1301\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    // Manually added - CheatSheet\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final CheatSheet CS6 \u003d new CheatSheetBuilder()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            .withTitle(VALID_TITLE_MATH)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            .withTags(VALID_TAG_CHEATSHEET, VALID_TAG_FORMULA).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final CheatSheet CS7 \u003d new CheatSheetBuilder()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            .withTitle(VALID_TITLE_GEM)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            .withTags(VALID_TAG_CHEATSHEET, VALID_TAG_IMPORTANT).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    private TypicalCheatSheets() {} // prevents instantiation"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical cheatsheets."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public static StudyBuddyPro getTypicalAddressBook() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        StudyBuddyPro ab \u003d new StudyBuddyPro();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        for (CheatSheet cheatSheet : getTypicalCheatSheets()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "            ab.addCheatSheet(cheatSheet);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static List\u003cCheatSheet\u003e getTypicalCheatSheets() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS1, CS2, CS3, CS4, CS5, CS6, CS7));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaesimin": 60,
      "ckb055": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalFlashcards.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_ONE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_TWO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_ONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_TWO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_INTELLIJ;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SHORTCUTS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_ONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_TWO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.StudyBuddyPro;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * A utility class containing a list of {@code Flashcards} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class TypicalFlashcards {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final Flashcard MATH_ONE \u003d new FlashcardBuilder().withQuestion(\"What is 2 + 2?\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            .withAnswer(\"4\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            .withTitle(\"Math Question 1\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            .withTags(\"maths\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final Flashcard CS_ONE \u003d new FlashcardBuilder().withQuestion(\"What does the SLAP acronym mean?\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            .withAnswer(\"Single Layer of Abstraction Principle\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            .withTitle(\"CS Question 1\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            .withTags(\"CS2103T\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    // Manually added - Flashcard\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final Flashcard INTELLIJ_ONE \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            new FlashcardBuilder().withQuestion(VALID_QUESTION_ONE)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            .withAnswer(VALID_ANSWER_ONE).withTitle(VALID_TITLE_ONE).withTags(VALID_TAG_INTELLIJ)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static final Flashcard INTELLIJ_TWO \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            new FlashcardBuilder().withQuestion(VALID_QUESTION_TWO)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            .withAnswer(VALID_ANSWER_TWO).withTitle(VALID_TITLE_TWO).withTags(VALID_TAG_INTELLIJ, VALID_TAG_SHORTCUTS)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private TypicalFlashcards() {} // prevents instantiation"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical flashcards."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public static StudyBuddyPro getTypicalAddressBook() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        StudyBuddyPro ab \u003d new StudyBuddyPro();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        for (Flashcard flashcard : getTypicalFlashcards()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            ab.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static List\u003cFlashcard\u003e getTypicalFlashcards() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(MATH_ONE, CS_ONE, INTELLIJ_ONE, INTELLIJ_TWO));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 3,
      "Sahilgat": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final Index INDEX_FIRST_CHEATSHEET \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final Index INDEX_SECOND_CHEATSHEET \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    public static final Index INDEX_THIRD_CHEATSHEET \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public static final Index INDEX_FIRST_FLASHCARD \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public static final Index INDEX_SECOND_FLASHCARD \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public static final Index INDEX_THIRD_FLASHCARD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final Index INDEX_FIRST_NOTE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final Index INDEX_SECOND_NOTE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final Index INDEX_THIRD_NOTE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 5,
      "jaesimin": 4,
      "-": 12,
      "Sam-limyr": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalNotes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.StudyBuddyPro;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class TypicalNotes {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final Note SAMPLE \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            new NoteBuilder().withTitle(\"Sample Title\").withContent(\"Sample Content\").withTags(\"SampleTag1\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    \"SampleTag2\").build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final Note PIPELINE \u003d new NoteBuilder().withTitle(\"Pipelining Definition\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            .withContent(\"Pipelining is the process of making a single processor run multiple instructions \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    + \"simultaneously.\").withTags(\"CS2100\", \"Midterms\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final Note POTATO \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            new NoteBuilder().withTitle(\"Potatoes\").withContent(\"I really like potatoes.\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private TypicalNotes() {} // prevents instantiation"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical notes."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public static StudyBuddyPro getTypicalNoteList() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        StudyBuddyPro ab \u003d new StudyBuddyPro();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        for (Note note : getTypicalNotes()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            ab.addNote(note);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static List\u003cNote\u003e getTypicalNotes() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(SAMPLE, PIPELINE, POTATO));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 3,
      "Sam-limyr": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckb055"
        },
        "content": "import seedu.address.model.StudyBuddyPro;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ckb055"
        },
        "content": "    public static StudyBuddyPro getTypicalAddressBook() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ckb055"
        },
        "content": "        StudyBuddyPro ab \u003d new StudyBuddyPro();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckb055": 3,
      "-": 73
    }
  }
]
