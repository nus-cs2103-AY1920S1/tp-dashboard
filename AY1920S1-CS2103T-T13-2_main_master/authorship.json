[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003d Mortago"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-T13-2/main[image:https://travis-ci.org/AY1920S1-CS2103T-T13-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/damithc/addressbook-level3[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-T13-2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-T13-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "https://app.netlify.com/sites/mortago/deploys[image:https://api.netlify.com/api/v1/badges/934bd64f-9128-4ac0-8e64-fa469fcbd439/deploy-status[Netlify status]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "* Mortago is a Mortuary Management System desktop application designed exclusively for Mortuary"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "managers."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "* Mortago provides an easy-to-use and intuitive Command Line Interface, as well as a compact and"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "informational dashboard that allows you to add, update, and manage bodies, fridges and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "workers. You can easily track your workflow via the dashboard at a glance and be notified of"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "critical alerts!"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "* Mortago is adapted from the AddressBook-Level3 project created by"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "https://se-education.org[SE-EDU initiative]."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 10,
      "arjavibahety": 2,
      "-": 28
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    String testFxVersion \u003d \u00274.0.16-alpha\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    implementation group: \u0027com.itextpdf\u0027, name: \u0027itextpdf\u0027, version:\u00275.5.13\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u002711.0.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-11+26\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                    \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                    \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                    \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                    \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            linkcss: true,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            experimental: true,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            sectlinks: true,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            \u0027site-name\u0027: \u0027Mortago\u0027,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103T-T13-2/main\u0027,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 61,
      "bernicechio": 1,
      "-": 152
    }
  },
  {
    "path": "config/travis/deploy_github_pages.sh",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "# Pushes files generated by Asciidoctor and associated files to gh-pages branch for commits to master branch."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "set -o errexit # exit with nonzero exit code if any line fails"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -z \"$GITHUB_TOKEN\" ]; then"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  echo \u0027GITHUB_TOKEN is not set up in Travis. Skipping deploy.\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  exit 0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "fi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "set -o nounset # exit if variable is unset"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "cd build/docs/html5"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "git init"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "git config user.name \u0027Deployment Bot (Travis)\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "git config user.email \u0027deploy@travis-ci.org\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "git config credential.helper \u0027store --file\u003d.git/credentials\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "echo \"https://${GITHUB_TOKEN}:@github.com\" \u003e .git/credentials"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "git remote add upstream \"https://github.com/${TRAVIS_REPO_SLUG}.git\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# Reset to gh-pages branch, or create orphan branch if gh-pages does not exist in remote."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if git ls-remote --exit-code --heads upstream gh-pages; then"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    git fetch --depth\u003d1 upstream gh-pages"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    git reset upstream/gh-pages"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "elif [ $? -eq 2 ]; then # exit code of git ls-remote is 2 if branch does not exist"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    git checkout --orphan gh-pages"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "else # error occurred"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    exit $?"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# Exit if there are no changes to gh-pages files."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "if changes\u003d$(git fridgeStatus --porcelain) \u0026\u0026 [ -z \"$changes\" ]; then"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \u0027No changes to GitHub Pages files; exiting.\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "git add -A ."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "git commit -m \"Rebuild pages at ${TRAVIS_COMMIT}\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "git push --quiet upstream HEAD:gh-pages"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 1,
      "-": 41
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "AddressBook - Level 3 was developed by the https://AY1920S1-CS2103T-T13-2.github.io/docs/Team.html[AY1920S1-CS2103T-T13-2] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003d\u003d\u003d Voong Yu Xuan"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "image::ambervoong.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "{empty}[https://github.com/ambervoong[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Responsibilities: Undo/Redo"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003d\u003d\u003d Bahety Arjavi"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "image::arjavibahety.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "{empty}[http://github.com/arjavibahety[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Responsibilities: Alerts"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003d\u003d\u003d Bernice Chio Hui Yin"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "image::bernicechio.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "{empty}[http://github.com/bernicechio[github]]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Responsibilities: Generate PDF"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003d\u003d\u003d Chan Dalis"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "image::dalisc.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "{empty}[http://github.com/dalisc[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Responsibilities: Sort"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003d\u003d\u003d Hong Shao Yi"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "image::shaoyi1997.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "{empty}[http://github.com/shaoyi1997[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Responsibilities: Dashboard GUI"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "bernicechio": 23,
      "-": 33
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-T13-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* *Email us* : You can also reach us at `e0324970@u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "bernicechio": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003d Mortago v2.0 - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T13-2/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "By: `Team AY1920S1-CS2103T-T13-2`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* has a need to manage a significant number of bodies"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "*Value proposition*: Mortago replaces and improves upon the traditional whiteboard system. It provides a convenient dashboard for the mortuary manager to keep track of all bodies and fridges, outstanding tasks, and alerts. Mortago unites the different aspects of a mortuary and allows the mortuary management to be more accurate in managing tasks, calculate the availability of space, and generates reports automatically."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|`* * *` |mortuary manager |keep track of all bodies and fridges in a single dashboard using the dashboard command |look out for any outstanding work and keep myself up to speed"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|`* * *` |mortuary manager |have a dynamically updated dashboard |reduce errors as compared to manually updating a whiteboard"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|`* * *` |mortuary manager |key new bodies into the system |keep track of them"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|`* * *` |mortuary manager |sort the bodies by certain characteristics |view bodies of a speciic category and generate statistics easily"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|`* * *` |mortuary manager |filter the bodies by certain characteristics |view bodies of a certain category and generate statistics easily"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|`* * *` |mortuary manager |update the status of each and every worker, body and fridge |know when (date \u0026 time) was each step of the process completed and the findings of each process (eg. cause of death)"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|`* * *` |mortuary manager |delete a worker, body and fridge |remove a worker when he quits, remove a wrong entry of the body, or remove a fridge"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|`* * *` |mortuary manager |switch between the dashboard and the detail views |view information in an appropriate format"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|`* * *` |mortuary manager |view all free and vacant fridges |keep track of the overall vacancy of the morgue"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|`* * *` |mortuary manager |view all registered bodies |view all bodies in the morgue"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|`* * *` |mortuary manager |view all registered body parts |view all body parts in the morgue"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|`* * *` |mortuary manager |view all the commands the app is capable of |look at all the commands in one go"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|`* * *` |mortuary manager |view emergency hotlines |be efficient and respond quickly to emergencies"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|`* * *` |mortuary manager |read up on the use of a specific command of the app |understand a specific command which the app offers in more detail"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|`* *` |mortuary manager |be alerted to bodies unclaimed after 24hours |know when to start the administrative process for donation to medical research"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|`* *` |mortuary manager |receive routine reports from the app automatically |need not manually write in each and every single report"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|`* *` |mortuary manager |assign workers to tasks |know who was responsible for a task"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|`* *` |mortuary manager |can undo my previous tasks |conveniently undo any wrong commands"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|`* *` |mortuary manager |redo my previous tasks |conveniently redo any undone commands"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|`* *` |mortuary manager |add new or existing workers |keep track of all the workers in the mortuary"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|`* *` |mortuary manager |add new or existing fridge |keep track of all the fridges in the mortuary"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|`* *` |mortuary manager |be able to see a history of changes |know if anything was inputted wrongly in the past"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|`* *` |mortuary manager |create mortuary bills with the app automatically |need not manually write in each and every single bill"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|`* *` |mortuary manager |view bills for past reports and individual reports |easily obtain past bills for my own reference / authorities / third party"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|`* *` |mortuary manager |archive processed cases on a regular interval |review past cases when such a need arises"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|`* *` |mortuary manager |add comments and feedback to workplace processes |review these feedback and improve on them"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|`* *` |mortuary manager |feel happy when I see a beautifully designed dashboard |keep my mood up throughout the day"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|`* *` |mortuary manager |make sure that everything is organised and in order |be praised by my higher ups"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003d\u003d\u003d Use case: View dashboard"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "1. Mortuary manager requests to view the dashboard"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "2. Mortago displays the dashboard."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "+"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003d\u003d\u003d Use case: Add body"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "1. Mortuary manager requests to add a body"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "2. Mortago adds the body into the system"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "+"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "* 1a. Duplicate body found."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "+"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "** 1a1. Mortago shows an error message."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "+"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "Use case restarts at step 1."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "* 1b. Mandatory fields are missing."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "+"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "** 1b1. Mortago shows an error message."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "+"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003d\u003d\u003d Use case: Delete body"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "dalisc"
        },
        "content": "1.  Mortuary manager requests to list bodies."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "dalisc"
        },
        "content": "2.  Mortago shows a list of bodies."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "dalisc"
        },
        "content": "3.  Mortuary manager requests to delete a specific body in the list."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "dalisc"
        },
        "content": "4.  Mortago deletes the body from the system."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "** 3a1. Mortago shows an error message."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "dalisc"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "dalisc"
        },
        "content": "\u003d\u003d\u003d Use case: Find entry"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "dalisc"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "dalisc"
        },
        "content": "1.  Mortuary manager switches to the desired view (bodies or workers)."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "dalisc"
        },
        "content": "2.  Mortuary manager specifies word to search."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "dalisc"
        },
        "content": "3.  Mortago shows a list of entries whose names matches the word."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "dalisc"
        },
        "content": "+"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "dalisc"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "dalisc"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "dalisc"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "dalisc"
        },
        "content": "* 3a. The list is empty."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "dalisc"
        },
        "content": "+"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "dalisc"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "dalisc"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "dalisc"
        },
        "content": "\u003d\u003d\u003d Use case: Filter entries"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "dalisc"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "dalisc"
        },
        "content": "1.  Mortuary manage switches to the desired view (bodies or workers)."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "dalisc"
        },
        "content": "2.  Mortuary manager specifies criteria for filter."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "dalisc"
        },
        "content": "3.  Mortago shows a list of entries that matches the criteria."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "dalisc"
        },
        "content": "+"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "dalisc"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "dalisc"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "dalisc"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "dalisc"
        },
        "content": "* 3a. The list is empty."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "dalisc"
        },
        "content": "+"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "dalisc"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "dalisc"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "dalisc"
        },
        "content": "\u003d\u003d\u003d Use case: Sort entries"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "dalisc"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "dalisc"
        },
        "content": "1.  Mortuary manage switches to the desired view (bodies or workers)."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "dalisc"
        },
        "content": "2.  Mortuary manager specifies criteria for sorting."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "dalisc"
        },
        "content": "3.  Mortago shows a list of entries sorted according to the specified criteria."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "dalisc"
        },
        "content": "+"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "dalisc"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "dalisc"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "dalisc"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "dalisc"
        },
        "content": "* 3a. The list is empty."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "dalisc"
        },
        "content": "+"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "dalisc"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003d\u003d\u003d Use case: Generate report"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "dalisc"
        },
        "content": "1.  Mortuary manager requests to generate report for a specific body."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "dalisc"
        },
        "content": "2.  Mortago creates a new PDF report with body ID as the title."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "+"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* 1a. The given body ID is invalid."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "+"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "** 1a1. Mortago shows an error message."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "+"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "dalisc"
        },
        "content": "\u003d\u003d\u003d Use case: Alert for unclaimed bodies."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "dalisc"
        },
        "content": "1.  Mortuary manager wants to be reminded of the next line of action if next of kin cannot be contacted within 24 hours."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "dalisc"
        },
        "content": "2.  Mortago maintains a record of all the alerts about unidentified and unclaimed bodies until their status is changed."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "dalisc"
        },
        "content": "3.  Mortago shows pop-up alerts after 24 hours from the point of arrival of the body in the mortuary."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "+"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "* 1a. There are no alerts"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "+"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "\u003d\u003d\u003d Use case: Undoing a previous command"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "1. Mortuary manager requests to undo the previous command."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "2. Mortago undoes the command."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "3. Mortago updates the GUI to reflect the new changes."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "+"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "* 2a. There is no command to undo."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "+"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "* 2b. An error occurred when undoing the command."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    ** 2b1. Mortago shows an error message and nothing is changed."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "+"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "\u003d\u003d\u003d Use case: Redoing an undone command"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "1. Mortuary manager requests to redo the last undone command."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "2. Mortago redoes the command."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "3. Mortago updates the GUI to reflect the new changes."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "+"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "* 2a. There is no command to redo."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "+"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "* 2b. An error occurred when undoing the command."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    ** 2b1. Mortago shows an error message and nothing is changed."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "+"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "dalisc"
        },
        "content": "[[body]] Body::"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "dalisc"
        },
        "content": "A corpse"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "dalisc"
        },
        "content": "[[command-line-interface]] Command-Line-Interface (CLI)::"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "dalisc"
        },
        "content": "A text-based user interface (UI) used to view and manage computer files"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "dalisc"
        },
        "content": "[[graphical-user-interface]] Graphical User Interface (GUI)::"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "dalisc"
        },
        "content": "An interface through which a user interacts with electronic devices such as computers, hand-held devices and other appliances. This interface uses icons, menus and other visual indicator (graphics) representations to display information and related user controls, unlike text-based interfaces, where data and commands are in text"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 34,
      "dalisc": 69,
      "arjavibahety": 14,
      "ambervoong": 48,
      "bernicechio": 68,
      "-": 409
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003d Mortago v2.0 - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ":toclevels: 3"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T13-2/main"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "By: `Team  AY1920S1-CS2103T-T13-2`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Mortago is a mortuary management system for hospitals. Mortago is optimized for efficient mortuary managers who *prefer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "to work with a Command Line Interface (CLI)* while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Mortago provides a *convenient dashboard* for the mortuary manager to keep track of all bodies and fridges, outstanding"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "tasks, and alerts. It replaces and improves upon the traditional whiteboard system. Mortago allows the mortuary management to be more accurate in managing tasks, calculating the availability of space, viewing archives and generating reports automatically."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Interested? Jump to \u003c\u003cQuick-Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "[[Quick-Start]]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".  Ensure you have `Java 11` or above installed in your Computer."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".  Download the latest `mortago.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for Mortago."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* *`list -b`* : lists all bodies"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* *`workers`* : switches to the workers tab"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* **`add -w`**`/firstName John /lastName Doe /dob 17-05-1980` :"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "adds a worker named John Doe (with his date of birth) to the management system."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "* **`delete -w`**`2` : deletes the worker with staff ID W000002"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "*Command Specification*"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "Most commands in Mortago are specified with the general format: `COMMAND_WORD -FLAG ATTRIBUTES`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "* `COMMAND_WORD` specifies what you want Mortago to do."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "** eg. `add` will tell Mortago to create an entry according to the details that you supply in the later half of the command."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "* `-FLAG` specifies what type of entry you are referring to."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "** There are 3 types of entries in Mortago: worker, body and fridge. The list below details what each of the following `-FLAG` refers to."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "*** `-w` indicates a worker"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "*** `-b` indicates a body"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "*** `-f` indicates a fridge"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "* `ATTRIBUTES` specifies the information that you need to supply for the command to execute."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "*Attributes*"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "| :bulb: What are `ATTRIBUTES`?"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "a| Attributes are properties of a worker, body or fridge that are supplied by you when executing a command."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "* e.g. `name` is an attribute for both body and worker entries."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "* The full list of attributes for each entry can be found in \u003c\u003cadd, Section 3.1.1\u003e\u003e."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "* `ATTRIBUTES` are represented with the format: `/attributeName attribute`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "** The `/attributeName` should always be given before specifying the information of the `attribute` that the entry has."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "** eg. when specifying the `/name name` of a body with the name \"John Doe\", it should be given as `/name John Doe`."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "* `ATTRIBUTES` in parentheses are optional."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    ** e.g. The following 2 commands are valid for the update command, with the abridged format: `update -b (/religion religion /status status)`."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        *** `update -b /religion Buddhist`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        *** `update -b /religion Buddhist /status released`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "* `ATTRIBUTES` specified in a command can be given in any order."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    ** e.g. The following 2 commands are valid for the update command, with the abridged format: `update -b (/religion religion /status status)`."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        *** `update -b /religion Buddhist /status released`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        *** `update -b /status released /religion Buddhist`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "* Commands with fields tagged with `...` must be supplied at least one `ATTRIBUTE` argument. For example, when `...` appears in parentheses, it means that you must supply at least one or more valid arguments."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    ** For the filter command: `filter (/attributeName attributeValue ...)`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    , these are all valid commands:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    *** `filter /firstName John` and `filter /sex F` are valid commands."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    *** `filter` is an invalid command."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "*Identification Number*"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* Some commands require a -flag while some are optional. List of flags:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    ** -b: to indicate a `body` entry"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    ** -w: to indicate a `worker` entry"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    ** -f: to indicate a `fridge` entry"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    ** -v: view the verbose description of all commands and their flags."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    *** For example, `update -b /id 1 /name John Bear`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "is a valid command that uses a flag."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "* All entries in Mortago have a unique idfentification number tagged to it."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "* The identification number is automatically generated by Mortago for your convenience."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "* Identification numbers in Mortago have the format as shown below, where `#` is a number from 0-9:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    ** `body` entries: `B\\\\####\\####`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    ** `worker` entries: `W\\\\#####`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    **  `fridge` entries: `F##`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "* If you need to supply the identification number to a command, providing the number (e.g. `20` instead of `W00020`) is sufficient."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003d\u003d\u003d Create, Read, Update and Delete Entries"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "// tag::add[]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "[[add]]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003d\u003d\u003d\u003d Add an entry: `add`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "You can add a body, worker or fridge by entering an add command that follows the format given below."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "*Format*: +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "This table details how you can craft your add command to add an entry in Mortago."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "| Purpose |  Format"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "| Add a new worker"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "a|"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "add -w"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/name name"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "/sex  sex"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "/dateJoined dateJoined"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "(/designation designation)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "(/employmentStatus employmentStatus)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "(/phoneNo phoneNumber)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "(/dob dateOfBirth)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "---"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "| Add a new body"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "a|"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "add -b"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/name name"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "/sex  sex"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/dod dateOfDeath"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/doa dateOfAdmission"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "(/dob dateOfBirth)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "(/status status)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "(/nric nricNumber)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "(/religion religion)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "(/nameNOK nameOfNextOfKin)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "(/relationship relationshipOfNextOfKin)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "(/phoneNOK phoneOfNextOfKin)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "(/cod causeOfDeath)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "(/details details)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "(/organsForDonation organsForDonation)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "(/fridgeId fridgeId)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "---"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "| Add a new fridge"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "a|"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "add -f"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Default status: Unoccupied"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "| Command | Expected Output"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "a|"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "add -w"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/name Mary"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "/phoneNo 87654321"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/sex female"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "/dateJoined 18/08/2019"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "/designation Autopsy Technician"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "---"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "| Worker added"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "a|"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "add -b"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/name John Doe"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/sex male"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "/dob 12/12/1984"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "/dod 12/08/2019 2358"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "/doa 13/08/2019 0200"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "/status contactedNOK"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "/nric S8456372C"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "/religion Catholic"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "/nameNOK Jack Smith"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "/relationship Husband"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "/phoneNOK 83462756"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "/cod Car Accident"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "/details Heavy bleeding and head injury"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "/organsForDonation NIL"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "/fridgeId 2"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "---"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "| Body added"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "a|"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "add -f"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "| Fridge added"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "// end::add[]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "// tag::update[]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "[[update]]"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "\u003d\u003d\u003d\u003d Updating an entity: `update`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "This command allows you to update the attributes of an entity."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "You have to indicate the entity type you want to update with a flag as described in \u003c\u003cFeatures\u003e\u003e."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "Format: `update -flag /id id (/attributeName attributeValue ...)`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "There are some attributes that cannot be updated once the entity is created."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "The command can specify one or more attributes, but at least one valid attribute must be provided."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "For this command, a  list of valid attributes and their command prefixes are given below:"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "| Entity | Attribute"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "| Body"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "a|"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "Name (/name)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "Sex (/sex)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "NRIC (/nric)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "Date of Birth (/dob)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "Date of Death (/dod)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "Date of Admission (/doa)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "Status (/status)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "Religion (/religion)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "Name of Next-of-Kin (/nameNOK)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "Relationship (/relationship)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "Phone Number of Next-of-Kin (/phoneNOK)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "Cause of Death (/cod)"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "Details (/details)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "Organs For Donation (/organsForDonation)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "Fridge ID (/fridgeId)"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "---"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "| Worker"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "a|"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "Phone Number (/phoneNo)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "Sex (/sex)"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "Date of Birth (/dob)"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "Date Joined (/dateJoined)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "Designation (/designation)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "Employment Status (/status)"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "---"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "| Fridge"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "a|"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "Fridge Status (/status)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "Body ID (/id)"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "A body receives an autogenerated ID when added to Mortago."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "Given that"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "| Command | Expected Output"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "`update -w /id 1 /designation Senior Autopsy Technician`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "| Status of worker 1 changed"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "| `update -b /id 1 /organsForDonation heart`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "| Organs listed for donation for body 1 changed"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "| `update -f /id 1 /status occupied`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "| Status of fridge 1 changed"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "// end::update[]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "// tag::find[]"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "dalisc"
        },
        "content": "\u003d\u003d\u003d\u003d Locating entries by name: `find`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "Finds persons whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "dalisc"
        },
        "content": "Below are some important information regarding this command:"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "dalisc"
        },
        "content": "Format: `find (keyword)...`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "Returns any person having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "// end::find[]"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a person : `delete`"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Delete a body, worker or fridge entry, indicated by its id number. +"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Format: `delete -flag  id`"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* Deletes the body, worker or fridge entry with the specified identification number."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* The identification number is automatically generated when an entity is created and is in the format `BXXXXXXXX`, `WXXXXX`, or `FXX` for a"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "body, worker or fridge entry respectively."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "X represents any digit."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* You only need to specify the number portion of the ID, without leading zeroes."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* `delete -w 1` +"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "The worker with the identification number `W00001` will be deleted."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "// end::delete"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "// tag::clear[]"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the address book. +"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "// end::clear[]"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "// tag::view[]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003d\u003d\u003d\u003d  View an entry: `view`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "View a single entry of a body, worker, fridge."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Format: `view -flag /id id`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "| Flags | Usage"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "| -b | View the body with the given ID."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "| -w | View the worker with the given ID."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "| -f | View the fridge with the given ID."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Example: `view -b /id 91` +"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "View a body with the ID B00000091."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "// end::view[]"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "// tag::list[]"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "dalisc"
        },
        "content": "\u003d\u003d\u003d\u003d List all entries: `list`"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "List all entries of bodies, workers, or fridges."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Format: `list -flag`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "| Flags | Usage"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "| -b | View all bodies."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "| -w | View all workers."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "| -f | View all fridges."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Example: `list -b` +"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Lists all bodies currently in Mortago."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "// end::list[]"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003d\u003d\u003d General"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "// tag::dashboard[]"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003d\u003d\u003d\u003d Display dashboard: `dashboard`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "Brings up the dashboard to the front of the application. +"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "The dashboard provides a compact view of all bodies, workers and fridges, as well as several important statistics that may be useful to you."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "Format: `dashboard`"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "// end::dashboard[]"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "// tag::alerts[]"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003d\u003d\u003d\u003d View alerts panel: `alerts`"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "View all alerts. Alerts are automatically generated by Mortago."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "Alerts are made when one of the following happens:"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "* Next of kin could not be contacted within 24 hours from the time of arrival of the body."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "* The body is not claimed on the specified date of collection as specified by next of kin."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "Once the mortuary manager takes the relevant action, the alert will be automatically removed."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Format: `alerts`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "// end::alerts[]"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "// tag::sortfilter[]"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "\u003d\u003d\u003d\u003d Sort all entries: `sort` `[coming in v2.0]`"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "dalisc"
        },
        "content": "Sort all displayed entries according to a given order. Only body and worker entries can be sorted."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "dalisc"
        },
        "content": "Sort only works on the entries that are in view. For example, to sort body entries, the you need to first navigate to the bodies view."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Types of ordering can be found below:"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* `name`: entries are sorted by alphabetical order of their names"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "dalisc"
        },
        "content": "* `id`: entries are sorted by their id number, in descending order (newest entry appear first)"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    ** `id asc`: entries are sorted in ascending order of id number"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    ** `id desc`: entries are sorted in descending order of id number"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "dalisc"
        },
        "content": "         *** If neither \u0027asc\u0027 or \u0027desc\u0027 qualifiers are supplied, the ordering is by default descending."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "dalisc"
        },
        "content": "* `status`: entries are sorted by their statuses in this order:"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "dalisc"
        },
        "content": "Format: `sort /order order`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* `sort /order status` +"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "All entries will be sorted and grouped according to their statuses."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "dalisc"
        },
        "content": "* `sort /order id asc` +"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "All entries will be sorted according to their id number in ascending order."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "\u003d\u003d\u003d\u003d Filter body entries entries: `filter` `[coming in v2.0]`"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Filter all entries according to the given keyword in any of an entry’s attribute. All entries with matching keyword will be displayed. Keyword is case-insensitive."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "dalisc"
        },
        "content": "All attributes of a body entry can be filtered. Please refer to \u003c\u003cSection 3.1.1\u003e\u003e for the different fields available to be filtered."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Format: `filter (/attributeName attributeValue)...`"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "dalisc"
        },
        "content": "`filter /cod Car Accident`"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "dalisc"
        },
        "content": "All body entries with car accident as the cause of death will be displayed."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "// end::sortfilter[]"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "\u003d\u003d\u003d\u003d Undoing a command: `undo`"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "This command undoes the effects of the last executed command."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Only commands that change Mortago\u0027s data will be undone."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* The last executed command was `list`. The second last executed command was `add`."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    ** When `undo` is executed, it undos `add` because `list` does not change any data."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003d\u003d\u003d\u003d Redo previous command: `redo`"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Redo the last undone command."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "// tag::exit[]"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "// end::exit[]"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003d\u003d\u003d Administrative"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003d\u003d\u003d\u003d Archive entries: `archive` `[coming in v2.0]`"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Archive old or irrelevant entries. One entry can be archived at a time, or all entries of a certain specification can be archived at once."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* `archive -flag /id id`"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* `archive -flag /status status`"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* `archive -b /id 2` +"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Archives body entry with ID 2"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* `archive -w /status inactive` +"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Archives all entries of workers who are inactive"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003d\u003d\u003d\u003d View archived entries: `archives` `[coming in v2.0]`"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Display all archived entries."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Format: `archives -flag`"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* `archives -b` +"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Display of all archived body entries, in order of archive date"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* `archives -w` +"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Display of all archived worker entries, in order of archive date"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "// tag::feedback[]"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003d\u003d\u003d\u003d Give and view feedback: `feedback`"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Give workers feedback (for the manager’s own reference), and can display a history of all feedback entered."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "`feedback /id staffID /details details`"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "`feedback`"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* `feedback /id 10 /details very meticulous` +"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Note down feedback for worker with ID W10010 with custom details"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* `feedback` +"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Display of all feedback entered"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "// end::feedback[]"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "// tag::assign[]"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003d\u003d\u003d\u003d Assign tasks to worker: `assign`"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Assign a body and task to a worker."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Format: `assign /bodyId bodyId /staffId workerId /task taskDescription`"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* `assign /bodyId 2 /staffId 1 /task send blood sample to lab for analysis` +"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Assigns worker with staff ID W00001 to body with ID B00000002 with a task description."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "// end::assign[]"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003d\u003d\u003d Document Generation"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "// tag::genReport[]"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003d\u003d\u003d\u003d Generate report on the deceased: `genReport`"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Generate an individual report from the app automatically"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Format: `genReport bodyID`"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* `genReport B123` +"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Outputs the report PDF for body ID B00000123"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "// end::genReport[]"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "// tag::report[]"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003d\u003d\u003d\u003d View past individual reports: `report`"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Receive details of a past individual report."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Format: `report bodyID`"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* `report B1` +"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Outputs the past report of body ID B00000001"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "// end::report[]"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "// tag::reports[]"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003d\u003d\u003d\u003d View past reports: `reports`"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Receive a list of past reports."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Format: `reports`"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Example: `reports` +"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Outputs the list of past reports"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "// end::reports[]"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003d\u003d\u003d Help"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "// tag::help[]"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003d\u003d\u003d\u003d View all commands: `help`"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "View a summary of all available commands and their flags. Use the `-v` flag to view the detailed description of all commands and their flags."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Format: `help -flag`"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Example: `help -v` +"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Shows a link to the User Guide."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "3.5.b. Get information about a command: `help command`"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "View the detailed description of the specified command and its flags, if any."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Format: `help command`"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Example: `help undo` +"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Shows undo command description."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "// end::help[]"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003d\u003d\u003d\u003d View help hotlines: `hotlines` `[coming in v2.0]`"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "View emergency help hotlines."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Format: `hotlines`"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Example: `hotlines` +"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Lists emergency help hotlines."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains your Mortago data."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "*Q*: How do I save my data? +"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "*A*: Mortago\u0027s data is saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* *Add* an entry: `add`"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    ** Add a new worker, body, or fridge with the"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "`add -flag (/attributeName attributeValue)`"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* *Update* an entry: `update`"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    ** Update the status of each worker, body, or fridge with the `update -flag (/attributeName attributeValue)`"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* *Find* : `find (keyword)...` +"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    ** Find entries using a keyword. +"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    Format: `find keyword`"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* *Delete* an entry: `delete`"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    ** Delete a body, worker or fridge entry, indicated by its id number. +"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    Format: `delete -flag id`"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* *View* : `view -flag /id id`"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* *List* : `list -flag`"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "* *View dashboard* : `dashboard`"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    ** Brings the dashboard to the front of the app."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* *View alerts* : `alerts`"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    ** View all alerts brought up by the app."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* *Sort* : `sort`"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    ** Sort all displayed entries according to a given order. +"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    Format: `sort /order order (/idOrder idOrder)`"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* *Filter* : `filter`"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    ** Filter all entries according to the given keyword in any of an entry’s field. +"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    Format: `filter (/field keyword)...`"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    ** Undo the last executed command. +"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    Format: `undo`"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    ** Redo the last undone command. +"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    Format: `redo`"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* *Exit*: `exit`"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* *Archive entries* : `archive` `[coming in v2.0]`"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    ** Archive old or irrelevant entries."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    Format: `archive -flag /id id`, `archive -flag /status status`"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* *View archived entries* : `archives` `[coming in v2.0]`"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    ** Display all archived entries."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    Format: `archives -flag`"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* *Give and view feedback* : `feedback`"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    * Give workers feedback and displays a history of all feedback entered."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    Format: `feedback /id staffID /notes notes`, feedback`"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* *Assign tasks* : `assign`"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    ** Assign a body and task to a worker."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    Format: `assign /bodyId bodyId /staffId workerId /task taskDescription`"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* *Generate report* : `genReport`"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    ** Generate an individual report from the app automatically"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    Format: `genReport bodyID`"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* *View a select report* : `report`"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    ** Receive details of a past individual report."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    Format: `report bodyID`"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* *View past reports* : `reports`"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    ** Receive a list of past reports."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    Format: `reports`"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* *Help summary*: `help`"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    ** Get information about the commands"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    Format: `help -flag`"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* *Help for specific command* : `help command`"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "* *Help hotlines* : `hotlines` `[coming in v2.0]`"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "*Attribute* : In Mortago, an attribute is the property of a body, fridge or worker. +"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "*Body/bodies* : a corpse +"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "*Command Line Interface (CLI)* : a text-based user interface (UI) used to view and manage computer files +"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "*Graphical User Interface (GUI)* : an interface through which a user interacts with electronic devices such as computers, hand-held devices and other appliances. This interface uses icons, menus and other visual indicator (graphics) representations to display information and related user controls, unlike text-based interfaces, where data and commands are in text"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "*Operating system (OS)* :the low-level software that supports a computer\u0027s basic functions, such as scheduling tasks and controlling peripherals"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 76,
      "dalisc": 16,
      "arjavibahety": 7,
      "ambervoong": 132,
      "bernicechio": 388,
      "-": 114
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 650;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 1250;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 2,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public static final String MESSAGE_INVALID_ENTITY_DISPLAYED_INDEX \u003d \"The entity index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    public static final String MESSAGE_NO_FLAG \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalisc"
        },
        "content": "            \"Please flag the command with \u0027-b\u0027 or \u0027-w\u0027 to indicate bodies or workers\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public static final String MESSAGE_INVALID_FLAG \u003d \"Invalid flag used! Use -b / -w / -f instead\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    public static final String MESSAGE_BODIES_LISTED_OVERVIEW \u003d \"%1$d bodies listed!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    public static final String MESSAGE_WORKERS_LISTED_OVERVIEW \u003d \"%1$d workers listed!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final String MESSAGE_INVALID_ENTITY_DISPLAYED_ID \u003d \"The identification number provided is invalid \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + \"for the selected type of entity.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String MESSAGE_INVALID_TEST_PARAMETERS \u003d \"Test parameters are invalid\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 1,
      "dalisc": 4,
      "arjavibahety": 2,
      "ambervoong": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/InvalidationListenerManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * Manages a list of {@link InvalidationListener}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class InvalidationListenerManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private final ArrayList\u003cInvalidationListener\u003e listeners \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Calls {@link InvalidationListener#invalidated(Observable)} on all added listeners."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Any modifications to the listeners list during the invocation of this method"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * will only take effect on the next invocation of this method."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * @param observable The {@code Observable} that became invalid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void callListeners(Observable observable) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // Make a copy of listeners such that any modifications to the listeners list during"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // the invocation of this method will only take effect on the next invocation of this method."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        ArrayList\u003cInvalidationListener\u003e listenersCopy \u003d new ArrayList\u003c\u003e(listeners);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        for (InvalidationListener listener : listenersCopy) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            listener.invalidated(observable);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Adds {@code listener} to the list of listeners."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * If the same listener is added more that once, then it will be notified more than once."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        requireNonNull(listener);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        listeners.add(listener);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Removes {@code listener} from the list of listeners."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * If the given listener was not previously added, then this method call is a no-op."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * If the given listener was added more than once, then only the first occurrence in the list will be removed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        requireNonNull(listener);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        listeners.remove(listener);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.fridge.Fridge;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.worker.Worker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of workers*/"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    ObservableList\u003cWorker\u003e getFilteredWorkerList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of bodies */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    ObservableList\u003cBody\u003e getFilteredBodyList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of bodies */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    ObservableList\u003cFridge\u003e getFilteredFridgeList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    //@@ shaoyi1997-reused"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    //Reused from SE-EDU Address Book Level 4"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Selected body in the filtered body list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * null if no body is selected."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * @see seedu.address.model.Model#selectedPersonProperty()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    ReadOnlyProperty\u003cBody\u003e selectedBodyProperty();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Sets the selected person in the filtered person list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedPerson(Person)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    void setSelectedBody(Body body);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    //@@ shaoyi1997-reused"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 31,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.fridge.Fridge;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.worker.Worker;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public ObservableList\u003cWorker\u003e getFilteredWorkerList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return model.getFilteredWorkerList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public ObservableList\u003cBody\u003e getFilteredBodyList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return model.getFilteredBodyList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public ObservableList\u003cFridge\u003e getFilteredFridgeList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return model.getFilteredFridgeList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    //@@ shaoyi1997-reused"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    //Reused from SE-EDU Address Book Level 4"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public ReadOnlyProperty\u003cBody\u003e selectedBodyProperty() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return model.selectedBodyProperty();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void setSelectedBody(Body body) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        model.setSelectedBody(body);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    //@@ shaoyi1997"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 32,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_JOINED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_ADMISSION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_BIRTH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_DEATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESIGNATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMPLOYMENT_STATUS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FLAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FRIDGE_ID;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME_NOK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORGANS_FOR_DONATION;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE_NOK;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE_NUMBER;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RELATIONSHIP;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RELIGION;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEX;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.notif.Notif;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * Adds a person to Mortago."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "public class AddCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an entity to Mortago.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + \"Adding a worker:\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + \"Compulsory Fields: \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + PREFIX_FLAG + \"w \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + PREFIX_NAME + \" NAME \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + PREFIX_SEX + \" SEX \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + PREFIX_DATE_JOINED + \" DATE JOINED\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + \"Optional Fields: \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + PREFIX_PHONE_NUMBER + \" PHONE \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + PREFIX_DATE_OF_BIRTH + \" DATE OF BIRTH \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + PREFIX_DESIGNATION + \" DESIGNATION \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + PREFIX_EMPLOYMENT_STATUS + \" EMPLOYMENT STATUS\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + PREFIX_NAME + \"John Doe\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + PREFIX_PHONE_NUMBER + \" 91234567 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + PREFIX_SEX + \" Male \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + PREFIX_DATE_OF_BIRTH + \" 12/12/1997 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + PREFIX_DATE_JOINED + \" 1/1/2019 \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + PREFIX_DESIGNATION + \" Technician \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + PREFIX_EMPLOYMENT_STATUS + \" Cleaning\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + \"Adding a body:\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + \"Compulsory Fields: \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + PREFIX_FLAG + \"b \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + PREFIX_NAME + \" NAME \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + PREFIX_SEX + \" SEX \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + PREFIX_DATE_OF_DEATH + \" DATE OF DEATH \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + PREFIX_DATE_OF_ADMISSION + \" DATE OF ADMISSION\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + \"Optional Fields: \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + PREFIX_NRIC + \" NRICE \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + PREFIX_RELIGION + \" RELIGION \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + PREFIX_NAME_NOK + \" NAME OF NEXT OF KIN \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + PREFIX_RELATIONSHIP + \" RELATIONSHIP OF NEXT OF KIN\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + PREFIX_PHONE_NOK + \" PHONE OF NEXT OF KIN \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + PREFIX_ORGANS_FOR_DONATION + \" ORGANS FOR DONATION\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + PREFIX_STATUS + \" BODY STATUS \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + PREFIX_FRIDGE_ID + \" FRIDGE ID\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + \"Adding a fridge: add -f\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New entity added: %1$s\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENTITY \u003d \"This entity already exists in Mortago\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final String MESSAGE_UNDO_SUCCESS \u003d \"Undid adding this entity: %1$s\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private final Entity toAdd;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Body}, {@code Worker} or {@code Fridge}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public AddCommand(Entity entity) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        requireNonNull(entity);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        toAdd \u003d entity;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (model.hasEntity(toAdd)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            toAdd.getIdNum().removeMapping();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ENTITY);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        model.addEntity(toAdd);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        if (toAdd instanceof Body) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            NotifCommand notifCommand \u003d new NotifCommand(new Notif((Body) toAdd), 5, TimeUnit.SECONDS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            notifCommand.execute(model);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        setUndoable();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        model.addExecutedCommand(this);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    //@@author ambervoong"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Undoes the effects of the AddCommand. Only can be executed if this command was previously executed before."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @return result of undoing the command."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public CommandResult undo(Model model) throws CommandException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (!(getCommandState().equals(UndoableCommandState.UNDOABLE))) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_EXECUTED_BEFORE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            model.deleteEntity(toAdd);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            throw new CommandException(MESSAGE_ENTITY_NOT_FOUND);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        setRedoable();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        model.addUndoneCommand(this);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UNDO_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 66,
      "arjavibahety": 8,
      "ambervoong": 26,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.UniqueIdentificationNumberMaps;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        UniqueIdentificationNumberMaps.clearAllEntries();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 2,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FLAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.entity.IdentificationNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.entity.fridge.Fridge;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.entity.worker.Worker;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "public class DeleteCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            + \": Deletes an entity in Mortago. \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            + PREFIX_FLAG"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            + \"b / w / f \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            + \"IDENTIFICATION NUMBER\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            + PREFIX_FLAG"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            + \"w \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            + \"5\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public static final String MESSAGE_DELETE_ENTITY_SUCCESS \u003d \"Deleted Entity: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final String MESSAGE_UNDO_SUCCESS \u003d \"Undid deleting this entity: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private final Index targetIndexNum;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private final String entityType;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private Entity entityToDelete;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public DeleteCommand(Index targetIndexNum, String entityType) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        this.targetIndexNum \u003d targetIndexNum;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        this.entityType \u003d entityType.toUpperCase();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        IdentificationNumber targetIdNum \u003d IdentificationNumber.customGenerateId(entityType,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                targetIndexNum.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        entityToDelete \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        if (entityType.equals(\"B\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            List\u003cBody\u003e lastShownList \u003d model.getFilteredBodyList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            for (Body body : lastShownList) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                if (body.getIdNum().equals(targetIdNum)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    entityToDelete \u003d body;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        } else if (entityType.equals(\"W\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            List\u003cWorker\u003e lastShownList \u003d model.getFilteredWorkerList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            for (Worker worker : lastShownList) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                if (worker.getIdNum().equals(targetIdNum)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    entityToDelete \u003d worker;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        } else if (entityType.equals(\"F\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            List\u003cFridge\u003e lastShownList \u003d model.getFilteredFridgeList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            for (Fridge fridge : lastShownList) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                if (fridge.getIdNum().equals(targetIdNum)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    entityToDelete \u003d fridge;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLAG);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        if (entityToDelete !\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            model.deleteEntity(entityToDelete);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            targetIdNum.removeMapping();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            setUndoable();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            model.addExecutedCommand(this);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_ENTITY_SUCCESS, entityToDelete));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ENTITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    //@@author ambervoong"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Undoes the effects of the DeleteCommand. Only can be executed if this command was previously executed before."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @return result of undoing the command."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public CommandResult undo(Model model) throws CommandException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (!(getCommandState().equals(UndoableCommandState.UNDOABLE))) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_EXECUTED_BEFORE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            model.addEntity(entityToDelete);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            throw new CommandException(MESSAGE_ENTITY_NOT_FOUND);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        setRedoable();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        model.addUndoneCommand(this);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UNDO_SUCCESS, entityToDelete));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals (Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                \u0026\u0026 targetIndexNum.equals(((DeleteCommand) other).targetIndexNum)); // state check"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 1,
      "arjavibahety": 57,
      "ambervoong": 29,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE_NUMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + \"[\" + PREFIX_PHONE_NUMBER + \"PHONE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + PREFIX_PHONE_NUMBER + \"91234567 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasEntity(editedPerson)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        model.setEntity(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 5,
      "-": 221
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import seedu.address.model.entity.body.BodyNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import seedu.address.model.entity.worker.WorkerNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalisc"
        },
        "content": " * Finds and lists all entries in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all entries whose names contain any of \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    private final BodyNameContainsKeywordsPredicate bodyPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    private final WorkerNameContainsKeywordsPredicate workerPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    private final String flag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    public FindCommand(List\u003cString\u003e keywords, String flag) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        this.bodyPredicate \u003d new BodyNameContainsKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        this.workerPredicate \u003d new WorkerNameContainsKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        this.flag \u003d flag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dalisc"
        },
        "content": "            if (flag.equals(\"b\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                model.updateFilteredBodyList(bodyPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                return new CommandResult("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                        String.format(Messages.MESSAGE_BODIES_LISTED_OVERVIEW, model.getFilteredBodyList().size()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dalisc"
        },
        "content": "            } else if (flag.equals(\"w\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                model.updateFilteredWorkerList(workerPredicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                return new CommandResult("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                        String.format(Messages.MESSAGE_WORKERS_LISTED_OVERVIEW, model.getFilteredWorkerList().size()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dalisc"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_NO_FLAG);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dalisc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dalisc"
        },
        "content": "            return new CommandResult(e.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                \u0026\u0026 bodyPredicate.equals(((FindCommand) other).bodyPredicate)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                \u0026\u0026 workerPredicate.equals(((FindCommand) other).workerPredicate)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalisc": 32,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GenReportCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ENTITY_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.model.entity.IdentificationNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.storage.ReportGenerator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bernicechio"
        },
        "content": " * Generates a PDF report for the specific body ID."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bernicechio"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "public class GenReportCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"genReport\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public static final String MESSAGE_GENREPORT_SUCCESS \u003d \"Generated report: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Generates a PDF report for the specific body ID.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            + \"Parameters: BODY_ID\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" B1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    private final Index targetIndexNum;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public GenReportCommand(Index targetIndexNum) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        this.targetIndexNum \u003d targetIndexNum;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        IdentificationNumber targetIdNum \u003d IdentificationNumber.customGenerateId(\"B\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "                targetIndexNum.getZeroBased());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        Body bodyToGenReport \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        List\u003cBody\u003e lastShownList \u003d model.getFilteredBodyList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        for (Body body : lastShownList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            if (body.getIdNum().equals(targetIdNum)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "                bodyToGenReport \u003d body;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        if (bodyToGenReport \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_ENTITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        ReportGenerator.generate(bodyToGenReport);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_GENREPORT_SUCCESS, targetIdNum));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "                || (other instanceof GenReportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "                \u0026\u0026 targetIndexNum.equals(((GenReportCommand) other).targetIndexNum)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bernicechio": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListBodyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BODIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "//@@author bernicechio"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bernicechio"
        },
        "content": " * Lists all bodies in Mortago to the manager."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bernicechio"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "public class ListBodyCommand extends ListCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all bodies\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        model.updateFilteredBodyList(PREDICATE_SHOW_ALL_BODIES);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "                || (other instanceof ListBodyCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bernicechio": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            + \": Lists the entity identified by the flag specified.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            + \"Parameters: FLAG (must be either b/w/f)\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" -f\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bernicechio": 4,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListFridgeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "//@@author bernicechio"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bernicechio"
        },
        "content": " * Lists all fridges in Mortago to the manager."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bernicechio"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "public class ListFridgeCommand extends ListCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all fridges\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "                || (other instanceof ListFridgeCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bernicechio": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListWorkerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_WORKERS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "//@@author bernicechio"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bernicechio"
        },
        "content": " * Lists all workers in Mortago to the manager."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bernicechio"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "public class ListWorkerCommand extends ListCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all workers\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        model.updateFilteredWorkerList(PREDICATE_SHOW_ALL_WORKERS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "                || (other instanceof ListWorkerCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bernicechio": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/NotifCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import java.util.concurrent.Executors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import java.util.concurrent.ScheduledExecutorService;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.logic.parser.utility.UpdateBodyDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.notif.Notif;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " * Notifes a user when there is an automatic change in BodyStatus."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "public class NotifCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_NOTIF \u003d \"This notif already exists in the address book\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public static final String MESSAGE_BODY_STATUS_CHANGE_FAILURE \u003d \"There was an error in updating the body status\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New notif added: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private static ScheduledExecutorService ses \u003d Executors.newScheduledThreadPool(1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private Notif toAdd;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private long period;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private TimeUnit timeUnit;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public NotifCommand(Notif notif, long period, TimeUnit timeUnit) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        this.toAdd \u003d notif;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        this.timeUnit \u003d timeUnit;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        if (model.hasNotif(toAdd)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_NOTIF);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        model.addNotif(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        startSesChangeBodyStatus();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        startSesChangeBodyStatusUi(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        // stopSes();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Updates the BodyStatus after a specified time."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public void startSesChangeBodyStatus() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        ses.schedule(toAdd.getAlert(), period, timeUnit);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Updates the UI to reflect the change in BodyStatus."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @param model refers to the ModelManager"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public void startSesChangeBodyStatusUi(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        Runnable changeUi \u003d () -\u003e Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            UpdateCommand up \u003d new UpdateCommand(toAdd.getBody().getIdNum(), new UpdateBodyDescriptor(toAdd.getBody()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            up.setUpdateFromNotif(true);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                up.execute(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            } catch (CommandException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                // todo what to throw?"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        });"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        ses.schedule(changeUi, period, timeUnit);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public void stopSes() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        ses.shutdown();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                || (other instanceof NotifCommand"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                \u0026\u0026 toAdd.equals(((NotifCommand) other).toAdd));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import java.util.EmptyStackException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "//@@author ambervoong"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " * Redoes a command that was previously undone. A RedoCommand is not considered an UndoableCommand."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final String MESSAGE_REDO_FAILURE \u003d \"There was an error redoing the previous command!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final String MESSAGE_EMPTY_REDO_HISTORY \u003d \"There are no more commands to redo!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public RedoCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UndoableCommand command \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            command \u003d model.getUndoneCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return command.redo(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        } catch (EmptyStackException | NullPointerException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            throw new CommandException(MESSAGE_EMPTY_REDO_HISTORY);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            // Add the command back to history."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            model.addExecutedCommand(command);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            throw new CommandException(MESSAGE_REDO_FAILURE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ambervoong": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "//@@ shaoyi1997-reused"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "//Reused from SE-EDU Address Book Level 4"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * Selects a body identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        + \": Selects the body identified by the index number used in the displayed body list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String MESSAGE_SELECT_BODY_SUCCESS \u003d \"Selected Body: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        List\u003cBody\u003e filteredBodyList \u003d model.getFilteredBodyList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredBodyList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ENTITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        model.setSelectedBody(filteredBodyList.get(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_BODY_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "//@@ shaoyi1997-reused"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import java.util.EmptyStackException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "//@@author ambervoong"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " * Undoes a command that was previously executed. An UndoCommand is not considered an UndoableCommand, as further undo"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " * attempts by the user would add more UndoCommands to CommandHistory instead of undoing other past commands."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " * However, an UndoCommand can be undone using a RedoCommand."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final String MESSAGE_UNDO_FAILURE \u003d \"There was an error undoing the previous command!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final String MESSAGE_EMPTY_UNDO_HISTORY \u003d \"There are no more commands to undo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public UndoCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UndoableCommand command \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            command \u003d model.getExecutedCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return command.undo(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        } catch (EmptyStackException | NullPointerException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            throw new CommandException(MESSAGE_EMPTY_UNDO_HISTORY);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            // Add the command back to history."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            model.addExecutedCommand(command);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            throw new CommandException(MESSAGE_UNDO_FAILURE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambervoong": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoableCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "//@@author ambervoong"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " * Represents a command that can be undone or redone, undoing or redoing changes to Mortago made by the command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " * Only commands that change program state can be undone"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "public abstract class UndoableCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Enumerates through the possible states of an UndoableCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public enum UndoableCommandState {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UNDOABLE, REDOABLE, PRE_EXECUTION"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final String MESSAGE_ENTITY_NOT_FOUND \u003d \"The entity with the specified identification number\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + \"was not found.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final String MESSAGE_NOT_EXECUTED_BEFORE \u003d \"Command cannot be undone before it is \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + \"successfully executed.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final String MESSAGE_NOT_UNDONE_BEFORE \u003d \"Command cannot be redone before it is successfully undone!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final String MESSAGE_UNDO_FAIL \u003d \"Command cannot be undone before it is successfully executed.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final String MESSAGE_REDO_FAIL \u003d \"Command cannot be redone before it is successfully undone!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private UndoableCommandState commandState \u003d UndoableCommandState.PRE_EXECUTION;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public abstract CommandResult undo(Model model) throws CommandException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Re-executes the command that was previously undone."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public CommandResult redo(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (getCommandState() !\u003d UndoableCommandState.REDOABLE) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return new CommandResult(MESSAGE_NOT_UNDONE_BEFORE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return execute(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void setUndoable() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        commandState \u003d UndoableCommandState.UNDOABLE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void setRedoable() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        commandState \u003d UndoableCommandState.REDOABLE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public UndoableCommandState getCommandState() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return commandState;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambervoong": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UpdateCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CAUSE_OF_DEATH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_JOINED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_BIRTH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_DEATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESIGNATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMPLOYMENT_STATUS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FLAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FRIDGE_ID;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IDENTIFICATION_NUMBER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME_NOK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORGANS_FOR_DONATION;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE_NOK;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE_NUMBER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RELATIONSHIP;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RELIGION;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEX;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.parser.utility.UpdateBodyDescriptor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.parser.utility.UpdateEntityDescriptor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.parser.utility.UpdateFridgeDescriptor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.parser.utility.UpdateWorkerDescriptor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.IdentificationNumber;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.fridge.Fridge;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.worker.Worker;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "//@@author ambervoong"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " * Updates the details of an existing body, worker, or fridge in Mortago."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "public class UpdateCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"update\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + \": Updates the details of a body, worker, or fridge, identified \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + \"by the identification number that was automatically assigned to the entity. \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + \"Existing fields will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + \"Details that were not changed in this command will remain the same as before.\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + \"Compulsory fields: \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + PREFIX_FLAG + \"w, b, or f \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + PREFIX_IDENTIFICATION_NUMBER + \"IDENTIFICATION NUMBER \\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + \"Optional fields are listed below. \\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + \"Update fields for a Body object: \\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + PREFIX_SEX + \"SEX \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + PREFIX_NRIC + \"NRIC \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + PREFIX_RELIGION + \"RELIGION \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + PREFIX_CAUSE_OF_DEATH + \"CAUSE_OF_DEATH \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + PREFIX_ORGANS_FOR_DONATION + \"ORGANS_FOR_DONATION \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + PREFIX_STATUS + \"STATUS \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + PREFIX_FRIDGE_ID + \"FRIDGE_ID \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + PREFIX_DATE_OF_BIRTH + \"DATE_OF_BIRTH \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + PREFIX_DATE_OF_DEATH + \"DATE_OF_DEATH \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + PREFIX_NAME_NOK + \"NAME_NOK \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + PREFIX_RELATIONSHIP + \"RELATIONSHIP \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + PREFIX_PHONE_NOK + \"PHONE_NOK \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + \"\\nUpdate fields for a Worker object: \\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + PREFIX_PHONE_NUMBER + \"PHONE \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + PREFIX_SEX + \"SEX \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + PREFIX_DATE_OF_BIRTH + \"DATE OF BIRTH \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + PREFIX_DATE_JOINED + \"DATE JOINED \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + PREFIX_DESIGNATION + \"DESIGNATION \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + PREFIX_EMPLOYMENT_STATUS + \"EMPLOYMENT STATUS\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + \"\\nUpdate fields for a Fridge object: \\n\" // Todo: update when fridge class is merged in."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + PREFIX_FLAG + \"b \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + PREFIX_IDENTIFICATION_NUMBER + \" 1 \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + PREFIX_NAME + \" Jane Cthulhu\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final String MESSAGE_UPDATE_ENTITY_SUCCESS \u003d \"Edited Entity: %1$s\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final String MESSAGE_UNDO_SUCCESS \u003d \"Undid updates to entity: %1$s\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private final IdentificationNumber id;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private final UpdateEntityDescriptor updateEntityDescriptor;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private Entity entity;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private UpdateEntityDescriptor originalEntityDescriptor;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    //@@author arjavibahety"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private boolean updateFromNotif;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Creates an UpdateCommand to update one or more fields in the specified {@code Body},"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * {@code Worker} or {@code Fridge}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @param id the identification number of the entity to update"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @param updateEntityDescriptor details to edit the entity with"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public UpdateCommand(IdentificationNumber id, UpdateEntityDescriptor updateEntityDescriptor) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        requireNonNull(updateEntityDescriptor);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.updateEntityDescriptor \u003d updateEntityDescriptor;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Saves the original fields of the given {@code Entity} into an UpdateEntityDescriptor."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @param entity the entity to save"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @return an UpdateEntityDescriptor with the entity\u0027s current fields"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @throws CommandException if the Entity is not a Body, Worker, or Fridge."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static UpdateEntityDescriptor saveOriginalFields(Entity entity) throws CommandException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (entity instanceof Body) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return new UpdateBodyDescriptor((Body) entity);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        } else if (entity instanceof Worker) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return new UpdateWorkerDescriptor((Worker) entity);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        } else if (entity instanceof Fridge) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return new UpdateFridgeDescriptor((Fridge) entity);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            throw new CommandException(\"Could not find original entity.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.entity \u003d getEntityFromId(model, id, updateEntityDescriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (!model.hasEntity(entity)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            throw new CommandException(MESSAGE_ENTITY_NOT_FOUND);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (updateEntityDescriptor instanceof UpdateFridgeDescriptor) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                UpdateFridgeDescriptor fridgeDescriptor \u003d (UpdateFridgeDescriptor) updateEntityDescriptor;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                getBodyFromId(model, fridgeDescriptor.getBodyId().orElse(null), fridgeDescriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            } catch (CommandException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                return new CommandResult(Messages.MESSAGE_INVALID_ENTITY_DISPLAYED_ID);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            this.originalEntityDescriptor \u003d saveOriginalFields(entity);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            model.setEntity(entity, updateEntityDescriptor.apply(entity));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            throw new CommandException(MESSAGE_ENTITY_NOT_FOUND);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        //@@author arjavibahety"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        if (!updateFromNotif) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            setUndoable();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            model.addExecutedCommand(this);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UPDATE_ENTITY_SUCCESS, entity));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Undoes the effects of the UpdateCommand. Only can be executed if this command was previously executed before."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @return result of undoing the command."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public CommandResult undo(Model model) throws CommandException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (!(getCommandState().equals(UndoableCommandState.UNDOABLE))) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_EXECUTED_BEFORE);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            model.setEntity(entity, originalEntityDescriptor.apply(entity));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            throw new CommandException(MESSAGE_ENTITY_NOT_FOUND);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        setRedoable();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        model.addUndoneCommand(this);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UNDO_SUCCESS, entity));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Entity getEntityFromId(Model model, IdentificationNumber id, UpdateEntityDescriptor descriptor)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (descriptor instanceof UpdateBodyDescriptor) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            List\u003cBody\u003e lastShownList \u003d model.getFilteredBodyList();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            for (Body body : lastShownList) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                if (body.getIdNum().equals(id)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                    return body;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        } else if (descriptor instanceof UpdateWorkerDescriptor) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            List\u003cWorker\u003e lastShownList \u003d model.getFilteredWorkerList();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            for (Worker worker : lastShownList) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                if (worker.getIdNum().equals(id)) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                    return worker;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        } else if (descriptor instanceof UpdateFridgeDescriptor) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            List\u003cFridge\u003e lastShownList \u003d model.getFilteredFridgeList();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            for (Fridge fridge : lastShownList) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                if (fridge.getIdNum().equals(id)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                    return fridge;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        throw new CommandException(Messages.MESSAGE_INVALID_ENTITY_DISPLAYED_ID);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Gets a Body in Mortago according to a given Identification Number and add it to the UpdateFridgeDescriptor, if"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * present."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @param model the current model of the program."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @param id an identification number."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @param descriptor an UpdateFridgeDescriptor containing changes to a Fridge object."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @return an UpdateFridgeDescriptor"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @throws CommandException if there is no Body object with the given identification number."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public UpdateFridgeDescriptor getBodyFromId(Model model, IdentificationNumber id, UpdateFridgeDescriptor descriptor)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (id \u003d\u003d null) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return descriptor;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        List\u003cBody\u003e lastShownList \u003d model.getFilteredBodyList();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        for (Body body : lastShownList) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            if (body.getIdNum().equals(id)) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                descriptor.setNewBody(body);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                return descriptor;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        throw new CommandException(Messages.MESSAGE_INVALID_ENTITY_DISPLAYED_ID);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    //@@author arjavibahety"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public void setUpdateFromNotif(boolean updateFromNotif) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        this.updateFromNotif \u003d updateFromNotif;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    //@@"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        if (!(other instanceof UpdateCommand)) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        UpdateCommand e \u003d (UpdateCommand) other;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return id.equals(e.id)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                \u0026\u0026 updateEntityDescriptor.equals(e.updateEntityDescriptor);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return Objects.hash(id, updateEntityDescriptor);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 4,
      "arjavibahety": 40,
      "ambervoong": 220
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/history/CommandHistory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "package seedu.address.logic.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import java.util.Deque;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.commands.UndoableCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "//@@author ambervoong"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " * Stores UndoableCommands that have been executed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final int MAX_SIZE \u003d 10;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private Deque\u003cUndoableCommand\u003e history;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public CommandHistory() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        history \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Adds an executed command to the CommandHistory deque."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @param command an executed command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void addExecutedCommand(UndoableCommand command) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (history.size() \u003e\u003d MAX_SIZE) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            history.pollLast();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        history.push(command);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Gets the last executed command from the CommandHistory deque."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @return the last executed command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public UndoableCommand getExecutedCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return history.poll();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Gets the current size of the CommandHistory deque."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @return an int representing the size of the deque."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return history.size();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambervoong": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BODY_DETAILS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CAUSE_OF_DEATH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_JOINED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_ADMISSION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_BIRTH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_DEATH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESIGNATION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMPLOYMENT_STATUS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FLAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FRIDGE_ID;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME_NOK;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORGANS_FOR_DONATION;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE_NOK;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE_NUMBER;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RELATIONSHIP;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RELIGION;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEX;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_FLAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.IdentificationNumber;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.PhoneNumber;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.Sex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.body.BodyStatus;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.body.Nric;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.body.Religion;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.fridge.Fridge;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.worker.Worker;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        ArgumentMultimap argMultimap \u003d tokenize(args);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        String flag \u003d argMultimap.getValue(PREFIX_FLAG).orElse(\"\").toLowerCase();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        boolean arePrefixesPresent;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        switch (flag) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        case \"w\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            arePrefixesPresent \u003d arePrefixesPresentWorker(argMultimap);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        case \"b\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            arePrefixesPresent \u003d arePrefixesPresentBody(argMultimap);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        case \"f\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            arePrefixesPresent \u003d true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            arePrefixesPresent \u003d arePrefixesPresentPerson(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (!arePrefixesPresent || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (flag.isEmpty()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            Name namePerson \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE_NUMBER).get());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            Person person \u003d new Person(namePerson, phone, email, address, tagList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return new AddCommand(person);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (flag.equals(\"f\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            Fridge fridge \u003d new Fridge();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return new AddCommand(fridge);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // obtain common fields between Workers and Body"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // fields are assigned null or empty when no argument is provided"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Sex sex \u003d ParserUtil.parseSex(argMultimap.getValue(PREFIX_SEX).get());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Date dateOfBirth \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE_OF_BIRTH).orElse(\"\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (flag.equals(\"w\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            PhoneNumber phone \u003d ParserUtil.parsePhoneNumber(argMultimap.getValue(PREFIX_PHONE_NUMBER).orElse(\"\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            Date dateJoined \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE_JOINED).get());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            String designation \u003d ParserUtil.parseStringFields(argMultimap.getValue(PREFIX_DESIGNATION).orElse(\"\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            String employmentStatus \u003d ParserUtil.parseStringFields(argMultimap.getValue(PREFIX_EMPLOYMENT_STATUS)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                    .orElse(\"\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            Worker worker \u003d new Worker(name, phone, sex, employmentStatus, dateOfBirth, dateJoined, designation);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return new AddCommand(worker);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        } else if (flag.equals(\"b\")) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            Date dateOfDeath \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE_OF_DEATH).orElse(\"\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            Date dateOfAdmission \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE_OF_ADMISSION).orElse(\"\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            BodyStatus status \u003d ParserUtil.parseBodyStatus(argMultimap.getValue(PREFIX_STATUS).orElse(\"\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).orElse(\"\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            Name nameNok \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME_NOK).orElse(\"\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            PhoneNumber phoneNok \u003d ParserUtil.parsePhoneNumber(argMultimap.getValue(PREFIX_PHONE_NOK).orElse(\"\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            String causeOfDeath \u003d ParserUtil.parseStringFields(argMultimap.getValue(PREFIX_CAUSE_OF_DEATH)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                    .orElse(\"\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            String details \u003d ParserUtil.parseStringFields(argMultimap.getValue(PREFIX_BODY_DETAILS).orElse(\"\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            List\u003cString\u003e organsForDonation \u003d ParserUtil.parseOrgansForDonation("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                    argMultimap.getValue(PREFIX_ORGANS_FOR_DONATION).orElse(\"\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            IdentificationNumber fridgeId \u003d ParserUtil.parseIdentificationNumber("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                    argMultimap.getValue(PREFIX_FRIDGE_ID).orElse(\"\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            Religion religion \u003d ParserUtil.parseReligion(argMultimap.getValue(PREFIX_RELIGION).orElse(\"\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            String relationship \u003d ParserUtil.parseStringFields(argMultimap.getValue(PREFIX_RELATIONSHIP)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                    .orElse(\"\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            Body body \u003d new Body(false, 1, dateOfAdmission, name, sex, nric, religion,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                    causeOfDeath, organsForDonation, status, fridgeId, dateOfBirth, dateOfDeath, nameNok, relationship,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                            phoneNok);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return new AddCommand(body);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_FLAG);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static boolean arePrefixesPresentWorker(ArgumentMultimap argumentMultimap) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return arePrefixesPresent(argumentMultimap, PREFIX_NAME, PREFIX_DATE_JOINED, PREFIX_SEX);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static boolean arePrefixesPresentBody (ArgumentMultimap argumentMultimap) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return arePrefixesPresent(argumentMultimap, PREFIX_NAME, PREFIX_DATE_OF_ADMISSION,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                PREFIX_DATE_OF_DEATH, PREFIX_SEX);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static boolean arePrefixesPresentPerson(ArgumentMultimap argumentMultimap) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return arePrefixesPresent(argumentMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE_NUMBER,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            PREFIX_EMAIL);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Tokenizes the input string for add command"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static ArgumentMultimap tokenize(String args) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE_NUMBER,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                PREFIX_SEX, PREFIX_DATE_OF_BIRTH, PREFIX_DATE_JOINED, PREFIX_DESIGNATION, PREFIX_STATUS,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                        PREFIX_DATE_OF_DEATH, PREFIX_DATE_OF_ADMISSION, PREFIX_CAUSE_OF_DEATH,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                                PREFIX_BODY_DETAILS, PREFIX_NRIC, PREFIX_RELATIONSHIP, PREFIX_RELIGION,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                                        PREFIX_NAME_NOK, PREFIX_PHONE_NOK, PREFIX_ORGANS_FOR_DONATION,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                                                PREFIX_FRIDGE_ID, PREFIX_FLAG, PREFIX_EMPLOYMENT_STATUS,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                                                        PREFIX_TAG, PREFIX_EMAIL, PREFIX_ADDRESS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 127,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.logic.commands.GenReportCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        case UpdateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return new UpdateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        case GenReportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            return new GenReportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 3,
      "ambervoong": 11,
      "bernicechio": 5,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final Prefix PREFIX_BODY \u003d new Prefix(\"/body\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final Prefix PREFIX_IDENTIFICATION_NUMBER \u003d new Prefix(\"/id\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"/name\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final Prefix PREFIX_PHONE_NUMBER \u003d new Prefix(\"/phoneNo\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final Prefix PREFIX_SEX \u003d new Prefix(\"/sex\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final Prefix PREFIX_DATE_OF_BIRTH \u003d new Prefix(\"/dob\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final Prefix PREFIX_DATE_JOINED \u003d new Prefix(\"/dateJoined\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final Prefix PREFIX_DESIGNATION \u003d new Prefix(\"/designation\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final Prefix PREFIX_EMPLOYMENT_STATUS \u003d new Prefix(\"/employmentStatus\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final Prefix PREFIX_STATUS \u003d new Prefix(\"/status\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final Prefix PREFIX_DATE_OF_DEATH \u003d new Prefix(\"/dod\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final Prefix PREFIX_DATE_OF_ADMISSION \u003d new Prefix(\"/doa\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final Prefix PREFIX_NRIC \u003d new Prefix(\"/nric\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final Prefix PREFIX_RELIGION \u003d new Prefix(\"/religion\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final Prefix PREFIX_NAME_NOK \u003d new Prefix(\"/nameNOK\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final Prefix PREFIX_PHONE_NOK \u003d new Prefix(\"/phoneNOK\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final Prefix PREFIX_CAUSE_OF_DEATH \u003d new Prefix(\"/cod\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final Prefix PREFIX_BODY_DETAILS \u003d new Prefix(\"/details\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final Prefix PREFIX_ORGANS_FOR_DONATION \u003d new Prefix(\"/organsForDonation\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final Prefix PREFIX_FRIDGE_ID \u003d new Prefix(\"/fridgeId\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final Prefix PREFIX_RELATIONSHIP \u003d new Prefix(\"/relationship\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final Prefix PREFIX_FLAG \u003d new Prefix(\"-\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    // to be deleted"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    //public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    //public static final Prefix PREFIX_PHONE_NUMBER \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 24,
      "ambervoong": 2,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FLAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "//@@author arjavibahety"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_FLAG);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        String temp \u003d argMultimap.getValue(PREFIX_FLAG).orElse(\"\").toUpperCase();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            if (temp.length() \u003e 2) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                String index \u003d temp.substring(2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                if (index.matches(\"[0-9]+\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    Index deleteEntityId \u003d Index.fromZeroBased(Integer.parseInt(temp.substring(2)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    String flag \u003d temp.charAt(0) + \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    return new DeleteCommand(deleteEntityId, flag);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                            DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                        DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 41,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FLAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        String flag \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        String[] nameKeywords \u003d new String[10];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_FLAG);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        String tokenizedFlag \u003d argMultimap.getValue(PREFIX_FLAG).orElse(\"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        if (!tokenizedFlag.equals(\"\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalisc"
        },
        "content": "            flag \u003d Character.toString(tokenizedFlag.charAt(0));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalisc"
        },
        "content": "            nameKeywords \u003d tokenizedFlag.substring(2).trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        return new FindCommand(Arrays.asList(nameKeywords), flag);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalisc": 12,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GenReportCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.logic.commands.GenReportCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "//@@author bernicechio"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bernicechio"
        },
        "content": " * Parses input bodyID and creates a new GenReportCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bernicechio"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "public class GenReportCommandParser implements Parser\u003cGenReportCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GenReportCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * and returns a GenReportCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public GenReportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            if (args.trim().length() \u003c 2 || args.trim().charAt(0) !\u003d \u0027B\u0027) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, GenReportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            String index \u003d args.trim().substring(1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            if (index.matches(\"[0-9]+\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "                Index genReportBodyId \u003d Index.fromZeroBased(Integer.parseInt(index));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "                return new GenReportCommand(genReportBodyId);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, GenReportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, GenReportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bernicechio": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FLAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.logic.commands.ListBodyCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "//import seedu.address.logic.commands.ListFridgeCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.logic.commands.ListFridgeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.logic.commands.ListWorkerCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "//@@author bernicechio"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bernicechio"
        },
        "content": " * Parses input arguments and creates a new ListCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bernicechio"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * and returns an ListCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_FLAG);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        String flag \u003d argMultimap.getValue(PREFIX_FLAG).orElse(\"\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        switch (flag) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        case \"w\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            return new ListWorkerCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        case \"b\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            return new ListBodyCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        case \"f\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            return new ListFridgeCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bernicechio": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.IdentificationNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.PhoneNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.Sex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.body.BodyStatus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.body.Nric;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.body.Religion;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.fridge.FridgeStatus;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String MESSAGE_INVALID_FLAG \u003d \"Flag is invalid.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (name.isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Parses a {@code String phone} into a {@code PhoneNumber}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * @throws ParseException if the given {@code phoneNumber} is invalid."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static PhoneNumber parsePhoneNumber(String phone) throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (phone.isEmpty()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (!PhoneNumber.isValidPhoneNumber(trimmedPhone)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            throw new ParseException(PhoneNumber.VALID_NUMBER);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return new PhoneNumber(trimmedPhone);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Parses {@code String date} into a {@code Date date}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * @throws ParseException if the given {@code String date} is invalid."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (date.isEmpty()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return format.parse(date);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        } catch (java.text.ParseException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            throw new ParseException(\"Wrong date format\"); // todo: abstract out message"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Parses {@code String sex} into a {@code Sex sex}."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * @throws ParseException if the given {@code Nric} is invalid."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static Sex parseSex(String sex) throws ParseException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        requireNonNull(sex);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        String trimmedSex \u003d sex.trim();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (Sex.isValidSex(trimmedSex)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            if (Sex.isMale(trimmedSex)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                return Sex.MALE;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                return Sex.FEMALE;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            throw new ParseException(Sex.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Parses a {@code String nric} into an {@code Nric}."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * @throws ParseException if the given {@code Nric} is invalid."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static Nric parseNric(String nric) throws ParseException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        requireNonNull(nric);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (nric.isEmpty()) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        String trimmedNric \u003d nric.trim();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (!Nric.isValidNric(trimmedNric)) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            throw new ParseException(Nric.VALID_NRIC);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return new Nric(trimmedNric);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Parses a {@code String id} into an {@code IdentificationNumber}."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * @throws ParseException if the given {@code id} is invalid."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static IdentificationNumber parseIdentificationNumber(String id) throws ParseException {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (id.isEmpty()) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        String trimmedId \u003d id.trim();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (!IdentificationNumber.isValidIdentificationNumber(trimmedId)) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            throw new ParseException(IdentificationNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return IdentificationNumber.customGenerateId(trimmedId.charAt(0) + \"\","
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                Integer.parseInt(trimmedId.substring(1)));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Parses a {@code String id} into an {@code IdentificationNumber}."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static List\u003cString\u003e parseOrgansForDonation(String stringOfOrgans) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        requireNonNull(stringOfOrgans);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (stringOfOrgans.isEmpty()) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return Arrays.asList(new String[0]);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        String trimmedOrgans \u003d stringOfOrgans.trim();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        String[] arrayOforgans \u003d trimmedOrgans.split(\"\\\\s*,\\\\s*\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return Arrays.asList(arrayOforgans);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Parses {@code String religion} to return the corresponding {@code Religion}."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static Religion parseReligion(String religion) throws ParseException {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        requireNonNull(religion);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (religion.isEmpty()) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        String trimmedReligion \u003d religion.trim();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return Religion.parseReligion(trimmedReligion);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Parses {@code String status} to return the corresponding {@code Status}."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static BodyStatus parseBodyStatus(String status) throws ParseException {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        requireNonNull(status);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        String trimmedStatus \u003d status.trim();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (status.isEmpty()) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return BodyStatus.ARRIVED;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return BodyStatus.parseBodyStatus(trimmedStatus);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    //@@author ambervoong"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Parses {@code String status} to return the corresponding {@code FridgeStatus}."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @param status a string representing the current status of the fridge"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @return FridgeStatus"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @throws ParseException if the given string does not represent a valid fridge status"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static FridgeStatus parseFridgeStatus(String status) throws ParseException {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            FridgeStatus result \u003d FridgeStatus.valueOf(status.toUpperCase());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            throw new ParseException(status + \" is not a valid FridgeStatus.\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Parses {@code String field} to return null if empty"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static String parseStringFields(String field) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (field.isEmpty()) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return field;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 143,
      "arjavibahety": 2,
      "ambervoong": 18,
      "-": 133
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SelectCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "//@@ shaoyi1997-reused"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "//Reused from SE-EDU Address Book Level 4"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * Parses input arguments and creates a new SelectCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class SelectCommandParser implements Parser\u003cSelectCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * and returns a SelectCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public SelectCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return new SelectCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "//@@ shaoyi1997-reused"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UpdateCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BODY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CAUSE_OF_DEATH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_JOINED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_BIRTH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_DEATH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESIGNATION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMPLOYMENT_STATUS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FLAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FRIDGE_ID;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IDENTIFICATION_NUMBER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME_NOK;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORGANS_FOR_DONATION;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE_NOK;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE_NUMBER;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RELATIONSHIP;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RELIGION;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEX;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.parser.utility.UpdateBodyDescriptor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.parser.utility.UpdateEntityDescriptor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.parser.utility.UpdateFridgeDescriptor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.parser.utility.UpdateWorkerDescriptor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.IdentificationNumber;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "//@@author ambervoong"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " * Parses input arguments and creates a new UpdateCommand object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "public class UpdateCommandParser implements Parser\u003cUpdateCommand\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UpdateCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * and returns an UpdateCommand object for execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public UpdateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                        PREFIX_FLAG,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                        PREFIX_IDENTIFICATION_NUMBER,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                        PREFIX_SEX,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                        PREFIX_NAME, // Start of Body Fields"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                        PREFIX_NRIC,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                        PREFIX_RELIGION,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                        PREFIX_CAUSE_OF_DEATH,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                        PREFIX_ORGANS_FOR_DONATION,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                        PREFIX_STATUS,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                        PREFIX_FRIDGE_ID,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                        PREFIX_DATE_OF_BIRTH,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                        PREFIX_DATE_OF_DEATH,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                        PREFIX_NAME_NOK,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                        PREFIX_RELATIONSHIP,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                        PREFIX_PHONE_NOK,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                    PREFIX_PHONE_NUMBER, // Worker-only Fields"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                        PREFIX_DATE_JOINED,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                        PREFIX_DESIGNATION,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                        PREFIX_EMPLOYMENT_STATUS,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                        PREFIX_BODY); // Fridge-only field"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        String flag \u003d argMultimap.getValue(PREFIX_FLAG).orElse(\"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        String idNum \u003d argMultimap.getValue(PREFIX_IDENTIFICATION_NUMBER).orElse(null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        IdentificationNumber identificationNumber;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateEntityDescriptor updateEntityDescriptor;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (idNum \u003d\u003d null || idNum.isEmpty() || idNum.chars().anyMatch(Character::isLetter)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                || Integer.parseInt(idNum) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            throw new ParseException(IdentificationNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        boolean arePrefixesPresent;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        switch (flag) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        case \"b\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            identificationNumber \u003d IdentificationNumber.customGenerateId(\"B\", Integer.parseInt(idNum));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            arePrefixesPresent \u003d arePrefixesPresent(argMultimap,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                    PREFIX_NAME,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                    PREFIX_SEX,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                    PREFIX_NRIC,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                    PREFIX_RELIGION,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                    PREFIX_CAUSE_OF_DEATH,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                    PREFIX_ORGANS_FOR_DONATION,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                    PREFIX_STATUS,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                    PREFIX_FRIDGE_ID,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                    PREFIX_DATE_OF_BIRTH,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                    PREFIX_DATE_OF_DEATH,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                    PREFIX_NAME_NOK,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                    PREFIX_RELATIONSHIP,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                    PREFIX_PHONE_NOK);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        case \"w\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            identificationNumber \u003d IdentificationNumber.customGenerateId(\"W\", Integer.parseInt(idNum));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            arePrefixesPresent \u003d arePrefixesPresent(argMultimap,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                PREFIX_PHONE_NUMBER,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                    PREFIX_SEX,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                    PREFIX_DATE_OF_BIRTH,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                    PREFIX_DATE_JOINED,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                    PREFIX_DESIGNATION,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                    PREFIX_EMPLOYMENT_STATUS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        case \"f\":"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            identificationNumber \u003d IdentificationNumber.customGenerateId(\"F\", Integer.parseInt(idNum));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            // Use /body ID instead of /id ID as /id is used for identifying the fridge already"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            arePrefixesPresent \u003d arePrefixesPresent(argMultimap, PREFIX_STATUS, PREFIX_BODY);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (!arePrefixesPresent || identificationNumber \u003d\u003d null || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // Get fields from arguments."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        switch(flag) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        case \"b\":"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            updateEntityDescriptor \u003d parseBodyFields(new UpdateBodyDescriptor(), argMultimap);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return new UpdateCommand(identificationNumber, updateEntityDescriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        case \"w\":"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            updateEntityDescriptor \u003d parseWorkerFields(new UpdateWorkerDescriptor(), argMultimap);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return new UpdateCommand(identificationNumber, updateEntityDescriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        case \"f\":"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            updateEntityDescriptor \u003d parseFridgeFields(new UpdateFridgeDescriptor(), argMultimap);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return new UpdateCommand(identificationNumber, updateEntityDescriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, \"INVALID FLAG: \\n\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                    + UpdateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Maps arguments to an UpdateBodyDescriptor. The fields are all optional, provided at least one field was"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * specified."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @param bodyDescriptor contains values for various fields in a Body."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @param argMultimap contains mappings of arguments to their prefixes."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @return an UpdateBodyDescriptor containing the new Body values."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @throws ParseException if none of the fields were changed."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private UpdateEntityDescriptor parseBodyFields(UpdateBodyDescriptor bodyDescriptor, ArgumentMultimap argMultimap)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_NAME).orElse(\"\").isEmpty()) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            bodyDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).orElse(\"\")));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_SEX).orElse(\"\").isEmpty()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            bodyDescriptor.setSex(ParserUtil.parseSex(argMultimap.getValue(PREFIX_SEX).orElse(\"\")));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_NRIC).orElse(\"\").isEmpty()) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            bodyDescriptor.setNric(ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get()));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_RELIGION).orElse(\"\").isEmpty()) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            bodyDescriptor.setReligion(ParserUtil.parseReligion(argMultimap.getValue(PREFIX_RELIGION).get()));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_CAUSE_OF_DEATH).orElse(\"\").isEmpty()) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            bodyDescriptor.setCauseOfDeath(argMultimap.getValue(PREFIX_CAUSE_OF_DEATH).get());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_ORGANS_FOR_DONATION).orElse(\"\").isEmpty()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            bodyDescriptor.setOrgansForDonation(ParserUtil.parseOrgansForDonation("
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                    argMultimap.getValue(PREFIX_ORGANS_FOR_DONATION).get()));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_STATUS).orElse(\"\").isEmpty()) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            bodyDescriptor.setBodyStatus(ParserUtil.parseBodyStatus(argMultimap.getValue(PREFIX_STATUS).get()));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_FRIDGE_ID).orElse(\"\").isEmpty()) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            bodyDescriptor.setFridgeId(ParserUtil.parseIdentificationNumber("
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                    argMultimap.getValue(PREFIX_FRIDGE_ID).get()));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_DATE_OF_BIRTH).orElse(\"\").isEmpty()) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            bodyDescriptor.setDateOfBirth(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE_OF_BIRTH).get()));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_DATE_OF_DEATH).orElse(\"\").isEmpty()) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            bodyDescriptor.setDateOfDeath(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE_OF_DEATH).get()));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_NAME_NOK).orElse(\"\").isEmpty()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            bodyDescriptor.setNextOfKin(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME_NOK).get()));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_RELATIONSHIP).orElse(\"\").isEmpty()) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            bodyDescriptor.setRelationship(argMultimap.getValue(PREFIX_RELATIONSHIP).get());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_PHONE_NOK).orElse(\"\").isEmpty()) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            bodyDescriptor.setKinPhoneNumber(ParserUtil.parsePhoneNumber(argMultimap.getValue(PREFIX_PHONE_NOK).get()));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (!bodyDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            throw new ParseException(UpdateCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return bodyDescriptor;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Maps arguments to an UpdateWorkerDescriptor. The fields are all optional, provided at least one field was"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * specified."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @param workerDescriptor contains values for various fields in a Worker."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @param argMultimap contains mappings of arguments to their prefixes."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @return an UpdateWorkerDescriptor containing the new Worker values."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @throws ParseException if none of the fields were changed."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private UpdateEntityDescriptor parseWorkerFields(UpdateWorkerDescriptor workerDescriptor,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                                                   ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_PHONE_NUMBER).orElse(\"\").isEmpty()) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            workerDescriptor.setPhone(ParserUtil.parsePhoneNumber(argMultimap.getValue(PREFIX_PHONE_NUMBER).get()));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_SEX).orElse(\"\").isEmpty()) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            workerDescriptor.setSex(ParserUtil.parseSex(argMultimap.getValue(PREFIX_SEX).orElse(\"\")));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_DATE_OF_BIRTH).orElse(\"\").isEmpty()) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            workerDescriptor.setDateOfBirth(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE_OF_BIRTH).get()));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_DATE_JOINED).orElse(\"\").isEmpty()) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            workerDescriptor.setDateJoined(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE_JOINED).get()));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_DESIGNATION).orElse(\"\").isEmpty()) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            workerDescriptor.setDesignation(argMultimap.getValue(PREFIX_DESIGNATION).get());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_EMPLOYMENT_STATUS).orElse(\"\").isEmpty()) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            workerDescriptor.setEmploymentStatus(argMultimap.getValue(PREFIX_EMPLOYMENT_STATUS).get());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (!workerDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            throw new ParseException(UpdateCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return workerDescriptor;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Maps arguments to an UpdateFridgeDescriptor. The fields are all optional, provided at least one field was"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * specified."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @param fridgeDescriptor contains values for various fields in a Fridge."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @param argMultimap contains mappings of arguments to their prefixes."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @return an UpdateFridgeDescriptor containing the new Fridge values."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @throws ParseException if none of the fields were changed."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private UpdateEntityDescriptor parseFridgeFields(UpdateFridgeDescriptor fridgeDescriptor,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                                                     ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_STATUS).orElse(\"\").isEmpty()) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            fridgeDescriptor.setFridgeStatus(ParserUtil.parseFridgeStatus(argMultimap.getValue(PREFIX_STATUS).get()));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_BODY).orElse(\"\").isEmpty()) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            String id \u003d argMultimap.getValue(PREFIX_BODY).orElse(null);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            IdentificationNumber bodyId \u003d IdentificationNumber.customGenerateId(\"B\","
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                    Integer.parseInt(id));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            fridgeDescriptor.setBodyId(bodyId);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (!fridgeDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            throw new ParseException(UpdateCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return fridgeDescriptor;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 2,
      "ambervoong": 267
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/utility/UpdateBodyDescriptor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "package seedu.address.logic.parser.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.IdentificationNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.PhoneNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.Sex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.body.BodyStatus;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.body.Nric;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.body.Religion;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "//@@author ambervoong"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " * Stores the details to update the body with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " * corresponding field value of the body."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "public class UpdateBodyDescriptor implements UpdateEntityDescriptor {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private Sex sex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private Nric nric;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private Religion religion;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private String causeOfDeath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private List\u003cString\u003e organsForDonation;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private BodyStatus bodyStatus;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private IdentificationNumber fridgeId;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private Date dateOfBirth;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private Date dateOfDeath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private Name nextOfKin;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private String relationship;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private PhoneNumber kinPhoneNumber;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public UpdateBodyDescriptor() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Makes a copy of an existing UpdateBodyDescriptor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public UpdateBodyDescriptor(UpdateBodyDescriptor toCopy) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        setName(toCopy.name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        setSex(toCopy.sex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        setNric(toCopy.nric);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        setReligion(toCopy.religion);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        setCauseOfDeath(toCopy.causeOfDeath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        setOrgansForDonation(toCopy.organsForDonation);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        setBodyStatus(toCopy.bodyStatus);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        setFridgeId(toCopy.fridgeId);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        setDateOfBirth(toCopy.dateOfBirth);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        setDateOfDeath(toCopy.dateOfDeath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        setNextOfKin(toCopy.nextOfKin);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        setRelationship(toCopy.relationship);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        setKinPhoneNumber(toCopy.kinPhoneNumber);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Makes a copy of a Body\u0027s current fields."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @param body the body to be copied."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @returns UpdateBodyDescriptor that contains the body\u0027s current fields."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public UpdateBodyDescriptor(Body body) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.name \u003d body.getName();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.sex \u003d body.getSex();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.nric \u003d body.getNric().orElse(null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.religion \u003d body.getReligion().orElse(null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.causeOfDeath \u003d body.getCauseOfDeath().orElse(null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.organsForDonation \u003d body.getOrgansForDonation().orElse(null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.bodyStatus \u003d body.getBodyStatus().orElse(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.fridgeId \u003d body.getFridgeId().orElse(null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.dateOfBirth \u003d body.getDateOfBirth().orElse(null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.dateOfDeath \u003d body.getDateOfDeath();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.nextOfKin \u003d body.getNextOfKin().orElse(null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.relationship \u003d body.getRelationship().orElse(null);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.kinPhoneNumber \u003d body.getKinPhoneNumber().orElse(null);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return CollectionUtil.isAnyNonNull(name, sex, nric, religion, causeOfDeath, organsForDonation, bodyStatus,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                fridgeId, dateOfBirth, dateOfDeath, nextOfKin, relationship, kinPhoneNumber);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Changes a {@code Body}\u0027s fields according to the descriptor to the updated values in the"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * {@code UpdateEntityDescriptor} object if they are present and uses the existing values in the body otherwise."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Entity apply(Entity entity) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assert entity !\u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body body \u003d (Body) entity;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        body.setName(this.getName().orElse(body.getName()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        body.setSex(this.getSex().orElse(body.getSex()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        body.setNric(this.getNric().orElse(body.getNric().orElse(null)));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        body.setReligion(this.getReligion().orElse(body.getReligion().orElse(null)));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        body.setCauseOfDeath(this.getCauseOfDeath().orElse(body.getCauseOfDeath().orElse(null)));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        body.setOrgansForDonation(this.getOrgansForDonation().orElse(body.getOrgansForDonation().orElse(null)));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        body.setBodyStatus(this.getBodyStatus().orElse(body.getBodyStatus().orElse(null)));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        body.setFridgeId(this.getFridgeId().orElse(body.getFridgeId().orElse(null)));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        body.setDateOfBirth(this.getDateOfBirth().orElse(body.getDateOfBirth().orElse(null)));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        body.setDateOfDeath(this.getDateOfDeath().orElse(body.getDateOfDeath()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        body.setNextOfKin(this.getNextOfKin().orElse(body.getNextOfKin().orElse(null)));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        body.setRelationship(this.getRelationship().orElse(body.getRelationship().orElse(null)));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        body.setKinPhoneNumber(this.getKinPhoneNumber().orElse(body.getKinPhoneNumber().orElse(null)));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return entity;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    // Getters and Setters"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void setName(Name name) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Optional\u003cSex\u003e getSex() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return Optional.ofNullable(sex);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void setSex(Sex sex) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.sex \u003d sex;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Optional\u003cNric\u003e getNric() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return Optional.ofNullable(nric);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void setNric(Nric nric) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Optional\u003cReligion\u003e getReligion() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return Optional.ofNullable(religion);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void setReligion(Religion religion) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.religion \u003d religion;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Optional\u003cString\u003e getCauseOfDeath() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return Optional.ofNullable(causeOfDeath);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void setCauseOfDeath(String causeOfDeath) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.causeOfDeath \u003d causeOfDeath;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Optional\u003cList\u003cString\u003e\u003e getOrgansForDonation() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return Optional.ofNullable(organsForDonation);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void setOrgansForDonation(List\u003cString\u003e organsForDonation) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.organsForDonation \u003d organsForDonation;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Optional\u003cBodyStatus\u003e getBodyStatus() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return Optional.ofNullable(bodyStatus);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void setBodyStatus(BodyStatus bodyStatus) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.bodyStatus \u003d bodyStatus;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Optional\u003cIdentificationNumber\u003e getFridgeId() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return Optional.ofNullable(fridgeId);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void setFridgeId(IdentificationNumber fridgeId) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.fridgeId \u003d fridgeId;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Optional\u003cDate\u003e getDateOfBirth() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return Optional.ofNullable(dateOfBirth);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void setDateOfBirth(Date dateOfBirth) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Optional\u003cDate\u003e getDateOfDeath() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return Optional.ofNullable(dateOfDeath);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void setDateOfDeath(Date dateOfDeath) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.dateOfDeath \u003d dateOfDeath;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Optional\u003cName\u003e getNextOfKin() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return Optional.ofNullable(nextOfKin);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void setNextOfKin(Name nextOfKin) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.nextOfKin \u003d nextOfKin;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Optional\u003cString\u003e getRelationship() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return Optional.ofNullable(relationship);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void setRelationship(String relationship) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.relationship \u003d relationship;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Optional\u003cPhoneNumber\u003e getKinPhoneNumber() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return Optional.ofNullable(kinPhoneNumber);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void setKinPhoneNumber(PhoneNumber kinPhoneNumber) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.kinPhoneNumber \u003d kinPhoneNumber;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (!(o instanceof UpdateBodyDescriptor)) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateBodyDescriptor that \u003d (UpdateBodyDescriptor) o;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return getName().equals(that.getName())"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                \u0026\u0026 getSex().equals(that.getSex())"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                \u0026\u0026 getNric().equals(that.getNric())"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                \u0026\u0026 getReligion().equals(that.getReligion())"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                \u0026\u0026 getCauseOfDeath().equals(that.getCauseOfDeath())"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                \u0026\u0026 getOrgansForDonation().equals(that.getOrgansForDonation())"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                \u0026\u0026 getBodyStatus().equals(that.getBodyStatus())"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                \u0026\u0026 getFridgeId().equals(that.getFridgeId())"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                \u0026\u0026 getDateOfBirth().equals(that.getDateOfBirth())"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                \u0026\u0026 getDateOfDeath().equals(that.getDateOfDeath())"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                \u0026\u0026 getNextOfKin().equals(that.getNextOfKin())"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                \u0026\u0026 getRelationship().equals(that.getRelationship())"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                \u0026\u0026 getKinPhoneNumber().equals(that.getKinPhoneNumber());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return Objects.hash(getName(), getSex(), getNric(), getReligion(), getCauseOfDeath(), getOrgansForDonation(),"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                getBodyStatus(), getFridgeId(), getDateOfBirth(), getDateOfDeath(), getNextOfKin(), getRelationship(),"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                getKinPhoneNumber());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambervoong": 256
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/utility/UpdateEntityDescriptor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "package seedu.address.logic.parser.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "//@@author ambervoong"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " * Stores the details to update the entity with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " * corresponding field value of the entity."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "public interface UpdateEntityDescriptor {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    boolean isAnyFieldEdited();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Changes the entity\u0027s fields according to the descriptor to the updated values in the UpdateEntityDescriptor"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * object if they are present. Uses the existing values in the entity otherwise."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    Entity apply(Entity entity);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambervoong": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/utility/UpdateFridgeDescriptor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "package seedu.address.logic.parser.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.IdentificationNumber;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.fridge.Fridge;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.fridge.FridgeStatus;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "//@@author ambervoong"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " * Stores the details to update the {@code Fridge} with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " * corresponding field value of the fridge."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "public class UpdateFridgeDescriptor implements UpdateEntityDescriptor {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private IdentificationNumber bodyId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private FridgeStatus fridgeStatus;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private Body newBody;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public UpdateFridgeDescriptor() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Makes a copy of an existing UpdateFridgeDescriptor."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public UpdateFridgeDescriptor(UpdateFridgeDescriptor toCopy) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        setBodyId(toCopy.bodyId);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        setFridgeStatus(toCopy.fridgeStatus);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        setNewBody(toCopy.newBody);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Makes a copy of a Fridge\u0027s current fields."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @param fridge the fridge to be copied."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @returns UpdateFridgeDescriptor that contains the fridge\u0027s current fields."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public UpdateFridgeDescriptor(Fridge fridge) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body body \u003d fridge.getBody();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (body !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            this.bodyId \u003d body.getIdNum();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.fridgeStatus \u003d fridge.getFridgeStatus();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.newBody \u003d body;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return CollectionUtil.isAnyNonNull(bodyId, fridgeStatus, newBody);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Entity apply(Entity entity) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assert entity !\u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Fridge fridge \u003d (Fridge) entity;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        fridge.setFridgeStatus(this.getFridgeStatus().orElse(fridge.getFridgeStatus()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        fridge.setBody(this.getNewBody().orElse(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return entity;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    // Getters and Setters"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Optional\u003cIdentificationNumber\u003e getBodyId() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return Optional.ofNullable(bodyId);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void setBodyId(IdentificationNumber bodyId) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.bodyId \u003d bodyId;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Optional\u003cFridgeStatus\u003e getFridgeStatus() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return Optional.ofNullable(fridgeStatus);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void setFridgeStatus(FridgeStatus fridgeStatus) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.fridgeStatus \u003d fridgeStatus;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Optional\u003cBody\u003e getNewBody() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return Optional.ofNullable(newBody);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void setNewBody(Body newBody) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.newBody \u003d newBody;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (!(o instanceof UpdateFridgeDescriptor)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateFridgeDescriptor that \u003d (UpdateFridgeDescriptor) o;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return getBodyId().equals(that.getBodyId())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                \u0026\u0026 getFridgeStatus().equals(that.getFridgeStatus());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return Objects.hash(getBodyId(), getFridgeStatus());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambervoong": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/utility/UpdateWorkerDescriptor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "package seedu.address.logic.parser.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.PhoneNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.Sex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.worker.Worker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "//@@author ambervoong"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " * Stores the details to update the worker with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " * corresponding field value of the worker."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "public class UpdateWorkerDescriptor implements UpdateEntityDescriptor {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private PhoneNumber phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private Sex sex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private Date dateOfBirth;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private Date dateJoined;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private String designation;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private String employmentStatus;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public UpdateWorkerDescriptor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Makes a copy of an existing UpdateWorkerDescriptor."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public UpdateWorkerDescriptor(UpdateWorkerDescriptor toCopy) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        setSex(toCopy.sex);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        setDateOfBirth(toCopy.dateOfBirth);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        setDateJoined(toCopy.dateJoined);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        setDesignation(toCopy.designation);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        setEmploymentStatus(toCopy.employmentStatus);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Makes a copy of a Worker\u0027s current fields."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @param worker the worker to be copied."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @returns UpdateWorkerDescriptor that contains the worker\u0027s current fields."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public UpdateWorkerDescriptor(Worker worker) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.sex \u003d worker.getSex();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.phone \u003d worker.getPhone().orElse(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.dateOfBirth \u003d worker.getDateOfBirth().orElse(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.dateJoined \u003d worker.getDateJoined();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.designation \u003d worker.getDesignation().orElse(null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.employmentStatus \u003d worker.getEmploymentStatus().orElse(null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return CollectionUtil.isAnyNonNull(phone, sex, dateJoined, dateOfBirth, designation, employmentStatus);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Entity apply(Entity entity) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assert entity !\u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Worker worker \u003d (Worker) entity;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        worker.setPhone(this.getPhone().orElse(worker.getPhone().orElse(null)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        worker.setSex(this.getSex().orElse(worker.getSex()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        worker.setDateOfBirth(this.getDateOfBirth().orElse(worker.getDateOfBirth().orElse(null)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        worker.setDateJoined(this.getDateJoined().orElse(worker.getDateJoined()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        worker.setDesignation(this.getDesignation().orElse(worker.getDesignation().orElse(null)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        worker.setEmploymentStatus(this.getEmploymentStatus().orElse(worker.getEmploymentStatus().orElse(null)));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return entity;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    // Getters and Setters"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Optional\u003cPhoneNumber\u003e getPhone() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void setPhone(PhoneNumber phone) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Optional\u003cSex\u003e getSex() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return Optional.ofNullable(sex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void setSex(Sex sex) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.sex \u003d sex;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Optional\u003cDate\u003e getDateOfBirth() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return Optional.ofNullable(dateOfBirth);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void setDateOfBirth(Date dateOfBirth) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Optional\u003cDate\u003e getDateJoined() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return Optional.ofNullable(dateJoined);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void setDateJoined(Date dateJoined) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.dateJoined \u003d dateJoined;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Optional\u003cString\u003e getDesignation() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return Optional.ofNullable(designation);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void setDesignation(String designation) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.designation \u003d designation;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Optional\u003cString\u003e getEmploymentStatus() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return Optional.ofNullable(employmentStatus);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void setEmploymentStatus(String employmentStatus) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.employmentStatus \u003d employmentStatus;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (!(o instanceof UpdateWorkerDescriptor)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateWorkerDescriptor that \u003d (UpdateWorkerDescriptor) o;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return getPhone().equals(that.getPhone())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                \u0026\u0026 getSex().equals(that.getSex())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                \u0026\u0026 getDateOfBirth().equals(that.getDateOfBirth())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                \u0026\u0026 getDateJoined().equals(that.getDateJoined())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                \u0026\u0026 getDesignation().equals(that.getDesignation())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                \u0026\u0026 getEmploymentStatus().equals(that.getEmploymentStatus());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return Objects.hash(getPhone(), getSex(), getDateOfBirth(), getDateJoined(), getDesignation(),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                getEmploymentStatus());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambervoong": 145
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.entity.fridge.Fridge;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.model.entity.worker.Worker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.notif.Notif;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.model.person.UniqueEntityLists;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * Duplicates are not allowed (by .isSameEntity comparison)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    private final UniqueEntityLists entities;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private final UniqueNotifsList notifs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        entities \u003d new UniqueEntityLists();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        notifs \u003d new UniqueNotifsList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Creates an AddressBook using the Entities in the {@code toBeCopied}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * Replaces the contents of the person list with {@code entities}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * {@code entities} must not contain duplicate entities."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        this.entities.setPersons(persons);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * Replaces the contents of the workers list with {@code workers}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * {@code workers} must not contain duplicate workers."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public void setWorkers(List\u003cWorker\u003e workers) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        this.entities.setWorkers(workers);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * Replaces the contents of the bodies list with {@code bodies}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * {@code bodies} must not contain duplicate bodies."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public void setBodies(List\u003cBody\u003e bodies) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        this.entities.setBodies(bodies);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Replaces the contents of the fridges list with {@code fridges}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * {@code fridges} must not contain duplicate fridges."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void setFridges(List\u003cFridge\u003e fridges) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        this.entities.setFridges(fridges);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Replaces the contents of the person list with {@code entities}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * {@code entities} must not contain duplicate entities."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public void setNotif(List\u003cNotif\u003e notifs) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        this.notifs.setNotifs(notifs);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Replaces the given notif {@code target} in the list with {@code editedNotif}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * {@code target} must exist in Mortago."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * The notif identity of {@code editedNotif} must not be the same as another existing notif in Mortago."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public void setNotif(Notif target, Notif editedNotif) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        requireNonNull(editedNotif);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        notifs.setNotif(target, editedNotif);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        setWorkers(newData.getWorkerList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        setBodies(newData.getBodyList());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        setFridges(newData.getFridgeList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * Returns true if an entity with the same identity as {@code entity} exists in Mortago."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public boolean hasEntity(Entity entity) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        requireNonNull(entity);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        return entities.contains(entity);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * Adds an entity to Mortago."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * The entity must not already exist in Mortago."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public void addEntity(Entity e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        entities.add(e);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Replaces the given entity {@code target} in the list with {@code editedEntity}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * {@code target} must exist in Mortago."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * The person identity of {@code editedEntity} must not be the same as another existing entity in Mortago."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public void setEntity(Entity target, Entity editedEntity) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        requireNonNull(editedEntity);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        entities.setEntity(target, editedEntity);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public void removeEntity(Entity key) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        entities.remove(key);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Notifies listeners that t"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * he address book has been modified."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Returns true if a notif with the same identity as {@code notif} exists in Mortago."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public boolean hasNotif(Notif notif) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        requireNonNull(notif);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return notifs.contains(notif);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Adds a notif to Mortago."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * The notif must not already exist in Mortago."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public void addNotif(Notif n) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        notifs.add(n);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public void removeNotif(Notif key) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        notifs.remove(key);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return entities.asUnmodifiableObservableListWorker().size() + \" workers\\n\""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                + entities.asUnmodifiableObservableListBody().size() + \" bodies\\n\""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                + entities.asUnmodifiableObservableListFridge().size() + \" fridges\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        return entities.asUnmodifiableObservableListPerson();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public ObservableList\u003cWorker\u003e getWorkerList() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        return entities.asUnmodifiableObservableListWorker();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public ObservableList\u003cBody\u003e getBodyList() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        return entities.asUnmodifiableObservableListBody();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public ObservableList\u003cNotif\u003e getNotifList() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return notifs.asUnmodifiableObservableListNotif();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public ObservableList\u003cFridge\u003e getFridgeList() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return entities.asUnmodifiableObservableListFridge();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "                \u0026\u0026 entities.equals(((AddressBook) other).entities));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        return entities.hashCode();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 35,
      "arjavibahety": 48,
      "bernicechio": 55,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.commands.UndoableCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.fridge.Fridge;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.worker.Worker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.notif.Notif;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    Predicate\u003cBody\u003e PREDICATE_SHOW_ALL_BODIES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    Predicate\u003cWorker\u003e PREDICATE_SHOW_ALL_WORKERS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    Predicate\u003cNotif\u003e PREDICATE_SHOW_ALL_NOTIFS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    Predicate\u003cWorker\u003e PREDICATE_SHOW_ALL_FRIDGES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Adds an executed command to the model\u0027s command history."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @param command a command that was executed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void addExecutedCommand(UndoableCommand command);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Gets the last executed UndoableCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @return the last executed command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    UndoableCommand getExecutedCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Adds an undone UndoableCommand."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @param command an UndoableCommand that was undone."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void addUndoneCommand(UndoableCommand command);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Gets the last undone UndoableCommand."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @returnthe last undone command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    UndoableCommand getUndoneCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * Returns true if an entity with the same identity as {@code entity} exists in Mortago."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    boolean hasEntity(Entity entity);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Deletes the given entity."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * The entity must exist in Mortago."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    void deleteEntity(Entity target);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Adds the given entity."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * {@code entity} must not already exist in Mortago."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    void addEntity(Entity entity);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Replaces the given entity {@code target} with {@code editedEntity}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * {@code target} must exist in Mortago."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * The entity identity of {@code editedEntity} must not be the same as another existing entity in Mortago."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    void setEntity(Entity target, Entity editedEntity);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Returns true if a notif with the same identity as {@code notif} exists in Mortago."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    boolean hasNotif(Notif notif);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Deletes the given notif."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * The notif must exist in Mortago."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    void deleteNotif(Notif target);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Adds the given notif."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * {@code notif} must not already exist in Mortago."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    void addNotif(Notif notif);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Replaces the given notif {@code target} with {@code editedNotif}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * {@code target} must exist in Mortago."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * The notif identity of {@code editedNotif} must not be the same as another existing notif in Mortago."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    void setNotif(Notif target, Notif editedNotif);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of workers*/"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    ObservableList\u003cWorker\u003e getFilteredWorkerList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of bodies */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    ObservableList\u003cBody\u003e getFilteredBodyList();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of fridges */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    ObservableList\u003cFridge\u003e getFilteredFridgeList();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of entities */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    ObservableList\u003c? extends Entity\u003e getFilteredEntityList(String entityType);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of notifs */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    ObservableList\u003cNotif\u003e getFilteredNotifList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Updates the filter of the filtered worker list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    void updateFilteredWorkerList(Predicate\u003cWorker\u003e predicate);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Updates the filter of the filtered body list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    void updateFilteredBodyList(Predicate\u003cBody\u003e predicate);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Updates the filter of the filtered notif list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    void updateFilteredNotifList(Predicate\u003cNotif\u003e predicate);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Updates the filter of the filtered fridge list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    void updateFilteredFridgeList(Predicate\u003cFridge\u003e predicate);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    //@@ shaoyi1997-reused"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    //Reused from SE-EDU Address Book Level 4"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Selected person in the filtered body list."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * null if no body is selected."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    ReadOnlyProperty\u003cBody\u003e selectedBodyProperty();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Returns the selected body in the filtered body list."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * null if no body is selected."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    Body getSelectedBody();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Sets the selected body in the filtered body list."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    void setSelectedBody(Body body);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    //@@ shaoyi1997-reused"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 55,
      "dalisc": 2,
      "arjavibahety": 32,
      "ambervoong": 26,
      "bernicechio": 7,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.commands.UndoableCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.history.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.body.exceptions.BodyNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.entity.fridge.Fridge;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.worker.Worker;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.notif.Notif;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private final FilteredList\u003cWorker\u003e filteredWorkers;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private final FilteredList\u003cBody\u003e filteredBodies;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private final FilteredList\u003cNotif\u003e filteredNotifs;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private final CommandHistory commandHistory;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private final CommandHistory undoHistory;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private final FilteredList\u003cFridge\u003e filteredFridges;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private final SimpleObjectProperty\u003cBody\u003e selectedBody \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        filteredWorkers \u003d new FilteredList\u003c\u003e(this.addressBook.getWorkerList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        filteredBodies \u003d new FilteredList\u003c\u003e(this.addressBook.getBodyList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        filteredNotifs \u003d new FilteredList\u003c\u003e(this.addressBook.getNotifList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        undoHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        filteredFridges \u003d new FilteredList\u003c\u003e(this.addressBook.getFridgeList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        filteredBodies.addListener(this::ensureSelectedBodyIsValid);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CommandHistory \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Adds a command that was executed to the top of a list of executed commands. Note that only"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * executed UndoableCommands should be in this list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @param command an UndoableCommand that was executed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void addExecutedCommand(UndoableCommand command) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        requireNonNull(command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        commandHistory.addExecutedCommand(command);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Returns the last command that was executed and added to the list of executed commands. Note that only"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * executed UndoableCommands should be in this list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @return the last executed UndoableCommand."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public UndoableCommand getExecutedCommand() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return commandHistory.getExecutedCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Adds a command that was undone to the top of a list of undone commands. Note that only"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * executed UndoableCommands should be in this list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @param command an UndoableCommand that was undone."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void addUndoneCommand(UndoableCommand command) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        undoHistory.addExecutedCommand(command);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Returns the last command that was undone and added to the list of undone commands. Note that only"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * undone UndoableCommands should be in this list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @return the last undone UndoableCommand."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public UndoableCommand getUndoneCommand() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return undoHistory.getExecutedCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public boolean hasEntity(Entity entity) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        requireNonNull(entity);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return addressBook.hasEntity(entity);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void deleteEntity(Entity target) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        addressBook.removeEntity(target);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        target.getIdNum().removeMapping();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void addEntity(Entity entity) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        addressBook.addEntity(entity);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        updateFilteredBodyList(PREDICATE_SHOW_ALL_BODIES);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        updateFilteredWorkerList(PREDICATE_SHOW_ALL_WORKERS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        //updateFilteredFridgeList(PREDICATE_SHOW_ALL_FRIDGES);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void setEntity(Entity target, Entity editedEntity) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        requireAllNonNull(target, editedEntity);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        addressBook.setEntity(target, editedEntity);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public boolean hasNotif(Notif notif) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        requireNonNull(notif);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return addressBook.hasNotif(notif);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public void deleteNotif(Notif target) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        addressBook.removeNotif(target);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public void addNotif(Notif notif) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        addressBook.addNotif(notif);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        updateFilteredNotifList(PREDICATE_SHOW_ALL_NOTIFS);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public void setNotif(Notif target, Notif editedNotif) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        requireAllNonNull(target, editedNotif);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        addressBook.setNotif(target, editedNotif);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Body List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Worker} backed by the internal list of"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public ObservableList\u003cBody\u003e getFilteredBodyList() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        return filteredBodies;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public void updateFilteredBodyList(Predicate\u003cBody\u003e predicate) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        filteredBodies.setPredicate(predicate);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Worker List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Worker} backed by the internal list of"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public ObservableList\u003cWorker\u003e getFilteredWorkerList() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return filteredWorkers;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    public void updateFilteredWorkerList(Predicate\u003cWorker\u003e predicate) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        filteredWorkers.setPredicate(predicate);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Fridge List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Fridge} backed by the internal list of"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public ObservableList\u003cFridge\u003e getFilteredFridgeList() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return filteredFridges;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public void updateFilteredFridgeList(Predicate\u003cFridge\u003e predicate) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        filteredFridges.setPredicate(predicate);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Notif List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public ObservableList\u003cNotif\u003e getFilteredNotifList() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return filteredNotifs;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public void updateFilteredNotifList(Predicate\u003cNotif\u003e predicate) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        filteredNotifs.setPredicate(predicate);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Entities List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Entities} backed by the internal list of"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public ObservableList\u003c? extends Entity\u003e getFilteredEntityList(String entityType) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        String entityTypeLowerCase \u003d entityType.toLowerCase();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (entityTypeLowerCase.equals(\"w\")) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            return filteredWorkers;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        } else if (entityTypeLowerCase.equals(\"b\")) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            return filteredBodies;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        } else if (entityTypeLowerCase.equals(\"f\")) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            return filteredFridges;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return filteredPersons;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    //@@ shaoyi1997-reused"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    //Reused from SE-EDU Address Book Level 4"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected person \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public ReadOnlyProperty\u003cBody\u003e selectedBodyProperty() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return selectedBody;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public Body getSelectedBody() {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return selectedBody.getValue();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void setSelectedBody(Body body) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (body !\u003d null \u0026\u0026 !filteredBodies.contains(body)) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            throw new BodyNotFoundException();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        selectedBody.setValue(body);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Ensures {@code selectedBody} is a valid body in {@code filteredbodies}."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private void ensureSelectedBodyIsValid(ListChangeListener.Change\u003c? extends Body\u003e change) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            if (selectedBody.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                // null is always a valid selected body, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            boolean wasSelectedBodyReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                \u0026\u0026 change.getRemoved().contains(selectedBody.getValue());"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            if (wasSelectedBodyReplaced) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                // Update selectedBody to its new value."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedBody.getValue());"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                selectedBody.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            boolean wasSelectedBodyRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                .anyMatch(removedBody -\u003e selectedBody.getValue().isSameEntity(removedBody));"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            if (wasSelectedBodyRemoved) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                // Select the body that came before it in the list,"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                // or clear the selection if there is no such body."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                selectedBody.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    //@@ shaoyi1997-reused"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        //\u0026\u0026 filteredWorkers.equals(other.filteredWorkers);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        //\u0026\u0026 filteredBodies.equals(other.filteredBodies);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        //\u0026\u0026 filteredFridges.equals(other.filteredFridges);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        //\u0026\u0026 filterdNotifs.equals(other.filteredNotifs);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 91,
      "dalisc": 1,
      "arjavibahety": 80,
      "ambervoong": 44,
      "bernicechio": 15,
      "-": 151
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.fridge.Fridge;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.worker.Worker;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.notif.Notif;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public interface ReadOnlyAddressBook extends Observable {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Returns an unmodifiable view of the workers list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * This list will not contain any duplicate workers."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    ObservableList\u003cWorker\u003e getWorkerList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Returns an unmodifiable view of the bodies list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * This list will not contain any duplicate bodies."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    ObservableList\u003cBody\u003e getBodyList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Returns an unmodifiable view of the notification list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * This list will not contain any duplicate notifications."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    ObservableList\u003cNotif\u003e getNotifList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Returns an unmodifiable view of the fridges list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * This list will not contain any duplicate fridges."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    ObservableList\u003cFridge\u003e getFridgeList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 23,
      "arjavibahety": 7,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UniqueNotifsList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.notif.Notif;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.notif.exceptions.DuplicateNotifException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.notif.exceptions.NotifNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " * Lists of notifs that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " * A notif is considered unique by comparing using {@code Notif#isSameNotif(Notif)}. As such, adding and updating"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " * of notifs uses Notif#isSameNotif(Notif) for equality so as to ensure that the notif being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " * unique in terms of identity in the UniqueNotifList. However, the removal of a notif uses Notif#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " * as to ensure that the notif with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "public class UniqueNotifsList {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private final ObservableList\u003cNotif\u003e internalListNotifs \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private final ObservableList\u003cNotif\u003e internalUnmodifiableListNotifs \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalListNotifs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Returns true if the respective list contains an equivalent notif as the given argument."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public boolean contains(Notif toCheck) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        ObservableList list;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        list \u003d internalListNotifs;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return list.stream().anyMatch(toCheck::isSameNotif);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Adds an notif to the respective list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * The notif must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public void add(Notif toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            throw new DuplicateNotifException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        internalListNotifs.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Removes the equivalent notif from the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * The notif must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public void remove(Notif toRemove) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        boolean isRemoved;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        isRemoved \u003d internalListNotifs.remove(toRemove);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        if (!isRemoved) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            throw new NotifNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Replaces the entity {@code target} in the list with {@code editedEntity}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * The entity identity of {@code editedEntity} must not be the same as another existing entity in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public void setNotif(Notif target, Notif editedNotif) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        requireAllNonNull(target, editedNotif);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        if (!target.isSameNotif(editedNotif) \u0026\u0026 contains(editedNotif)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            throw new DuplicateNotifException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        int index \u003d internalListNotifs.indexOf(target);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            throw new NotifNotFoundException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        internalListNotifs.set(index, editedNotif);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public void setNotifs(UniqueNotifsList replacement) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        internalListNotifs.setAll(replacement.internalListNotifs);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Replaces the contents of this list with {@code notifs}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * {@code notifs} must not contain duplicate notifs."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public void setNotifs(List\u003cNotif\u003e notifs) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        requireAllNonNull(notifs);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        if (!notifsAreUnique(notifs)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            throw new DuplicateNotifException();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        internalListNotifs.setAll(notifs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Returns the backing Notif list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public ObservableList\u003cNotif\u003e asUnmodifiableObservableListNotif() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return internalUnmodifiableListNotifs;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                || (other instanceof UniqueNotifsList // instanceof handles nulls"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                \u0026\u0026 (internalListNotifs.equals(((UniqueNotifsList) other).internalListNotifs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return Objects.hash(internalListNotifs);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Returns true if {@code notifs} contains only unique notifs."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private boolean notifsAreUnique(List\u003cNotif\u003e notifs) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        for (int i \u003d 0; i \u003c notifs.size() - 1; i++) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            for (int j \u003d i + 1; j \u003c notifs.size(); j++) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                if (notifs.get(i).isSameNotif(notifs.get(j))) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 143
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/Entity.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * Represents the different types of entities in Mortago."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public interface Entity {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    String OPTIONAL_FIELD_EMPTY \u003d \"No input given.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    IdentificationNumber getIdNum();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    boolean isSameEntity(Object o);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    boolean equals(Object o);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/IdentificationNumber.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "//@@author shaoyi1997"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.fridge.Fridge;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.worker.Worker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * Represents the ID number of each entity."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * Guarantees: immutable, unique ID number will be generated from within the class"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class IdentificationNumber {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        \"IdentificationNumber should have either of the following formats:\\n\" + \"- B########\\n\" + \"- W#####\" + \"- F##\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final String ID_PREFIX_BODY \u003d \"B\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final String ID_PREFIX_WORKER \u003d \"W\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final String ID_PREFIX_FRIDGE \u003d \"F\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static UniqueIdentificationNumberMaps uniqueIds \u003d new UniqueIdentificationNumberMaps();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private int idNum;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private String typeOfEntity;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private boolean isTestId \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    protected IdentificationNumber(Entity entity) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        requireNonNull(entity);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        idNum \u003d uniqueIds.addEntity(entity);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (entity instanceof Worker) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            typeOfEntity \u003d \"W\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        } else if (entity instanceof Body) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            typeOfEntity \u003d \"B\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            typeOfEntity \u003d \"F\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private IdentificationNumber(String typeOfEntity, int idNum, boolean isTestId) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        this.typeOfEntity \u003d typeOfEntity;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        this.idNum \u003d idNum;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        this.isTestId \u003d isTestId;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static IdentificationNumber generateNewBodyId(Body body) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return new IdentificationNumber(body);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static IdentificationNumber generateNewWorkerId(Worker worker) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return new IdentificationNumber(worker);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static IdentificationNumber generateNewFridgeId(Fridge fridge) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return new IdentificationNumber(fridge);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static IdentificationNumber customGenerateId(String typeOfEntity, int idNum) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return new IdentificationNumber(typeOfEntity, idNum, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static IdentificationNumber customGenerateTestId(String typeOfEntity, int idNum) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return new IdentificationNumber(typeOfEntity, idNum, true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static boolean isValidIdPrefix (String prefix) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return prefix.equalsIgnoreCase(ID_PREFIX_BODY) || ("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                prefix.equalsIgnoreCase(ID_PREFIX_FRIDGE) || prefix.equalsIgnoreCase(ID_PREFIX_WORKER));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Checks if given {@code String id} is a valid identification number."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static boolean isValidIdentificationNumber(String id) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        int idLength \u003d id.length();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (idLength \u003c 3) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        String idPrefix \u003d id.charAt(0) + \"\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (isValidIdPrefix(idPrefix)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            int numberLength \u003d idLength - 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            switch (idPrefix) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            case ID_PREFIX_BODY:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                return numberLength \u003d\u003d 8;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            case ID_PREFIX_WORKER:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                return numberLength \u003d\u003d 5;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            case ID_PREFIX_FRIDGE:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                return numberLength \u003d\u003d 2;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public int getIdNum() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return idNum;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        String paddedId;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        switch (typeOfEntity) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        case ID_PREFIX_BODY:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            paddedId \u003d String.format(\"%08d\", idNum);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        case ID_PREFIX_WORKER:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            paddedId \u003d String.format(\"%05d\", idNum);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        case ID_PREFIX_FRIDGE:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            paddedId \u003d String.format(\"%02d\", idNum);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            paddedId \u003d \"Invalid ID\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return typeOfEntity + paddedId;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Removes the mapping of the Id Number to its entity in the respective UniqueEntityList."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void removeMapping() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        switch (typeOfEntity) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        case ID_PREFIX_BODY:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            uniqueIds.removeBodyId(idNum);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        case ID_PREFIX_WORKER:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            uniqueIds.removeWorkerId(idNum);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        case ID_PREFIX_FRIDGE:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            uniqueIds.removeFridgeId(idNum);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            System.out.println(\"Invalid ID Prefix.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        IdentificationNumber that \u003d (IdentificationNumber) o;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return idNum \u003d\u003d that.idNum \u0026\u0026 typeOfEntity.equals(that.typeOfEntity);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return Objects.hash(typeOfEntity + idNum);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 159
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/PhoneNumber.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "//@@author ambervoong"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " * Represents a phone number in Mortago."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhoneNumber(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "public class PhoneNumber {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final String VALID_NUMBER \u003d \"A valid phone number contains exactly 8 digits only.\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + \"The country calling code is omitted and assumed to be +65. The first digit should be \u00278\u0027 or \u00279\u0027.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public final String phoneNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public PhoneNumber(String phoneNumber) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        requireNonNull(phoneNumber);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        checkArgument(isValidPhoneNumber(phoneNumber), VALID_NUMBER);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.phoneNumber \u003d phoneNumber;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public String getPhoneNumber() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return phoneNumber;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Returns if an object is equal to this phone number. Two PhoneNumber objects are equal"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * if their phoneNumber Strings are equal. A null object is not considered equal."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @param o Any object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @return a boolean representing the equality of this and o."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        PhoneNumber that \u003d (PhoneNumber) o;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return phoneNumber.equals(that.phoneNumber);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return Objects.hash(phoneNumber);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Checks if a phone number is a valid Singaporean number. A valid phone number contains exactly 8 digits only."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * The country calling code is omitted and assumed to be +65. The first digit should be \u00278\u0027 or \u00279\u0027."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static boolean isValidPhoneNumber(String phoneNumber) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (phoneNumber.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        boolean isLengthEight \u003d phoneNumber.length() \u003d\u003d 8;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        boolean isFirstDigitCorrect \u003d (phoneNumber.charAt(0) \u003d\u003d \u00278\u0027) || (phoneNumber.charAt(0) \u003d\u003d \u00279\u0027);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        String regex \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(regex);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        boolean isDigits \u003d (pattern.matcher(phoneNumber).matches());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return isLengthEight \u0026\u0026 isDigits \u0026\u0026 isFirstDigitCorrect;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return getPhoneNumber();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ambervoong": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/Sex.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " * Enumerates sex."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "public enum Sex {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    MALE, FEMALE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        \"Sex should either be \\\"male\\\" or \\\"female\\\".\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Checks if {@code String sex} is female."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static boolean isMale(String sex) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return sex.equalsIgnoreCase(\"male\") || sex.equalsIgnoreCase(\"m\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Checks if {@code String sex} is male."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static boolean isFemale(String sex) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return sex.equalsIgnoreCase(\"female\") || sex.equalsIgnoreCase(\"f\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Checks if {@code String sex} is a valid sex."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static boolean isValidSex(String sex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (isMale(sex) || isFemale(sex)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 29,
      "ambervoong": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/UniqueIdentificationNumberMaps.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.fridge.Fridge;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.worker.Worker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * Maps of unique Identification Numbers for each Entity."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class UniqueIdentificationNumberMaps {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static HashMap\u003cInteger, Worker\u003e uniqueWorkerMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static HashMap\u003cInteger, Body\u003e uniqueBodyMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static HashMap\u003cInteger, Fridge\u003e uniqueFridgeMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Adds the {@code entity} to the respective map and returns the identification number assigned."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static Integer addEntity(Entity entity) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assert(entity !\u003d null);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (entity instanceof Worker) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return putWorker((Worker) entity);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        } else if (entity instanceof Body) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return putBody((Body) entity);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return putFridge((Fridge) entity);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Adds the {@code worker} into the Map at an empty id or the next largest id."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static Integer putWorker(Worker worker) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Set\u003cInteger\u003e keys \u003d uniqueWorkerMap.keySet();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        int numOfKeys \u003d keys.size();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        for (int id \u003d 1; id \u003c\u003d numOfKeys; id++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            if (uniqueWorkerMap.get(id) \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                uniqueWorkerMap.put(id, worker);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                return id;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        int newId \u003d numOfKeys + 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uniqueWorkerMap.put(newId, worker);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return newId;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Adds the {@code fridge} into the Map at an empty id or the next largest id."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static Integer putFridge(Fridge fridge) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Set\u003cInteger\u003e keys \u003d uniqueFridgeMap.keySet();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        int numOfKeys \u003d keys.size();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        for (int id \u003d 1; id \u003c\u003d numOfKeys; id++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            if (uniqueFridgeMap.get(id) \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                uniqueFridgeMap.put(id, fridge);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                return id;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        int newId \u003d numOfKeys + 1;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uniqueFridgeMap.put(newId, fridge);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return newId;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Adds the {@code body} into the Map at an empty id or the next largest id."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static Integer putBody(Body body) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Set\u003cInteger\u003e keys \u003d uniqueBodyMap.keySet();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        System.out.println(keys);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        int numOfKeys \u003d keys.size();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        for (int id \u003d 1; id \u003c\u003d numOfKeys; id++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            if (uniqueBodyMap.get(id) \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                uniqueBodyMap.put(id, body);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                return id;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        int newId \u003d numOfKeys + 1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uniqueBodyMap.put(newId, body);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return newId;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public boolean containsWorkerId(int id) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return uniqueWorkerMap.containsKey(id);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public boolean containsBodyId(int id) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return uniqueBodyMap.containsKey(id);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public boolean containsFridgeId(int id) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return uniqueFridgeMap.containsKey(id);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void removeWorkerId(int id) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uniqueWorkerMap.remove(id);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void removeBodyId(int id) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uniqueBodyMap.remove(id);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void removeFridgeId(int id) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uniqueFridgeMap.remove(id);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Clears all mappings of id to entity."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static void clearAllEntries() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uniqueFridgeMap.clear();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uniqueBodyMap.clear();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uniqueWorkerMap.clear();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/body/Body.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "package seedu.address.model.entity.body;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.IdentificationNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.PhoneNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.Sex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "//@@author ambervoong"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " * Represents a Body in Mortago."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " * Guarantees: dateofAdmission and bodyIdNum is guaranteed to be present."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "public class Body implements Entity {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private final IdentificationNumber bodyIdNum;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private final Date dateOfAdmission;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    // Identity fields."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private Sex sex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private Optional\u003cNric\u003e nric;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private Optional\u003cReligion\u003e religion;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private Optional\u003cString\u003e causeOfDeath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private Optional\u003cList\u003cString\u003e\u003e organsForDonation;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private Optional\u003cBodyStatus\u003e bodyStatus;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private Optional\u003cIdentificationNumber\u003e fridgeId;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private Optional\u003cDate\u003e dateOfBirth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private Date dateOfDeath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    // Next of kin details"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private Optional\u003cName\u003e nextOfKin;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private Optional\u003cString\u003e relationship;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private Optional\u003cPhoneNumber\u003e kinPhoneNumber;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Body(Date dateOfAdmission) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.bodyIdNum \u003d IdentificationNumber.generateNewBodyId(this);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.dateOfAdmission \u003d dateOfAdmission;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Body(boolean isTestUnit, int identificationNumber, Date dateOfAdmission, Name name, Sex sex, Nric nric,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                Religion religion, String causeOfDeath, List\u003cString\u003e organsForDonation, BodyStatus bodyStatus,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                IdentificationNumber fridgeId, Date dateOfBirth, Date dateOfDeath, Name nextOfKin,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                String relationship, PhoneNumber kinPhoneNumber) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (isTestUnit) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            this.bodyIdNum \u003d IdentificationNumber.customGenerateTestId(\"B\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                    identificationNumber);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            this.bodyIdNum \u003d IdentificationNumber.generateNewBodyId(this);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.dateOfAdmission \u003d dateOfAdmission;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.sex \u003d sex;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.nric \u003d Optional.ofNullable(nric);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.religion \u003d Optional.ofNullable(religion);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.causeOfDeath \u003d Optional.ofNullable(causeOfDeath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.organsForDonation \u003d Optional.ofNullable(organsForDonation);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.bodyStatus \u003d Optional.ofNullable(bodyStatus);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.fridgeId \u003d Optional.ofNullable(fridgeId);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.dateOfBirth \u003d Optional.ofNullable(dateOfBirth);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.dateOfDeath \u003d dateOfDeath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.nextOfKin \u003d Optional.ofNullable(nextOfKin);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.relationship \u003d Optional.ofNullable(relationship);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.kinPhoneNumber \u003d Optional.ofNullable(kinPhoneNumber);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    // Getters and Setters"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public IdentificationNumber getIdNum() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return bodyIdNum;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void setName(Name name) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Sex getSex() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return sex;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void setSex(Sex sex) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.sex \u003d sex;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Date getDateOfAdmission() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return dateOfAdmission;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Optional\u003cDate\u003e getDateOfBirth() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return dateOfBirth;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void setDateOfBirth(Date dateOfBirth) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.dateOfBirth \u003d Optional.ofNullable(dateOfBirth);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Date getDateOfDeath() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return dateOfDeath;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void setDateOfDeath(Date dateOfDeath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.dateOfDeath \u003d dateOfDeath;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Optional\u003cNric\u003e getNric() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return nric;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void setNric(Nric nric) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.nric \u003d Optional.ofNullable(nric);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Optional\u003cReligion\u003e getReligion() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return religion;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void setReligion(Religion religion) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.religion \u003d Optional.ofNullable(religion);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Optional\u003cName\u003e getNextOfKin() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return nextOfKin;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void setNextOfKin(Name nextOfKin) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.nextOfKin \u003d Optional.ofNullable(nextOfKin);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Optional\u003cString\u003e getRelationship() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return relationship;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void setRelationship(String relationship) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.relationship \u003d Optional.ofNullable(relationship);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Optional\u003cPhoneNumber\u003e getKinPhoneNumber() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return kinPhoneNumber;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void setKinPhoneNumber(PhoneNumber kinPhoneNumber) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.kinPhoneNumber \u003d Optional.ofNullable(kinPhoneNumber);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Optional\u003cString\u003e getCauseOfDeath() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return causeOfDeath;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void setCauseOfDeath(String causeOfDeath) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.causeOfDeath \u003d Optional.ofNullable(causeOfDeath);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Optional\u003cList\u003cString\u003e\u003e getOrgansForDonation() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return organsForDonation;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void setOrgansForDonation(List\u003cString\u003e organsForDonation) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.organsForDonation \u003d Optional.ofNullable(organsForDonation);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Optional\u003cBodyStatus\u003e getBodyStatus() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return bodyStatus;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void setBodyStatus(BodyStatus bodyStatus) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.bodyStatus \u003d Optional.ofNullable(bodyStatus);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Optional\u003cIdentificationNumber\u003e getFridgeId() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return fridgeId;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void setFridgeId(IdentificationNumber fridgeId) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.fridgeId \u003d Optional.ofNullable(fridgeId);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Returns whether another object is equal to this object. Equality is defined as having identical attributes. Null"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * objects are not considered equal."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @param o An object."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @return whether the object is equal to this object."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body body \u003d (Body) o;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return getDateOfAdmission().equals(body.getDateOfAdmission())"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                \u0026\u0026 getName().equals(body.getName())"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                \u0026\u0026 getSex().equals(body.getSex())"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                \u0026\u0026 getNric().equals(body.getNric())"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                \u0026\u0026 getReligion().equals(body.getReligion())"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                \u0026\u0026 getCauseOfDeath().equals(body.getCauseOfDeath())"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                \u0026\u0026 getOrgansForDonation().equals(body.getOrgansForDonation())"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                \u0026\u0026 getBodyStatus().equals(body.getBodyStatus())"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                \u0026\u0026 getFridgeId().equals(body.getFridgeId())"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                \u0026\u0026 getDateOfBirth().equals(body.getDateOfBirth())"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                \u0026\u0026 getDateOfDeath().equals(body.getDateOfDeath())"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                \u0026\u0026 getNextOfKin().equals(body.getNextOfKin())"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                \u0026\u0026 getRelationship().equals(body.getRelationship())"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                \u0026\u0026 getKinPhoneNumber().equals(body.getKinPhoneNumber());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return Objects.hash(getIdNum(), getDateOfAdmission(), getName(), getSex(), getNric(),"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                getReligion(), getCauseOfDeath(), getOrgansForDonation(), getBodyStatus(), getFridgeId(),"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                getDateOfBirth(), getDateOfDeath(), getNextOfKin(), getRelationship(), getKinPhoneNumber());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Returns whether an object is equal to this body. The definition of equality is relaxed here to only include"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Nric."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @param o An object."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @return whether the object is equal to this object."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public boolean isSameBody(Object o) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body body \u003d (Body) o;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return getNric().equals(body.getNric())"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            \u0026\u0026 getName().equals(body.getName());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public boolean isSameEntity(Object o) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return isSameBody(o);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Returns whether an object is equal to this body. The definition of equality is relaxed here to only include"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * bodyIdNum."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @param o An object."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @return whether the object is equal to this object."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public boolean isSameBodyIdNum(Object o) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body body \u003d (Body) o;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return this.getIdNum().equals(((Body) o).getIdNum());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .append(\" Sex: \")"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .append(getSex())"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .append(\" NRIC: \")"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .append(nric.isPresent() ? nric.get() : OPTIONAL_FIELD_EMPTY)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .append(\" Religion: \")"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .append(religion.isPresent() ? religion.get() : OPTIONAL_FIELD_EMPTY)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .append(\" Date of Admission: \")"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .append(dateOfAdmission)"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .append(\" Date of Death: \")"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .append(dateOfDeath)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .append(\" Cause of Death: \")"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .append(causeOfDeath.isPresent() ? causeOfDeath.get() : OPTIONAL_FIELD_EMPTY)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .append(\" Date of Birth: \")"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .append(dateOfBirth.isPresent() ? dateOfBirth.get() : OPTIONAL_FIELD_EMPTY)"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .append(\" Organs for Donation: \")"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .append(organsForDonation.isPresent() ? organsForDonation.get() : OPTIONAL_FIELD_EMPTY)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .append(\" Fridge ID: \")"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .append(fridgeId.isPresent() ? fridgeId.get() : OPTIONAL_FIELD_EMPTY)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .append(\" Body Status: \")"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .append(bodyStatus.isPresent() ? bodyStatus.get() : OPTIONAL_FIELD_EMPTY)"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .append(\" Name of Next Of Kin: \")"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .append(nextOfKin.isPresent() ? nextOfKin.get() : OPTIONAL_FIELD_EMPTY)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .append(\" Relationship of Next of Kin: \")"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .append(relationship.isPresent() ? relationship.get() : OPTIONAL_FIELD_EMPTY)"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .append(\" Phone of Next of Kin: \")"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .append(kinPhoneNumber.isPresent() ? kinPhoneNumber.get() : OPTIONAL_FIELD_EMPTY);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 3,
      "ambervoong": 293
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/body/BodyNameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalisc"
        },
        "content": "package seedu.address.model.entity.body;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalisc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalisc"
        },
        "content": " * Tests that a {@code Entity}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalisc"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalisc"
        },
        "content": "public class BodyNameContainsKeywordsPredicate implements Predicate\u003cBody\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    public BodyNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    public boolean test(Body body) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(body.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                || (other instanceof BodyNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                \u0026\u0026 keywords.equals(((BodyNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalisc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalisc": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/body/BodyStatus.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "package seedu.address.model.entity.body;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "//@@author ambervoong"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " * Enumerates all the possible states a body undergoes in the mortuary."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "public enum BodyStatus {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    ARRIVED, PENDING_IDENTIFICATION, PENDING_CLAIM, CLAIMED, DONATED, PENDING_POLICE_REPORT, PENDING_CORONER_APPROVAL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Parses {@code String status} to return the corresponding {@code Status}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static BodyStatus parseBodyStatus(String status) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assert(status !\u003d null);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        String statusLowerCaps \u003d status.toLowerCase();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        switch(statusLowerCaps) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        case \"arrived\":"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return ARRIVED;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        case \"pending identification\":"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return PENDING_IDENTIFICATION;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        case \"pending claim\":"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return PENDING_CLAIM;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        case \"pending coroner approval\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return PENDING_CORONER_APPROVAL;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        case \"pending police report\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return PENDING_POLICE_REPORT;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        case \"claimed\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return CLAIMED;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        case \"donated\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return DONATED;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            throw new ParseException(\"Invalid Body Status: \" + statusLowerCaps);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambervoong": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/body/Nric.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "package seedu.address.model.entity.body;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "//@@author ambervoong"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " * Represents a National Registration Identity Card number in Mortago."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidNric(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "public class Nric {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final String VALID_NRIC \u003d \"A valid NRIC number has 9 digits in total, with a letter at the start and\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + \" end. Singaporeans either have the starting alphabets \u0027S\u0027 or \u0027T\u0027 while foreigners have the alphabets \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + \"F\u0027 or \u0027G\u0027. The ending character of each NRIC number can be any alphabet.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private final String nric;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Nric(String nric) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        requireNonNull(nric);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        checkArgument(isValidNric(nric), VALID_NRIC);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public String getNric() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return nric;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Returns if an object is equal to this NRIC. Two Nric objects are equal"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * if their nric Strings are equal. A null object is not considered equal."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @param o Any object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @return a boolean representing the equality of this and o."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Nric nric1 \u003d (Nric) o;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return nric.equals(nric1.getNric());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return Objects.hash(nric);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Checks if a given string is a valid NRIC number. A valid NRIC number has 9 digits in total, with a letter at the"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * start and end. Singaporeans either have the starting alphabets \u0027S\u0027 or \u0027T\u0027 while foreigners have the alphabets"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * \u0027F\u0027 or \u0027G\u0027. The ending character of each NRIC number can be any alphabet."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @param nric String that represents a given NRIC number."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @return if the string is a valid NRIC number."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static boolean isValidNric(String nric) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (nric.length() !\u003d 9) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return isValidStartEndAlphabet(nric.charAt(0), nric.charAt(nric.length() - 1))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                \u0026\u0026 isDigitAndLengthSeven(nric.substring(1, nric.length() - 1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Checks if the given string only contains digits and is of length seven."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @param nricDigits"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static boolean isDigitAndLengthSeven(String nricDigits) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        boolean isLengthSeven \u003d nricDigits.length() \u003d\u003d 7;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        String regex \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(regex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        boolean isDigits \u003d (pattern.matcher(nricDigits).matches());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return isLengthSeven \u0026\u0026 isDigits;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Checks if the given character is a valid starting alphabet for a Singaporean NRIC and if the given endCharacter"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * is a letter. Singaporeans either have the starting alphabets \u0027S\u0027 or \u0027T\u0027 while foreigners"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * have the alphabets \u0027F\u0027 or \u0027G\u0027."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @param character First character of a given NRIC String."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @param endCharacter Last character of a given NRIC String."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @return if the first char is a valid alphabet or not."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static boolean isValidStartEndAlphabet(char character, char endCharacter) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        boolean isLetter \u003d Character.isLetter(endCharacter);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        switch (character) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        case \u0027S\u0027: // Fallthrough"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        case \u0027T\u0027: // Fallthrough"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        case \u0027F\u0027: // Fallthrough"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        case \u0027G\u0027: // Fallthrough"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return isLetter;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return nric;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambervoong": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/body/Religion.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "package seedu.address.model.entity.body;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "//@@author ambervoong"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " * Enumerates all of the major religions."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "public enum Religion {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    CHRISTIANITY, ISLAM, NONRELIGIOUS, HINDUISM, BUDDHISM, SIKHISM,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            JUCHE, SPIRITISM, JUDAISM, JAINISM, SHINTO;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Parses {@code String religion} to return the corresponding {@code Religion}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static Religion parseReligion(String religion) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assert(religion !\u003d null);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        String religionLowerCaps \u003d religion.toLowerCase();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        switch(religionLowerCaps) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        case \"christianity\":"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return CHRISTIANITY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        case \"islam\":"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return ISLAM;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        case \"hinduism\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return HINDUISM;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        case \"buddhism\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return BUDDHISM;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        case \"sikhism\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return SIKHISM;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        case \"juche\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return JUCHE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        case \"spiritism\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return SPIRITISM;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        case \"shinto\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return SHINTO;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        case \"judaism\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return JUDAISM;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        case \"jainism\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return JAINISM;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        case \"nonreligious\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return NONRELIGIOUS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            throw new ParseException(\"Invalid religion\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambervoong": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/body/UniqueBodyList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalisc"
        },
        "content": "package seedu.address.model.entity.body;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import seedu.address.model.entity.body.exceptions.BodyNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import seedu.address.model.entity.body.exceptions.DuplicateBodyException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalisc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalisc"
        },
        "content": " * A list of bodies that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalisc"
        },
        "content": " * A body is considered unique by comparing using {@code Body#isSameBody(Body)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalisc"
        },
        "content": " * bodies uses Body#isSameBody(Body) for equality so as to ensure that the body being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalisc"
        },
        "content": " * unique in terms of identity in the UniqueBodyList. However, the removal of a body uses Body#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalisc"
        },
        "content": " * as to ensure that the body with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalisc"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalisc"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalisc"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalisc"
        },
        "content": " * @see Body#isSameBody(Object)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalisc"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalisc"
        },
        "content": "public class UniqueBodyList implements Iterable\u003cBody\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    private final ObservableList\u003cBody\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    private final ObservableList\u003cBody\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalisc"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalisc"
        },
        "content": "     * Returns true if the list contains an equivalent body as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalisc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    public boolean contains(Body toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameBody);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dalisc"
        },
        "content": "     * Adds a body to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dalisc"
        },
        "content": "     * The body must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalisc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    public void add(Body toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dalisc"
        },
        "content": "            throw new DuplicateBodyException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dalisc"
        },
        "content": "     * Replaces the body {@code target} in the list with {@code editedBody}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dalisc"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dalisc"
        },
        "content": "     * The body identity of {@code editedBody} must not be the same as another existing body in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dalisc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    public void setBody(Body target, Body editedBody) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        requireAllNonNull(target, editedBody);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dalisc"
        },
        "content": "            throw new BodyNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        if (!target.isSameBody(editedBody) \u0026\u0026 contains(editedBody)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dalisc"
        },
        "content": "            throw new DuplicateBodyException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        internalList.set(index, editedBody);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dalisc"
        },
        "content": "     * Removes the equivalent body from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dalisc"
        },
        "content": "     * The body must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dalisc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    public void remove(Body toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dalisc"
        },
        "content": "            throw new BodyNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    public void setBodies(UniqueBodyList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dalisc"
        },
        "content": "     * Replaces the contents of this list with {@code bodies}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dalisc"
        },
        "content": "     * {@code bodies} must not contain duplicate bodies."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dalisc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    public void setBodies(List\u003cBody\u003e bodies) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        requireAllNonNull(bodies);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        if (!bodiesAreUnique(bodies)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dalisc"
        },
        "content": "            throw new DuplicateBodyException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        internalList.setAll(bodies);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dalisc"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dalisc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    public ObservableList\u003cBody\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    public Iterator\u003cBody\u003e iterator() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                || (other instanceof UniqueBodyList // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueBodyList) other).internalList));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dalisc"
        },
        "content": "     * Returns true if {@code bodies} contains only unique bodies."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dalisc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    private boolean bodiesAreUnique(List\u003cBody\u003e bodies) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        for (int i \u003d 0; i \u003c bodies.size() - 1; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dalisc"
        },
        "content": "            for (int j \u003d i + 1; j \u003c bodies.size(); j++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                if (bodies.get(i).isSameBody(bodies.get(j))) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dalisc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dalisc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalisc": 138
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/body/exceptions/BodyNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalisc"
        },
        "content": "package seedu.address.model.entity.body.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalisc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalisc"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalisc"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalisc"
        },
        "content": "public class BodyNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "dalisc": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/body/exceptions/DuplicateBodyException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalisc"
        },
        "content": "package seedu.address.model.entity.body.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalisc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalisc"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalisc"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalisc"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalisc"
        },
        "content": "public class DuplicateBodyException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    public DuplicateBodyException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalisc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalisc": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/exceptions/DuplicateEntityException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package seedu.address.model.entity.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * Signals that the operation will result in duplicate Entities(Entities are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class DuplicateEntityException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public DuplicateEntityException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        super(\"Operation would result in duplicate entities\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/exceptions/EntityNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package seedu.address.model.entity.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * Signals that the operation is unable to find the specified entity."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class EntityNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/fridge/Fridge.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "package seedu.address.model.entity.fridge;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.entity.IdentificationNumber;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "//@@author arjavibahety"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " * Represents a fridge entry in Mortago."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " * Guarantees: fridgeIdNum and status are guaranteed to be present and not null"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "public class Fridge implements Entity {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    // Identity field"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private final IdentificationNumber fridgeIdNum;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    // Data field"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private Body body;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private FridgeStatus fridgeStatus;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public Fridge() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        this.fridgeIdNum \u003d IdentificationNumber.generateNewFridgeId(this);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        this.fridgeStatus \u003d FridgeStatus.UNOCCUPIED;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        this.body \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public Fridge(boolean isTestFridge) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        if (isTestFridge) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            fridgeIdNum \u003d IdentificationNumber.customGenerateTestId(\"F\", 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            this.fridgeIdNum \u003d IdentificationNumber.generateNewFridgeId(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        this.fridgeStatus \u003d FridgeStatus.UNOCCUPIED;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        this.body \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public Fridge(Body body) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        this.fridgeIdNum \u003d IdentificationNumber.generateNewFridgeId(this);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        this.body \u003d body;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        if (body \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            this.fridgeStatus \u003d FridgeStatus.UNOCCUPIED;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            this.fridgeStatus \u003d FridgeStatus.OCCUPIED;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public Fridge(Body body, boolean isTestFridge) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        if (isTestFridge) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            this.fridgeIdNum \u003d IdentificationNumber.customGenerateTestId(\"F\", 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            this.fridgeIdNum \u003d IdentificationNumber.generateNewFridgeId(this);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        this.body \u003d body;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        if (body \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            this.fridgeStatus \u003d FridgeStatus.UNOCCUPIED;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            this.fridgeStatus \u003d FridgeStatus.OCCUPIED;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public IdentificationNumber getIdNum() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return fridgeIdNum;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public FridgeStatus getFridgeStatus() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return fridgeStatus;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public Body getBody() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return body;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public void setFridgeStatus(FridgeStatus fridgeStatus) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        this.fridgeStatus \u003d fridgeStatus;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public void setBody(Body body) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        this.body \u003d body;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        if (body \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            setFridgeStatus(FridgeStatus.UNOCCUPIED);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            setFridgeStatus(FridgeStatus.OCCUPIED);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Returns true if both fridge have the same identity fields."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * This defines a weaker notion of equality between two fridges."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public boolean isSameFridge(Object otherFridge) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        if (otherFridge \u003d\u003d this) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        } else if (otherFridge instanceof Fridge) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            return otherFridge !\u003d null"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                \u0026\u0026 ((Fridge) otherFridge).getIdNum() \u003d\u003d getIdNum();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public boolean isSameEntity(Object otherFridge) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return isSameFridge(otherFridge);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Returns true if both fridge have the same identity and data fields."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * This defines a stronger notion of equality between two fridges."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        if (!(other instanceof Fridge)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        Fridge otherFridge \u003d (Fridge) other;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return otherFridge.getIdNum().toString().equals(getIdNum().toString())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                \u0026\u0026 otherFridge.getFridgeStatus() \u003d\u003d getFridgeStatus()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                \u0026\u0026 otherFridge.getBody() \u003d\u003d getBody();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return Objects.hash(fridgeIdNum);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        if (getBody() !\u003d null) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            builder.append(\" Fridge ID: \")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    .append(getIdNum())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    .append(\" Status: \")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    .append(getFridgeStatus())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    .append(\" Body: \")"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    .append(getBody());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            builder.append(\" Fridge ID: \")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    .append(getIdNum())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    .append(\" Status: \")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    .append(getFridgeStatus());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 1,
      "arjavibahety": 149
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/fridge/FridgeStatus.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "package seedu.address.model.entity.fridge;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "//@@author arjavibahety"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " * Enumerates all the possible states a fridge undergoes in the mortuary."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "public enum FridgeStatus {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    UNOCCUPIED, OCCUPIED"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/worker/Worker.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package seedu.address.model.entity.worker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.IdentificationNumber;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.PhoneNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.Sex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author shaoyi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * Represents a worker entry in Mortago."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class Worker implements Entity {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private final IdentificationNumber workerIdNum;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private Sex sex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private Date dateJoined;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private Optional\u003cString\u003e designation;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private Optional\u003cDate\u003e dateOfBirth;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private Optional\u003cPhoneNumber\u003e phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private Optional\u003cString\u003e employmentStatus;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public Worker(Name name, PhoneNumber phone, Sex sex, String employmentStatus, Date dateOfBirth, Date dateJoined,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                  String designation) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        this.workerIdNum \u003d IdentificationNumber.generateNewWorkerId(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        this.phone \u003d Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        this.sex \u003d sex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        this.employmentStatus \u003d Optional.ofNullable(employmentStatus);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        this.dateOfBirth \u003d Optional.ofNullable(dateOfBirth);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        this.dateJoined \u003d dateJoined;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        this.designation \u003d Optional.ofNullable(designation);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public Worker(Name name, PhoneNumber phone, Sex sex, String employmentStatus, Date dateOfBirth, Date dateJoined,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                  String designation, boolean isTestWorker) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (isTestWorker) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            this.workerIdNum \u003d IdentificationNumber.customGenerateTestId(\"W\", 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            this.workerIdNum \u003d IdentificationNumber.generateNewWorkerId(this);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        this.phone \u003d Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        this.sex \u003d sex;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        this.employmentStatus \u003d Optional.ofNullable(employmentStatus);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        this.dateOfBirth \u003d Optional.ofNullable(dateOfBirth);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        this.dateJoined \u003d dateJoined;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        this.designation \u003d Optional.ofNullable(designation);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public IdentificationNumber getIdNum() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return workerIdNum;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public Optional\u003cPhoneNumber\u003e getPhone() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public Sex getSex() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return sex;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public Optional\u003cDate\u003e getDateOfBirth() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return dateOfBirth;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public Date getDateJoined() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return dateJoined;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public Optional\u003cString\u003e getDesignation() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return designation;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public Optional\u003cString\u003e getEmploymentStatus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return employmentStatus;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void setPhone(PhoneNumber phone) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        this.phone \u003d Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void setSex(Sex sex) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        this.sex \u003d sex;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void setDateOfBirth(Date dateOfBirth) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        this.dateOfBirth \u003d Optional.ofNullable(dateOfBirth);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void setDateJoined(Date dateJoined) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        this.dateJoined \u003d dateJoined;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void setDesignation(String designation) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        this.designation \u003d Optional.ofNullable(designation);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void setEmploymentStatus(String employmentStatus) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        this.employmentStatus \u003d Optional.ofNullable(employmentStatus);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Returns true if both workers have the same identity fields."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * This defines a weaker notion of equality between two workers."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public boolean isSameWorker(Object o) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        } else if (o instanceof Worker) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            Worker otherWorker \u003d (Worker) o;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return otherWorker !\u003d null"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                \u0026\u0026 otherWorker.getName().equals(getName())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                \u0026\u0026 otherWorker.getSex().equals(getSex());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public boolean isSameEntity(Object o) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return isSameWorker(o);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Returns true if both workers have the same identity and data fields."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * This defines a stronger notion of equality between two workers."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (!(other instanceof Worker)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Worker otherPerson \u003d (Worker) other;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            \u0026\u0026 otherPerson.getSex().equals(getSex())"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            \u0026\u0026 otherPerson.getDateJoined().equals(getDateJoined())"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            \u0026\u0026 otherPerson.getDateOfBirth().equals(getDateOfBirth())"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            \u0026\u0026 otherPerson.getDesignation().equals(getDesignation());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return Objects.hash(name, phone, sex, workerIdNum, employmentStatus, dateJoined, dateOfBirth, designation);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            .append(\" Worker ID: \")"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            .append(getIdNum())"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            .append(\" Sex: \")"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            .append(getSex())"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            .append(\" Phone: \")"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            .append(phone.isPresent() ? phone.get() : OPTIONAL_FIELD_EMPTY)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            .append(\" Date of Birth: \")"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            .append(dateOfBirth.isPresent() ? dateOfBirth.get() : OPTIONAL_FIELD_EMPTY)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            .append(\" Date Joined: \")"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            .append(getDateJoined())"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            .append(\" Designation: \")"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            .append(designation.isPresent() ? designation.get() : OPTIONAL_FIELD_EMPTY)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            .append(\" Employment Status: \")"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            .append(employmentStatus.isPresent() ? employmentStatus.get() : OPTIONAL_FIELD_EMPTY);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 187,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/worker/WorkerNameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalisc"
        },
        "content": "package seedu.address.model.entity.worker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalisc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalisc"
        },
        "content": " * Tests that a {@code Entity}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalisc"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalisc"
        },
        "content": "public class WorkerNameContainsKeywordsPredicate implements Predicate\u003cWorker\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    public WorkerNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    public boolean test(Worker worker) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(worker.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                || (other instanceof WorkerNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                \u0026\u0026 keywords.equals(((WorkerNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalisc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalisc": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/notif/Notif.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "package seedu.address.model.notif;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.model.entity.body.BodyStatus.ARRIVED;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.entity.body.BodyStatus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "//@@author arjavibahety"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " * Represents a notification in Mortago."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " * Guarantees: body is guanranteed to be present."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "public class Notif {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private Body body;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private Runnable alert;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public Notif(Body body) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        this.body \u003d body;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        this.alert \u003d new Runnable() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                if (body.getBodyStatus().equals(Optional.of(ARRIVED))) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                        body.setBodyStatus(BodyStatus.parseBodyStatus("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                                \"pending police report\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    } catch (ParseException exp) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                        // todo what to do here?"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        };"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public Body getBody() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return body;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public void setBody(Body body) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        this.body \u003d body;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public Runnable getAlert() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return alert;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Returns whether another object is equal to this object. Equality is defined as having identical attributes. Null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * objects are not considered equal."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @param other An object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @return whether the object is equal to this object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        if (other \u003d\u003d null || getClass() !\u003d other.getClass()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        Notif notif \u003d (Notif) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return getBody().equals(notif.getBody())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                \u0026\u0026 getAlert().equals(notif.getAlert());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return Objects.hash(body, alert);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Returns whether an object is equal to this notif. The definition of equality is relaxed here to only include"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * body."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @param other An object."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @return whether the object is equal to this object."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public boolean isSameNotif(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        } else if (!(other instanceof Notif)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            return other !\u003d null"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    \u0026\u0026 ((Notif) other).getBody() \u003d\u003d getBody();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/model/notif/exceptions/DuplicateNotifException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "package seedu.address.model.notif.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " * Signals that the operation will result in duplicate Notifs(Notifs are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "public class DuplicateNotifException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public DuplicateNotifException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        super(\"Operation would result in duplicate notifs\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/notif/exceptions/NotifNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "package seedu.address.model.notif.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " * Signals that the operation is unable to find the specified notif."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "public class NotifNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.IdentificationNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class Person implements Entity {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public IdentificationNumber getIdNum() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return IdentificationNumber.customGenerateId(\"P\", 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public boolean isSameEntity(Object o) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return isSamePerson((Person) o);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 12,
      "-": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniqueEntityLists.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.model.entity.exceptions.DuplicateEntityException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.model.entity.exceptions.EntityNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.entity.fridge.Fridge;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.model.entity.worker.Worker;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bernicechio"
        },
        "content": " * Lists of entities that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bernicechio"
        },
        "content": " * An entity is considered unique by comparing using {@code Entity#isSameEntity(Entity)}. As such, adding and updating"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bernicechio"
        },
        "content": " * of entities uses Entity#isSameEntity(Entity) for equality so as to ensure that the entity being added or updated is"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bernicechio"
        },
        "content": " * unique in terms of identity in the UniqueEntityList. However, the removal of an entity uses Entity#equals(Object) so"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " * as to ensure that the entity with exactly the same fields will be removed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bernicechio"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bernicechio"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bernicechio"
        },
        "content": " *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bernicechio"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "public class UniqueEntityLists {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalListPerson \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableListPerson \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalListPerson);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    private final ObservableList\u003cWorker\u003e internalListWorker \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    private final ObservableList\u003cWorker\u003e internalUnmodifiableListWorker \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalListWorker);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    private final ObservableList\u003cBody\u003e internalListBody \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    private final ObservableList\u003cBody\u003e internalUnmodifiableListBody \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalListBody);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private final ObservableList\u003cFridge\u003e internalListFridge \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private final ObservableList\u003cFridge\u003e internalUnmodifiableListFridge \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalListFridge);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * Returns true if the respective list contains an equivalent entity as the given argument."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public boolean contains(Entity toCheck) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        ObservableList list;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        if (toCheck instanceof Worker) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            list \u003d internalListWorker;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        } else if (toCheck instanceof Body) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            list \u003d internalListBody;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        } else if (toCheck instanceof Fridge) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            list \u003d internalListFridge;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            list \u003d internalListPerson;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        return list.stream().anyMatch(toCheck::isSameEntity);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * Adds an entity to the respective list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * The entity must not already exist in the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public void add(Entity toAdd) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            throw new DuplicateEntityException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        if (toAdd instanceof Worker) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            internalListWorker.add((Worker) toAdd);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        } else if (toAdd instanceof Body) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            internalListBody.add((Body) toAdd);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        } else if (toAdd instanceof Fridge) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            internalListFridge.add((Fridge) toAdd);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            internalListPerson.add((Person) toAdd);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * Replaces the entity {@code target} in the list with {@code editedEntity}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * The entity identity of {@code editedEntity} must not be the same as another existing entity in the list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public void setEntity(Entity target, Entity editedEntity) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        requireAllNonNull(target, editedEntity);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        if (!target.isSameEntity(editedEntity) \u0026\u0026 contains(editedEntity)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            throw new DuplicateEntityException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        if (target instanceof Worker) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            index \u003d internalListWorker.indexOf((Worker) target);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        } else if (target instanceof Body) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            index \u003d internalListBody.indexOf((Body) target);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        } else if (target instanceof Fridge) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            index \u003d internalListFridge.indexOf((Fridge) target);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            index \u003d internalListPerson.indexOf((Person) target);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            throw new EntityNotFoundException();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        if (editedEntity instanceof Worker) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            internalListWorker.set(index, (Worker) editedEntity);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        } else if (editedEntity instanceof Body) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            internalListBody.set(index, (Body) editedEntity);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        } else if (editedEntity instanceof Fridge) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            internalListFridge.set(index, (Fridge) editedEntity);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            internalListPerson.set(index, (Person) editedEntity);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * Removes the equivalent entity from the list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * The entity must exist in the list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public void remove(Entity toRemove) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        boolean isRemoved;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        if (toRemove instanceof Worker) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            isRemoved \u003d internalListWorker.remove((Worker) toRemove);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        } else if (toRemove instanceof Body) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            isRemoved \u003d internalListBody.remove((Body) toRemove);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        } else if (toRemove instanceof Fridge) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            isRemoved \u003d internalListFridge.remove((Fridge) toRemove);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            isRemoved \u003d internalListPerson.remove((Person) toRemove);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        if (!isRemoved) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            throw new EntityNotFoundException();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public void setPersons(UniqueEntityLists replacement) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        internalListBody.setAll(replacement.internalListBody);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        internalListWorker.setAll(replacement.internalListWorker);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        internalListFridge.setAll(replacement.internalListFridge);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        internalListPerson.setAll(replacement.internalListPerson);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (!entitiesAreUnique(persons)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        internalListPerson.setAll(persons);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * Replaces the contents of this list with {@code workers}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * {@code workers} must not contain duplicate workers."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public void setWorkers(List\u003cWorker\u003e workers) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        requireAllNonNull(workers);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        if (!entitiesAreUnique(workers)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            throw new DuplicateEntityException();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        internalListWorker.setAll(workers);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * Replaces the contents of this list with {@code bodies}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * {@code bodies} must not contain duplicate bodies."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public void setBodies(List\u003cBody\u003e bodies) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        requireAllNonNull(bodies);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        if (!entitiesAreUnique(bodies)) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            throw new DuplicateEntityException();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        internalListBody.setAll(bodies);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Replaces the contents of this list with {@code fridges}."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * {@code fridges} must not contain duplicate fridges."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public void setFridges(List\u003cFridge\u003e fridges) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        requireAllNonNull(fridges);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        if (!entitiesAreUnique(fridges)) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            throw new DuplicateEntityException();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        internalListFridge.setAll(fridges);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * Returns the backing Person list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableListPerson() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        return internalUnmodifiableListPerson;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * Returns the backing Worker list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public ObservableList\u003cWorker\u003e asUnmodifiableObservableListWorker() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        return internalUnmodifiableListWorker;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * Returns the backing Body list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public ObservableList\u003cBody\u003e asUnmodifiableObservableListBody() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        return internalUnmodifiableListBody;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Returns the backing Fridge list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public ObservableList\u003cFridge\u003e asUnmodifiableObservableListFridge() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return internalUnmodifiableListFridge;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "                || (other instanceof UniqueEntityLists // instanceof handles nulls"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "                \u0026\u0026 (internalListPerson.equals(((UniqueEntityLists) other).internalListPerson))"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "                \u0026\u0026 (internalListWorker.equals(((UniqueEntityLists) other).internalListWorker))"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                \u0026\u0026 internalListBody.equals(((UniqueEntityLists) other).internalListBody))"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                \u0026\u0026 internalListFridge.equals(((UniqueEntityLists) other).internalListFridge);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return Objects.hash(internalListBody, internalListWorker, internalListPerson, internalListFridge);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * Returns true if {@code entities} contains only unique entities."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    private boolean entitiesAreUnique(List\u003c? extends Entity\u003e entities) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        for (int i \u003d 0; i \u003c entities.size() - 1; i++) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            for (int j \u003d i + 1; j \u003c entities.size(); j++) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "                if (entities.get(i).isSameEntity(entities.get(j))) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "                }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 3,
      "arjavibahety": 40,
      "bernicechio": 216
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            sampleAb.addEntity(samplePerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            if (addressBook.hasEntity(person)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            addressBook.addEntity(person);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 2,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ReportGenerator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import com.itextpdf.text.Document;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import com.itextpdf.text.DocumentException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import com.itextpdf.text.Paragraph;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import com.itextpdf.text.pdf.PdfWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "//@@author bernicechio"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bernicechio"
        },
        "content": " * Represents a report generator and the ability to be generate aå report."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bernicechio"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "public class ReportGenerator {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * Generates a PDF report for the specific body."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     * @param body which is used to generate the report."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public static void generate(Body body) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        Document document \u003d new Document();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            PdfWriter writer \u003d PdfWriter.getInstance(document,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "                    new FileOutputStream(String.format(\"Report %s.pdf\", body.getIdNum())));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            document.open();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            document.add(new Paragraph(\"A Mortago report document.\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            document.close();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        } catch (DocumentException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bernicechio": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BodyCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * An UI component that displays information of a {@code Body}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class BodyCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final String FXML \u003d \"BodyListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public final Body body;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private Label bodyId;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private Label dateOfAdmission;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private Label bodyStatus;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public BodyCard(Body body, int displayedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        this.body \u003d body;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        name.setText(body.getName().fullName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        bodyId.setText(body.getIdNum().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        dateOfAdmission.setText(body.getDateOfAdmission().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        bodyStatus.setText(body.getBodyStatus().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (!(other instanceof BodyCard)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        BodyCard card \u003d (BodyCard) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                \u0026\u0026 body.equals(card.body);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 63,
      "arjavibahety": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BodyCardSelected.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * An UI component that displays information of a {@code Body}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class BodyCardSelected extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final String FXML \u003d \"BodyListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public final Body body \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private Label bodyId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private Label dateOfAdmission;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public BodyCardSelected(ObservableValue\u003cBody\u003e selectedBody) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // Load body card when selected card changes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        selectedBody.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            name.setText(newValue.getName().fullName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            bodyId.setText(newValue.getIdNum().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            dateOfAdmission.setText(newValue.getDateOfAdmission().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        });"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (!(other instanceof BodyCardSelected)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        BodyCardSelected card \u003d (BodyCardSelected) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                \u0026\u0026 body.equals(card.body);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BodyListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * Panel containing the list of bodies."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class BodyListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final String FXML \u003d \"BodyListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(BodyListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private ListView\u003cBody\u003e bodyListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public BodyListPanel(ObservableList\u003cBody\u003e bodyList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        bodyListView.setItems(bodyList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        bodyListView.setCellFactory(listView -\u003e new BodyListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Body} using a {@code BodyCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    class BodyListViewCell extends ListCell\u003cBody\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        protected void updateItem(Body body, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            super.updateItem(body, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            if (empty || body \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                setGraphic(new BodyCard(body, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BodyMasterDetailPane.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import org.controlsfx.control.MasterDetailPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * Master Detail Pane for list of bodies and a selected body\u0027s details."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class BodyMasterDetailPane extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final String FXML \u003d \"BodyMasterDetailPane.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(BodyMasterDetailPane.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private MasterDetailPane bodyMasterDetailPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public BodyMasterDetailPane(BodyTableView bodyTableView, BodyCardSelected bodyCardSelected) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        bodyMasterDetailPane.setMasterNode(bodyTableView.getRoot());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        bodyMasterDetailPane.setDetailNode(bodyCardSelected.getRoot());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BodyTableView.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.model.entity.body.BodyStatus.ARRIVED;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.model.entity.body.BodyStatus.CLAIMED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.model.entity.body.BodyStatus.PENDING_POLICE_REPORT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.beans.property.ReadOnlyObjectWrapper;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.control.TableCell;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.IdentificationNumber;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.body.BodyStatus;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * Table View for list of bodies."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class BodyTableView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final String FXML \u003d \"BodyTableView.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(BodyTableView.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private TableView\u003cBody\u003e bodyTableView;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public BodyTableView (ObservableList\u003cBody\u003e bodyList, ObservableValue\u003cBody\u003e selectedBody,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            Consumer\u003cBody\u003e onSelectedBodyChange) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        setColumns();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        bodyTableView.setItems(bodyList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        //@@ shaoyi1997-reused"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        //Reused from SE-EDU Address Book Level 4"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        bodyTableView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            logger.fine(\"Selection in body table view changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            onSelectedBodyChange.accept(newValue);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        });"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        selectedBody.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            logger.fine(\"Selected body changed to: \" + newValue);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected person,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            if (Objects.equals(bodyTableView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                bodyTableView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                int index \u003d bodyTableView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                bodyTableView.scrollTo(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                bodyTableView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        });"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        //@@author shaoyi1997"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private void setColumns() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        TableColumn\u003cBody, String\u003e name \u003d new TableColumn\u003c\u003e(\"Name\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        name.setCellValueFactory(new PropertyValueFactory(\"Name\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        name.setSortType(TableColumn.SortType.ASCENDING);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        TableColumn\u003cBody, IdentificationNumber\u003e id \u003d new TableColumn\u003c\u003e(\"Body ID\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        id.setCellValueFactory(param -\u003e new ReadOnlyObjectWrapper\u003c\u003e(param.getValue().getIdNum()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        TableColumn\u003cBody, String\u003e dateOfAdmission \u003d new TableColumn\u003c\u003e(\"Date Of Admission\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        dateOfAdmission.setCellValueFactory(new PropertyValueFactory(\"dateOfAdmission\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        TableColumn\u003cBody, BodyStatus\u003e bodyStatus \u003d new TableColumn\u003c\u003e(\"Body Status\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        bodyStatus.setCellValueFactory(param -\u003e new ReadOnlyObjectWrapper\u003c\u003e(param.getValue().getBodyStatus().get()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        bodyStatus.setCellFactory(tableColumn -\u003e new BodyStatusTableCell());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        bodyStatus.setStyle(\"-justify-self: center\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        bodyTableView.getColumns().addAll(name, id, dateOfAdmission, bodyStatus);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Custom {@code TableCell} that displays the graphics of a {@code Body}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    class BodyStatusTableCell extends TableCell\u003cBody, BodyStatus\u003e {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        protected void updateItem(BodyStatus bodyStatus, boolean empty) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            super.updateItem(bodyStatus, empty);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            if (empty || bodyStatus \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                Label label \u003d new Label();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                String bodyStatusString \u003d bodyStatus.toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                label.setText(bodyStatusString);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                if (bodyStatusString.equals(ARRIVED.toString())) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                    label.getStyleClass().add(\"bodyStatusLabelArrived\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                } else if (bodyStatusString.equals(CLAIMED.toString())) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                    label.getStyleClass().add(\"bodyStatusLabelClaimed\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                } else if (bodyStatusString.equals(PENDING_POLICE_REPORT.toString())) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                    label.getStyleClass().add(\"bodyStatusLabelPendingPoliceReport\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                    label.getStyleClass().add(\"bodyStatusLabelPending\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                setGraphic(label);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FridgeCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.fridge.Fridge;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * An UI component that displays information of a {@code Body}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class FridgeCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final String FXML \u003d \"FridgeListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public final Fridge fridge;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private Label status;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private Label fridgeId;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public FridgeCard(Fridge fridge, int displayedIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        this.fridge \u003d fridge;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        fridgeId.setText(fridge.getIdNum().toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        status.setText(fridge.getFridgeStatus().toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (!(other instanceof BodyCard)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        FridgeCard card \u003d (FridgeCard) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                \u0026\u0026 fridge.equals(card.fridge);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FridgeListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.fridge.Fridge;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * Panel containing the list of bodies."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class FridgeListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final String FXML \u003d \"FridgeListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(FridgeListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private ListView\u003cFridge\u003e fridgeListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public FridgeListPanel(ObservableList\u003cFridge\u003e fridgeList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        fridgeListView.setItems(fridgeList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        fridgeListView.setCellFactory(listView -\u003e new FridgeListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Body} using a {@code BodyCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    class FridgeListViewCell extends ListCell\u003cFridge\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        protected void updateItem(Fridge firdge, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            super.updateItem(firdge, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            if (empty || firdge \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                setGraphic(new FridgeCard(firdge, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/LineChartPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalisc"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import javafx.scene.chart.LineChart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalisc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalisc"
        },
        "content": " * A ui for the line chart that is displayed at the bottom of the dashboard."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalisc"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalisc"
        },
        "content": "public class LineChartPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    private static final String FXML \u003d \"LineChartPanel.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    private static final long DAY_IN_MS \u003d 1000 * 60 * 60 * 24;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    private static final int WINDOW_SIZE \u003d 10;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    // this is used to display time in HH:mm:ss format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    final SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(\"EEE, MMM d, yyyy\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    final CategoryAxis xAxis \u003d new CategoryAxis(); // we are gonna plot against time"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    final NumberAxis yAxis \u003d new NumberAxis();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    final LineChart\u003cString, Number\u003e lineChart \u003d new LineChart\u003c\u003e(xAxis, yAxis);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    private XYChart.Series\u003cString, Number\u003e series \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    private Map\u003cDate, Number\u003e freqByDate \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    private ObservableList\u003cBody\u003e bodyList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    public LineChartPanel(ObservableList\u003cBody\u003e bodyList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        this.bodyList \u003d bodyList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    public LineChart getLineChart() throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        initialiseTreeMap();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        initialiseLineChart();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        updateSeries();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        updateUponChange();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        return lineChart;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dalisc"
        },
        "content": "     * Initialises the line chart with a title, axes labels, and a series."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dalisc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    private void initialiseLineChart() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        //defining the axes"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        xAxis.setLabel(\"Day\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        yAxis.setLabel(\"Number\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        // y axis shows only integers"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        yAxis.setTickUnit(1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        yAxis.setMinorTickCount(0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        yAxis.setMinorTickVisible(false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        //creating the line chart with two axis created above"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        lineChart.setTitle(\"Statistics\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        lineChart.setAnimated(false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        //defining a series to display data"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        series.setName(\"Bodies admitted daily\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        // add series to chart"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        lineChart.getData().add(series);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        // add hashmap data to series;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dalisc"
        },
        "content": "     * Updates the series whenever a body is removed or added."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dalisc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    private void updateUponChange() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        bodyList.addListener((ListChangeListener\u003cBody\u003e) c -\u003e {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dalisc"
        },
        "content": "            while (c.next()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                if (c.wasAdded()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                        updateBodyAdded(c);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                    } catch (ParseException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                        e.printStackTrace();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                    updateSeries();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                if (c.wasRemoved()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                        updateBodyRemoved(c);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                    } catch (ParseException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                        e.printStackTrace();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                    updateSeries();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dalisc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        });"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dalisc"
        },
        "content": "     * Initialises the tree map to include the latest 10 days."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dalisc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    private void initialiseTreeMap() throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        // Fill in the missing dates"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        Date now \u003d new Date();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        Date tenDaysAgo \u003d new Date(now.getTime() - (10 * DAY_IN_MS));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        for (Date date \u003d now; date.after(tenDaysAgo); date \u003d new Date(date.getTime() - DAY_IN_MS)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dalisc"
        },
        "content": "            Date noTimeDate \u003d formatDateNoTime(date);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dalisc"
        },
        "content": "            freqByDate.putIfAbsent(noTimeDate, 0);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        for (Body body: bodyList) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dalisc"
        },
        "content": "            Date noTimeDate \u003d formatDateNoTime(body.getDateOfAdmission());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dalisc"
        },
        "content": "            Number oldFreq \u003d freqByDate.getOrDefault(noTimeDate, 0);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dalisc"
        },
        "content": "            int newFreq \u003d oldFreq.intValue() + 1;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dalisc"
        },
        "content": "            freqByDate.put(noTimeDate, newFreq);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dalisc"
        },
        "content": "     * Update the tree map upon a body being added - the frequency (value) associated with the date of admission (key)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dalisc"
        },
        "content": "     * will increase by one."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dalisc"
        },
        "content": "     * @param c Change in the ObservableList of bodies."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dalisc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    private void updateBodyAdded(ListChangeListener.Change\u003c? extends Body\u003e c) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        Date date \u003d c.getAddedSubList().get(0).getDateOfAdmission();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        Date noTimeDate \u003d formatDateNoTime(date);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        Number oldFreq \u003d freqByDate.getOrDefault(noTimeDate, 0);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        int newFreq \u003d oldFreq.intValue() + 1;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        freqByDate.put(noTimeDate, newFreq);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dalisc"
        },
        "content": "     * Update the tree map upon a body being deleted - the frequency (value) associated with the date of admission (key)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dalisc"
        },
        "content": "     * will decrease by one."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dalisc"
        },
        "content": "     * @param c Change in the ObservableList of bodies."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dalisc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    private void updateBodyRemoved(ListChangeListener.Change\u003c? extends Body\u003e c) throws ParseException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        Date date \u003d c.getRemoved().get(0).getDateOfAdmission();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        Date noTimeDate \u003d formatDateNoTime(date);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        Number oldFreq \u003d freqByDate.getOrDefault(noTimeDate, 0);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        int newFreq \u003d oldFreq.intValue() - 1;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        freqByDate.put(noTimeDate, newFreq);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dalisc"
        },
        "content": "     * Clears series data and populate series again with the current tree map keys and values."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dalisc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    private void updateSeries() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        // clear previous data"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        series.getData().clear();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        // Update series based on dates in current hashmap"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        freqByDate.forEach((date, freq) -\u003e {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dalisc"
        },
        "content": "            series.getData().add(new XYChart.Data\u003cString, Number\u003e(simpleDateFormat.format(date), freq));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dalisc"
        },
        "content": "            if (series.getData().size() \u003e WINDOW_SIZE) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                series.getData().remove(0);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dalisc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        });"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    private Date formatDateNoTime(Date date) throws ParseException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        return simpleDateFormat.parse(simpleDateFormat.format(date));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dalisc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalisc": 171
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    private ReadOnlyAddressBook readOnlyAddressBook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    private LineChartPanel lineChartPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private BodyMasterDetailPane bodyMasterDetailPane;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    private StackPane lineChartPanelPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private StackPane bodyMasterListPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    void fillInnerParts() throws java.text.ParseException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        lineChartPanel \u003d new LineChartPanel(logic.getAddressBook().getBodyList());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        lineChartPanelPlaceholder.getChildren().add(lineChartPanel.getLineChart());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath(), logic.getAddressBook());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        bodyMasterDetailPane \u003d new BodyMasterDetailPane(new BodyTableView(logic.getFilteredBodyList(),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                logic.selectedBodyProperty(), logic::setSelectedBody),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                        new BodyCardSelected(logic.selectedBodyProperty()));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        bodyMasterListPlaceholder.getChildren().add(bodyMasterDetailPane.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 10,
      "dalisc": 10,
      "-": 191
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private Label syncStatus;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public StatusBarFooter(Path saveLocation, ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        addressBook.addListener(observable -\u003e updateSyncStatus());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        syncStatus.setText(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Updates \"last updated\" status to the current time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private void updateSyncStatus() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        syncStatus.setText(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 44,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/WorkerCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.worker.Worker;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * An UI component that displays information of a {@code Worker}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class WorkerCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final String FXML \u003d \"WorkerListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public final Worker worker;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private Label workerId;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private Label dateJoined;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public WorkerCard(Worker worker, int displayedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        this.worker \u003d worker;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        name.setText(worker.getName().fullName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        workerId.setText(worker.getIdNum().toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        dateJoined.setText(worker.getDateJoined().toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (!(other instanceof WorkerCard)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        WorkerCard card \u003d (WorkerCard) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                \u0026\u0026 worker.equals(card.worker);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/WorkerListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.worker.Worker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * Panel containing the list of workers."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class WorkerListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final String FXML \u003d \"WorkerListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(WorkerListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private ListView\u003cWorker\u003e workerListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public WorkerListPanel(ObservableList\u003cWorker\u003e workerList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        workerListView.setItems(workerList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        workerListView.setCellFactory(listView -\u003e new WorkerListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Worker} using a {@code WorkerCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    class WorkerListViewCell extends ListCell\u003cWorker\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        protected void updateItem(Worker worker, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            super.updateItem(worker, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            if (empty || worker \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                setGraphic(new WorkerCard(worker, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 46
    }
  },
  {
    "path": "src/main/resources/view/BodyListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "      \u003cLabel fx:id\u003d\"bodyId\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$bodyId\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "      \u003cLabel fx:id\u003d\"dateOfAdmission\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dateOfAdmission\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "      \u003cLabel fx:id\u003d\"bodyStatus\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$bodyStatus\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 37,
      "arjavibahety": 1
    }
  },
  {
    "path": "src/main/resources/view/BodyListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "  \u003cListView fx:id\u003d\"bodyListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 8
    }
  },
  {
    "path": "src/main/resources/view/BodyMasterDetailPane.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?import org.controlsfx.control.MasterDetailPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003cMasterDetailPane fx:id\u003d\"bodyMasterDetailPane\" minHeight\u003d\"100.0\" prefHeight\u003d\"100.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" /\u003e"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 6
    }
  },
  {
    "path": "src/main/resources/view/BodyTableView.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003cTableView fx:id\u003d\"bodyTableView\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" tableMenuButtonVisible\u003d\"true\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "   \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "      \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "   \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c/TableView\u003e"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 9
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    -fx-background-color: #4d4d4d;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    -fx-size: 20;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ".bodyStatusLabelArrived {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    -fx-background-color: #FF555E;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ".bodyStatusLabelClaimed {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    -fx-background-color: #8BF18B;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ".bodyStatusLabelPending {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    -fx-background-color: #FFE981;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ".bodyStatusLabelPendingPoliceReport {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    -fx-background-color: #FF8650;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "dalisc"
        },
        "content": ".chart {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    -fx-padding: 10px;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "dalisc"
        },
        "content": "}"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "dalisc"
        },
        "content": ".chart-content {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "dalisc"
        },
        "content": "}"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "dalisc"
        },
        "content": ".chart-title {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "dalisc"
        },
        "content": "  -fx-text-fill: white;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "dalisc"
        },
        "content": "  -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "dalisc"
        },
        "content": "}"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "dalisc"
        },
        "content": ".axis-label {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "dalisc"
        },
        "content": "  -fx-text-fill: white;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "dalisc"
        },
        "content": "  -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "dalisc"
        },
        "content": "  -fx-font-size: 1em;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "dalisc"
        },
        "content": "}"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "dalisc"
        },
        "content": ".chart-legend {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "dalisc"
        },
        "content": "   -fx-background-color: transparent;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "dalisc"
        },
        "content": "   -fx-padding: 20px;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "dalisc"
        },
        "content": "}"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "dalisc"
        },
        "content": ".chart-legend-item-symbol{"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "dalisc"
        },
        "content": "   -fx-background-radius: 50%;"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "dalisc"
        },
        "content": "}"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "dalisc"
        },
        "content": ".chart-legend-item{"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "dalisc"
        },
        "content": "}"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "dalisc"
        },
        "content": ".chart-plot-background {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    -fx-background-color: #383838;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "dalisc"
        },
        "content": "}"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "dalisc"
        },
        "content": ".chart-vertical-grid-lines {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    -fx-stroke: grey;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "dalisc"
        },
        "content": "}"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "dalisc"
        },
        "content": ".chart-horizontal-grid-lines {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    -fx-stroke: grey;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "dalisc"
        },
        "content": "}"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "dalisc"
        },
        "content": ".chart-alternative-row-fill {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    -fx-fill: #white;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    -fx-stroke: #2B3941;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    -fx-stroke-width: 0;"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "dalisc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 41,
      "dalisc": 48,
      "-": 349
    }
  },
  {
    "path": "src/main/resources/view/FridgeListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        \u003cLabel fx:id\u003d\"fridgeId\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$fridgeId\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "      \u003cLabel fx:id\u003d\"status\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$status\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 36
    }
  },
  {
    "path": "src/main/resources/view/FridgeListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "  \u003cListView fx:id\u003d\"fridgeListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 8
    }
  },
  {
    "path": "src/main/resources/view/LineChartPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalisc"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalisc"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalisc"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalisc"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalisc"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalisc"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "dalisc": 9
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003cfx:root minHeight\u003d\"650.0\" minWidth\u003d\"1250.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Address App\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" prefHeight\u003d\"7.0\" prefWidth\u003d\"200.0\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                 \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "              \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"22.0\" prefHeight\u003d\"22.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            \u003cHBox prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "              \u003cVBox fx:id\u003d\"personList\" maxWidth\u003d\"200.0\" minWidth\u003d\"200.0\" prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                  \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"bodyMasterListPlaceholder\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                  \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dalisc"
        },
        "content": "          \u003cStackPane fx:id\u003d\"lineChartPanelPlaceholder\" maxHeight\u003d\"300.0\" prefHeight\u003d\"300.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dalisc"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                  \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dalisc"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dalisc"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 23,
      "dalisc": 5,
      "-": 43
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" halignment\u003d\"RIGHT\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "  \u003cLabel fx:id\u003d\"syncStatus\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveLocationStatus\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 3,
      "-": 11
    }
  },
  {
    "path": "src/main/resources/view/WorkerListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "      \u003cLabel fx:id\u003d\"workerId\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$workerId\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "      \u003cLabel fx:id\u003d\"dateJoined\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dateJoined\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 37
    }
  },
  {
    "path": "src/main/resources/view/WorkerListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "  \u003cListView fx:id\u003d\"workerListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 8
    }
  },
  {
    "path": "src/test/java/guitests/GuiRobot.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package guitests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.function.BooleanSupplier;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import guitests.guihandles.exceptions.EventTimeoutException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import guitests.guihandles.exceptions.StageNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * Robot used to simulate user actions on the GUI."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * Extends {@link FxRobot} by adding some customized functionality and workarounds."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class GuiRobot extends FxRobot {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final int PAUSE_FOR_HUMAN_DELAY_MILLISECONDS \u003d 250;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final int DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS \u003d 5000;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final String PROPERTY_TESTFX_HEADLESS \u003d \"testfx.headless\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private final boolean isHeadlessMode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public GuiRobot() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        String headlessPropertyValue \u003d System.getProperty(PROPERTY_TESTFX_HEADLESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        isHeadlessMode \u003d headlessPropertyValue !\u003d null \u0026\u0026 headlessPropertyValue.equals(\"true\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Pauses execution for {@code PAUSE_FOR_HUMAN_DELAY_MILLISECONDS} milliseconds for a human to examine the"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * effects of the test. This method will be disabled when the GUI tests are executed in headless mode to avoid"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * unnecessary delays."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void pauseForHuman() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (isHeadlessMode) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        sleep(PAUSE_FOR_HUMAN_DELAY_MILLISECONDS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Returns true if tests are run in headless mode."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public boolean isHeadlessMode() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return isHeadlessMode;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Waits for {@code event} to be true by {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS} milliseconds."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * @throws EventTimeoutException if the time taken exceeds {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * milliseconds."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void waitForEvent(BooleanSupplier event) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        waitForEvent(event, DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Waits for {@code event} to be true."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * @param timeOut in milliseconds"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * @throws EventTimeoutException if the time taken exceeds {@code timeOut}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void waitForEvent(BooleanSupplier event, int timeOut) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        int timePassed \u003d 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        final int retryInterval \u003d 50;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        while (!event.getAsBoolean()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            sleep(retryInterval);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            timePassed +\u003d retryInterval;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            if (timePassed \u003e\u003d timeOut) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                throw new EventTimeoutException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        pauseForHuman();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Returns true if the window with {@code stageTitle} is currently open."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public boolean isWindowShown(String stageTitle) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return getNumberOfWindowsShown(stageTitle) \u003e\u003d 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Returns the number of windows with {@code stageTitle} that are currently open."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public int getNumberOfWindowsShown(String stageTitle) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return (int) listTargetWindows().stream()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                .filter(window -\u003e window instanceof Stage \u0026\u0026 ((Stage) window).getTitle().equals(stageTitle))"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Returns the first stage, ordered by proximity to the current target window, with the stage title."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * The order that the windows are searched are as follows (proximity): current target window,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * children of the target window, rest of the windows."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * @throws StageNotFoundException if the stage is not found."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public Stage getStage(String stageTitle) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Optional\u003cStage\u003e targetStage \u003d listTargetWindows().stream()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                .filter(Stage.class::isInstance) // checks that the window is of type Stage"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                .map(Stage.class::cast)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                .filter(stage -\u003e stage.getTitle().equals(stageTitle))"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return targetStage.orElseThrow(StageNotFoundException::new);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 114
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/AlertDialogHandle.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.control.DialogPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * A handle for the {@code AlertDialog} of the UI."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class AlertDialogHandle extends StageHandle {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private final DialogPane dialogPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public AlertDialogHandle(Stage stage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        dialogPane \u003d getChildNode(\"#\" + UiManager.ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Returns the text of the header in the {@code AlertDialog}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public String getHeaderText() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return dialogPane.getHeaderText();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Returns the text of the content in the {@code AlertDialog}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public String getContentText() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return dialogPane.getContentText();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 32
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CommandBoxHandle.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * A handle to the {@code CommandBox} in the GUI."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class CommandBoxHandle extends NodeHandle\u003cTextField\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String COMMAND_INPUT_FIELD_ID \u003d \"#commandTextField\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public CommandBoxHandle(TextField commandBoxNode) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        super(commandBoxNode);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Returns the text in the command box."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return getRootNode().getText();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Enters the given command in the Command Box and presses enter."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void run(String command) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        click();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        guiRobot.interact(() -\u003e getRootNode().setText(command));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        guiRobot.type(KeyCode.ENTER);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Returns the list of style classes present in the command box."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public ObservableList\u003cString\u003e getStyleClass() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return getRootNode().getStyleClass();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 42
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/HelpWindowHandle.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * A handle to the {@code HelpWindow} of the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class HelpWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String HELP_WINDOW_TITLE \u003d \"Help\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public HelpWindowHandle(Stage helpWindowStage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        super(helpWindowStage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Returns true if a help window is currently present in the application."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static boolean isWindowPresent() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return new GuiRobot().isWindowShown(HELP_WINDOW_TITLE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 23
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainMenuHandle.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * Provides a handle to the main menu of the app."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class MainMenuHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String MENU_BAR_ID \u003d \"#menuBar\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public MainMenuHandle(Node mainMenuNode) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        super(mainMenuNode);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Opens the {@code HelpWindow} using the menu bar in {@code MainWindow}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void openHelpWindowUsingMenu() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        clickOnMenuItemsSequentially(\"Help\", \"F1\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Opens the {@code HelpWindow} by pressing the shortcut key associated"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * with the menu bar in {@code MainWindow}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void openHelpWindowUsingAccelerator() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        guiRobot.push(KeyCode.F1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Clicks on {@code menuItems} in order."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private void clickOnMenuItemsSequentially(String... menuItems) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Arrays.stream(menuItems).forEach(guiRobot::clickOn);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 39
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private final PersonListPanelHandle personListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        personListPanel \u003d new PersonListPanelHandle(getChildNode(PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 45
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/NodeHandle.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * Provides access to a node in a JavaFx application for GUI testing purposes."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public abstract class NodeHandle\u003cT extends Node\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private final T rootNode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    protected NodeHandle(T rootNode) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        this.rootNode \u003d requireNonNull(rootNode);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    protected T getRootNode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return rootNode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * @param query name of the CSS selector for the node to retrieve."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    protected \u003cQ extends Node\u003e Q getChildNode(String query) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Optional\u003cQ\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Clicks on the root node (i.e. itself)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void click() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        guiRobot.clickOn(rootNode);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 44
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * Provides a handle to a person card in the person list panel."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Returns true if this handle contains {@code person}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public boolean equals(Person person) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return getName().equals(person.getName().fullName)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                \u0026\u0026 getAddress().equals(person.getAddress().value)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                \u0026\u0026 getPhone().equals(person.getPhone().value)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                \u0026\u0026 getEmail().equals(person.getEmail().value)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                \u0026\u0026 getTags().equals(person.getTags().stream()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                        .sorted()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                        .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 86
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonListPanelHandle.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * Provides a handle for {@code PersonListPanel} containing the list of {@code PersonCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class PersonListPanelHandle extends NodeHandle\u003cListView\u003cPerson\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String PERSON_LIST_VIEW_ID \u003d \"#personListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private Optional\u003cPerson\u003e lastRememberedSelectedPersonCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public PersonListPanelHandle(ListView\u003cPerson\u003e personListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        super(personListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Returns a handle to the selected {@code PersonCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public PersonCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        List\u003cPerson\u003e selectedPersonList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (selectedPersonList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            throw new AssertionError(\"Person list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                .map(PersonCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedPersonList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        List\u003cPerson\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Navigates the listview to display {@code person}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void navigateToCard(Person person) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (!getRootNode().getItems().contains(person)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            throw new IllegalArgumentException(\"Person does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            getRootNode().scrollTo(person);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Selects the {@code PersonCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Returns the person card handle of a person associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public PersonCardHandle getPersonCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                .map(PersonCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                .filter(handle -\u003e handle.equals(getPerson(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private Person getPerson(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Remembers the selected {@code PersonCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void rememberSelectedPersonCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        List\u003cPerson\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            lastRememberedSelectedPersonCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            lastRememberedSelectedPersonCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Returns true if the selected {@code PersonCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * {@code rememberSelectedPersonCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public boolean isSelectedPersonCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        List\u003cPerson\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return lastRememberedSelectedPersonCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return !lastRememberedSelectedPersonCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                    || !lastRememberedSelectedPersonCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 159
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/ResultDisplayHandle.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * A handler for the {@code ResultDisplay} of the UI"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class ResultDisplayHandle extends NodeHandle\u003cTextArea\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String RESULT_DISPLAY_ID \u003d \"#resultDisplay\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public ResultDisplayHandle(TextArea resultDisplayNode) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        super(resultDisplayNode);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Returns the text in the result display."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return getRootNode().getText();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 22
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StageHandle.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * Provides access to a stage in a JavaFx application for GUI testing purposes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public abstract class StageHandle {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private final Stage stage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public StageHandle(Stage stage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        this.stage \u003d requireNonNull(stage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Closes {@code stage}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        guiRobot.interact(stage::close);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertFalse(stage.isShowing());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Focuses on this {@code stage}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        String windowTitle \u003d stage.getTitle();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        logger.info(\"Focusing on\" + windowTitle);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        guiRobot.interact(stage::requestFocus);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        logger.info(\"Finishing focus on\" + windowTitle);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Returns true if currently focusing on this stage."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public boolean isFocused() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return stage.isFocused();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code stage}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * @param query name of the CSS selector for the node to retrieve."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(String query) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(stage.getScene().getRoot()).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 63
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StatusBarFooterHandle.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.control.Labeled;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * A handle for the {@code StatusBarFooter} at the footer of the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class StatusBarFooterHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String STATUS_BAR_PLACEHOLDER \u003d \"#statusbarPlaceholder\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final String SYNC_STATUS_ID \u003d \"#syncStatus\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final String SAVE_LOCATION_STATUS_ID \u003d \"#saveLocationStatus\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private final Labeled syncStatusNode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private final Labeled saveLocationNode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private String lastRememberedSyncStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private String lastRememberedSaveLocation;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public StatusBarFooterHandle(Node statusBarFooterNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        super(statusBarFooterNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        syncStatusNode \u003d getChildNode(SYNC_STATUS_ID);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        saveLocationNode \u003d getChildNode(SAVE_LOCATION_STATUS_ID);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Returns the text of the sync status portion of the status bar."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public String getSyncStatus() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return syncStatusNode.getText();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Returns the text of the \u0027save location\u0027 portion of the status bar."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public String getSaveLocation() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return saveLocationNode.getText();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Remembers the content of the sync status portion of the status bar."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void rememberSyncStatus() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        lastRememberedSyncStatus \u003d getSyncStatus();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Returns true if the current content of the sync status is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * {@code rememberSyncStatus()} call."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public boolean isSyncStatusChanged() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return !lastRememberedSyncStatus.equals(getSyncStatus());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Remembers the content of the \u0027save location\u0027 portion of the status bar."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void rememberSaveLocation() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        lastRememberedSaveLocation \u003d getSaveLocation();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Returns true if the current content of the \u0027save location\u0027 is different from the value remembered by the most"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * recent {@code rememberSaveLocation()} call."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public boolean isSaveLocationChanged() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return !lastRememberedSaveLocation.equals(getSaveLocation());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 71
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/exceptions/EventTimeoutException.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package guitests.guihandles.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * Represents an error which occurs when a timeout occurs when waiting for an event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class EventTimeoutException extends StageNotFoundException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 7
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/exceptions/NodeNotFoundException.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package guitests.guihandles.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * Signals that the node cannot be found."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class NodeNotFoundException extends NoSuchElementException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 9
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/exceptions/StageNotFoundException.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package guitests.guihandles.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * Signals that the stage cannot be found."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class StageNotFoundException extends NoSuchElementException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private Path saveFileLocation;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private Path prefFileLocation;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, Path saveFileLocation, Path prefFileLocation) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        this.prefFileLocation \u003d prefFileLocation;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(saveFileLocation);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                jsonAddressBookStorage.saveAddressBook(initialDataSupplier.get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        config.setUserPrefsFilePath(prefFileLocation);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        userPrefs.setAddressBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public AddressBook readStorageAddressBook() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return new AddressBook(storage.readAddressBook().get());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            throw new AssertionError(\"Data is not in the AddressBook format.\", dce);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return storage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Model copy \u003d new ModelManager((model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 103
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ENTITY_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.logic.commands.ListBodyCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        String deleteCommand \u003d \"delete -b 99999\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_ENTITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        String listBodyCommand \u003d ListCommand.COMMAND_WORD + \" -b\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        assertCommandSuccess(listBodyCommand, ListBodyCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        expectedModel.addEntity(expectedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void getFilteredWorkerList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredWorkerList().remove(0));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void getFilteredBodyList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredBodyList().remove(0));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 11,
      "arjavibahety": 3,
      "bernicechio": 3,
      "-": 156
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.commands.AddCommand.MESSAGE_UNDO_SUCCESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.commands.UndoableCommand.MESSAGE_NOT_EXECUTED_BEFORE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.testutil.TypicalUndoableCommands.TYPICAL_ADD_COMMAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.testutil.TypicalUndoableCommands.TYPICAL_BODY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " * Contains integration tests (interaction with the Model and UndoCommand) for {@code AddCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        expectedModel.addEntity(validPerson);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    //@@author ambervoong"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void undo_previouslyExecuted_success() throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UndoableCommand addCommand \u003d TYPICAL_ADD_COMMAND;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        addCommand.execute(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        expectedModel.addExecutedCommand(addCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_UNDO_SUCCESS, TYPICAL_BODY);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertCommandSuccess(undoCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void undo_notExecutedBefore_undoFailureException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UndoableCommand addCommand \u003d TYPICAL_ADD_COMMAND;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_NOT_EXECUTED_BEFORE, () -\u003e addCommand.undo(model));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_ENTITY);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 2,
      "ambervoong": 34,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.entity.fridge.Fridge;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.worker.Worker;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.notif.Notif;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.testutil.WorkerBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void constructor_nullEntity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void execute_entityAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        ModelStubAcceptingEntityAdded modelStub \u003d new ModelStubAcceptingEntityAdded();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Worker validWorker \u003d new WorkerBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validWorker).execute(modelStub);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validWorker), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(Arrays.asList(validWorker), modelStub.entitiesAdded);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void execute_duplicateEntity_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Worker validWorker \u003d new WorkerBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validWorker);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithEntity(validWorker);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_ENTITY, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Worker zach \u003d new WorkerBuilder().withName(\"Zach\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Worker xenia \u003d new WorkerBuilder().withName(\"Xenia\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        AddCommand addZachCommand \u003d new AddCommand(zach);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        AddCommand addXeniaCommand \u003d new AddCommand(xenia);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertTrue(addZachCommand.equals(addZachCommand));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(zach);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertTrue(addZachCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertFalse(addZachCommand.equals(1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertFalse(addZachCommand.equals(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // different entity -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertFalse(addZachCommand.equals(addXeniaCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        public void addExecutedCommand(UndoableCommand command) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        public UndoableCommand getExecutedCommand() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        public void addUndoneCommand(UndoableCommand command) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        public UndoableCommand getUndoneCommand() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        public void addEntity(Entity entity) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        public boolean hasEntity(Entity entity) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        public void addNotif(Notif notif) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        public void deleteEntity(Entity target) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        public void setEntity(Entity target, Entity editedEntity) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        public boolean hasNotif(Notif notif) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        public void deleteNotif(Notif target) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        public void setNotif(Notif target, Notif editedEntity) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        public ObservableList\u003cWorker\u003e getFilteredWorkerList() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        public void updateFilteredWorkerList(Predicate\u003cWorker\u003e predicate) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        public ObservableList\u003cBody\u003e getFilteredBodyList() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        public void updateFilteredBodyList(Predicate\u003cBody\u003e predicate) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        public void updateFilteredFridgeList(Predicate\u003cFridge\u003e predicate) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        public ObservableList\u003c? extends Entity\u003e getFilteredEntityList(String entityType) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        public ObservableList\u003cNotif\u003e getFilteredNotifList() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        public ObservableList\u003cFridge\u003e getFilteredFridgeList() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        public void updateFilteredNotifList(Predicate\u003cNotif\u003e predicate) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        public ReadOnlyProperty\u003cBody\u003e selectedBodyProperty() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        public Body getSelectedBody() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        public void setSelectedBody(Body body) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * A Model stub that contains a single entity."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private class ModelStubWithEntity extends ModelStub {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        private final Entity entity;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        ModelStubWithEntity(Entity entity) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            requireNonNull(entity);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            this.entity \u003d entity;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        public boolean hasEntity(Entity entity) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            requireNonNull(entity);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return this.entity.isSameEntity(entity);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * A Model stub that always accept the entity being added."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private class ModelStubAcceptingEntityAdded extends ModelStub {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        final ArrayList\u003cEntity\u003e entitiesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        public boolean hasEntity(Entity entity) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            requireNonNull(entity);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return entitiesAdded.stream().anyMatch(entity::isSameEntity);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        public void addEntity(Entity entity) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            requireNonNull(entity);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            entitiesAdded.add(entity);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        public void addExecutedCommand(UndoableCommand command) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 81,
      "dalisc": 2,
      "arjavibahety": 41,
      "ambervoong": 25,
      "-": 155
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_JOINED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_ADMISSION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_BIRTH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_DEATH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESIGNATION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMPLOYMENT_STATUS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE_NUMBER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEX;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.body.BodyNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.fridge.Fridge;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.worker.Worker;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String VALID_WORKER_FLAG \u003d \" -w\"; // whitespace in front is necessary for parser"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String VALID_NAME_ZACH \u003d \"Zach Tan\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String VALID_NAME_XENIA \u003d \"Xenia Lee\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String VALID_SEX_ZACH \u003d \"MALE\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String VALID_SEX_XENIA \u003d \"FEMALE\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String VALID_PHONE_NUMBER_ZACH \u003d \"91234567\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String VALID_PHONE_NUMBER_XENIA \u003d \"98765432\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String VALID_DATE_OF_BIRTH_ZACH \u003d \"1/2/1997\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String VALID_DATE_OF_BIRTH_XENIA \u003d \"3/4/1997\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String VALID_DATE_JOINED_ZACH \u003d \"1/2/2019\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String VALID_DATE_JOINED_XENIA \u003d \"3/4/2019\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String VALID_DESIGNATION_ZACH \u003d \"coroner\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String VALID_DESIGNATION_XENIA \u003d \"cleaner\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String VALID_EMPLOYMENT_STATUS_ZACH \u003d \"autopsy investigation\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String VALID_EMPLOYMENT_STATUS_XENIA \u003d \"cleaning\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String VALID_BODY_FLAG \u003d \" -b\"; // whitespace in front is necessary for parser"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String VALID_NAME_JOHN \u003d \"John Doe\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String VALID_NAME_JANE \u003d \"Jane Doe\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String VALID_SEX_JOHN \u003d \"MALE\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String VALID_SEX_JANE \u003d \"FEMALE\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String VALID_DATE_OF_ADMISSION_JOHN \u003d \"5/6/2019\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String VALID_DATE_OF_ADMISSION_JANE \u003d \"7/8/2019\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String VALID_DATE_OF_DEATH_JOHN \u003d \"9/10/2019\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String VALID_DATE_OF_DEATH_JANE \u003d \"11/12/2019\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String NAME_DESC_ZACH \u003d \" \" + PREFIX_NAME + \" \" + VALID_NAME_ZACH;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String NAME_DESC_XENIA \u003d \" \" + PREFIX_NAME + \" \" + VALID_NAME_XENIA;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String SEX_DESC_ZACH \u003d \" \" + PREFIX_SEX + \" \" + VALID_SEX_ZACH;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String SEX_DESC_XENIA \u003d \" \" + PREFIX_SEX + \" \" + VALID_SEX_XENIA;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String PHONE_NUMBER_DESC_ZACH \u003d \" \" + PREFIX_PHONE_NUMBER + \" \" + VALID_PHONE_NUMBER_ZACH;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String PHONE_NUMBER_DESC_XENIA \u003d \" \" + PREFIX_PHONE_NUMBER + \" \" + VALID_PHONE_NUMBER_XENIA;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String DATE_OF_BIRTH_DESC_ZACH \u003d \" \" + PREFIX_DATE_OF_BIRTH + \" \" + VALID_DATE_OF_BIRTH_ZACH;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String DATE_OF_BIRTH_DESC_XENIA \u003d \" \" + PREFIX_DATE_OF_BIRTH + \" \" + VALID_DATE_OF_BIRTH_XENIA;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String DATE_JOINED_DESC_ZACH \u003d \" \" + PREFIX_DATE_JOINED + \" \" + VALID_DATE_JOINED_ZACH;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String DATE_JOINED_DESC_XENIA \u003d \" \" + PREFIX_DATE_JOINED + \" \" + VALID_DATE_JOINED_XENIA;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String DESIGNATION_DESC_ZACH \u003d \" \" + PREFIX_DESIGNATION + \" \" + VALID_DESIGNATION_ZACH;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String DESIGNATION_DESC_XENIA \u003d \" \" + PREFIX_DESIGNATION + \" \" + VALID_DESIGNATION_XENIA;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String EMPLOYMENT_STATUS_DESC_ZACH \u003d \" \" + PREFIX_EMPLOYMENT_STATUS + \" \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + VALID_EMPLOYMENT_STATUS_ZACH;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String EMPLOYMENT_STATUS_DESC_XENIA \u003d \" \" + PREFIX_EMPLOYMENT_STATUS + \" \""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + VALID_EMPLOYMENT_STATUS_XENIA;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String DATE_OF_ADMISSION_DESC_ZACH \u003d \" \" + PREFIX_DATE_OF_ADMISSION + \" \""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + VALID_DATE_OF_ADMISSION_JOHN;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String DATE_OF_ADMISSION_DESC_XENIA \u003d \" \" + PREFIX_DATE_OF_ADMISSION + \" \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + VALID_DATE_OF_ADMISSION_JANE;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String DATE_OF_DEATH_DESC_ZACH \u003d \" \" + PREFIX_DATE_OF_DEATH + \" \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        + VALID_DATE_OF_DEATH_JOHN;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String DATE_OF_DEATH_DESC_XENIA \u003d \" \" + PREFIX_DATE_OF_DEATH + \" \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        + VALID_DATE_OF_DEATH_JANE;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String NAME_DESC_JOHN \u003d \" \" + PREFIX_NAME + \" \" + VALID_NAME_JOHN;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String NAME_DESC_JANE \u003d \" \" + PREFIX_NAME + \" \" + VALID_NAME_JANE;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String SEX_DESC_JOHN \u003d \" \" + PREFIX_SEX + \" \" + VALID_SEX_JOHN;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String SEX_DESC_JANE \u003d \" \" + PREFIX_SEX + \" \" + VALID_SEX_JANE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String DATE_OF_ADMISSION_DESC_JOHN \u003d \" \" + PREFIX_DATE_OF_ADMISSION + \" \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + VALID_DATE_OF_ADMISSION_JOHN;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String DATE_OF_ADMISSION_DESC_JANE \u003d \" \" + PREFIX_DATE_OF_ADMISSION + \" \""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        + VALID_DATE_OF_ADMISSION_JANE;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String DATE_OF_DEATH_DESC_JOHN \u003d \" \" + PREFIX_DATE_OF_DEATH + \" \" + VALID_DATE_OF_DEATH_JOHN;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String DATE_OF_DEATH_DESC_JANE \u003d \" \" + PREFIX_DATE_OF_DEATH + \" \" + VALID_DATE_OF_DEATH_JANE;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE_NUMBER + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE_NUMBER + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE_NUMBER + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredListPerson \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        List\u003cBody\u003e expectedFilteredListBody \u003d new ArrayList\u003c\u003e(actualModel.getFilteredBodyList());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        List\u003cWorker\u003e expectedFilteredListWorker \u003d new ArrayList\u003c\u003e(actualModel.getFilteredWorkerList());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        List\u003cFridge\u003e expectedFilteredListFridge \u003d new ArrayList\u003c\u003e(actualModel.getFilteredFridgeList());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Body expectedSelectedBody \u003d actualModel.getSelectedBody();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(expectedFilteredListPerson, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(expectedFilteredListBody, actualModel.getFilteredBodyList());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(expectedFilteredListWorker, actualModel.getFilteredWorkerList());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(expectedFilteredListFridge, actualModel.getFilteredFridgeList());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(expectedSelectedBody, actualModel.getSelectedBody());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * - the address book, filtered entity list and selected entity in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public static void assertDeleteCommandFailure(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                                                  String entityType) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        List\u003cEntity\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredEntityList(entityType));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredEntityList(entityType.toUpperCase()));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the body at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static void showBodyAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredBodyList().size());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Body body \u003d model.getFilteredBodyList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        final String[] splitName \u003d body.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        model.updateFilteredBodyList(new BodyNameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(1, model.getFilteredBodyList().size());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 102,
      "arjavibahety": 16,
      "ambervoong": 3,
      "-": 125
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertDeleteCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.commands.DeleteCommand.MESSAGE_UNDO_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.commands.UndoableCommand.MESSAGE_NOT_EXECUTED_BEFORE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.testutil.TypicalIdentificationNumbers.FIRST_BODY_ID_NUM;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.testutil.TypicalIdentificationNumbers.FIRST_FRIDGE_ID_NUM;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.testutil.TypicalIdentificationNumbers.FIRST_WORKER_ID_NUM;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.testutil.TypicalIdentificationNumbers.SECOND_BODY_ID_NUM;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.testutil.TypicalIdentificationNumbers.SECOND_FRIDGE_ID_NUM;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.testutil.TypicalIdentificationNumbers.SECOND_WORKER_ID_NUM;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.testutil.TypicalUndoableCommands.TYPICAL_BODY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.testutil.TypicalUndoableCommands.TYPICAL_DELETE_COMMAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.entity.IdentificationNumber;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.entity.fridge.Fridge;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.entity.worker.Worker;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        // Delete Body"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        List\u003cBody\u003e bodyList \u003d model.getFilteredBodyList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        for (Body body : bodyList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            if (body.getIdNum().equals(FIRST_BODY_ID_NUM)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                DeleteCommand deleteBodyCommand \u003d new DeleteCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                        Index.fromZeroBased(FIRST_BODY_ID_NUM.getIdNum()), \"b\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                String expectedBodyMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_ENTITY_SUCCESS, body);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                ModelManager expectedBodyModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                expectedBodyModel.deleteEntity(body);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                assertCommandSuccess(deleteBodyCommand, model, expectedBodyMessage, expectedBodyModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        // Delete Worker"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        List\u003cWorker\u003e workerList \u003d model.getFilteredWorkerList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        for (Worker worker : workerList) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            if (worker.getIdNum().equals(FIRST_WORKER_ID_NUM)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                DeleteCommand deleteWorkerCommand \u003d new DeleteCommand("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                        Index.fromZeroBased(FIRST_WORKER_ID_NUM.getIdNum()), \"w\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                String expectedWorkerMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_ENTITY_SUCCESS, worker);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                ModelManager expectedWorkerModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                expectedWorkerModel.deleteEntity(worker);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                assertCommandSuccess(deleteWorkerCommand, model, expectedWorkerMessage, expectedWorkerModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        // Delete Fridge"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        List\u003cFridge\u003e fridgeList \u003d model.getFilteredFridgeList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        for (Fridge fridge : fridgeList) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            if (fridge.getIdNum().equals(FIRST_FRIDGE_ID_NUM)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                DeleteCommand deleteFridgeCommand \u003d new DeleteCommand("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                        Index.fromZeroBased(FIRST_FRIDGE_ID_NUM.getIdNum()), \"f\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                String expectedFridgeMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_ENTITY_SUCCESS, fridge);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                ModelManager expectedFridgeModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                expectedFridgeModel.deleteEntity(fridge);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                assertCommandSuccess(deleteFridgeCommand, model, expectedFridgeMessage, expectedFridgeModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        // Delete Body"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        IdentificationNumber outOfBoundBodyIndex \u003d IdentificationNumber.customGenerateId(\"B\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                model.getFilteredEntityList(\"B\").size() + 1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        DeleteCommand deleteBodyCommand \u003d new DeleteCommand("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                Index.fromZeroBased(outOfBoundBodyIndex.getIdNum()), \"b\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertDeleteCommandFailure(deleteBodyCommand, model, Messages.MESSAGE_INVALID_ENTITY_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                \"b\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        // Delete Worker"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        IdentificationNumber outOfBoundWorkerIndex \u003d IdentificationNumber.customGenerateId(\"W\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                model.getFilteredEntityList(\"W\").size() + 1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        DeleteCommand deleteWorkerCommand \u003d new DeleteCommand("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                Index.fromZeroBased(outOfBoundWorkerIndex.getIdNum()), \"w\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertDeleteCommandFailure(deleteWorkerCommand, model, Messages.MESSAGE_INVALID_ENTITY_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                \"w\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        // Delete Fridge"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        IdentificationNumber outOfBoundFridgeIndex \u003d IdentificationNumber.customGenerateId(\"F\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                model.getFilteredEntityList(\"F\").size() + 1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        DeleteCommand deleteFridgeCommand \u003d new DeleteCommand("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                Index.fromZeroBased(outOfBoundFridgeIndex.getIdNum()), \"f\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertDeleteCommandFailure(deleteFridgeCommand, model, Messages.MESSAGE_INVALID_ENTITY_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                \"f\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_ENTITY_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        expectedModel.deleteEntity(personToDelete);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_ENTITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    //@@author ambervoong"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void undo_previouslyExecuted_success() throws CommandException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UndoableCommand deleteCommand \u003d TYPICAL_DELETE_COMMAND;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Model model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        model.addEntity(TYPICAL_BODY);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        deleteCommand.execute(model);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        expectedModel.addEntity(TYPICAL_BODY);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        expectedModel.addExecutedCommand(deleteCommand);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_UNDO_SUCCESS, TYPICAL_BODY);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertCommandSuccess(undoCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void undo_notExecutedBefore_undoFailureException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UndoableCommand deleteCommand \u003d TYPICAL_DELETE_COMMAND;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Model model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_NOT_EXECUTED_BEFORE, () -\u003e deleteCommand.undo(model));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        // BODY"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        // model.addEntity(ALICE);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        // model.addEntity(BOB);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        DeleteCommand deleteFirstBodyCommand \u003d new DeleteCommand("
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                Index.fromZeroBased(FIRST_BODY_ID_NUM.getIdNum()), \"b\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        DeleteCommand deleteSecondBodyCommand \u003d new DeleteCommand("
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                Index.fromZeroBased(SECOND_BODY_ID_NUM.getIdNum()), \"b\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertTrue(deleteFirstBodyCommand.equals(deleteFirstBodyCommand));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(Index.fromZeroBased(FIRST_BODY_ID_NUM.getIdNum()),"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                \"b\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertTrue(deleteFirstBodyCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertFalse(deleteFirstBodyCommand.equals(1));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertFalse(deleteFirstBodyCommand.equals(null));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        // different body -\u003e returns false"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertFalse(deleteFirstBodyCommand.equals(deleteSecondBodyCommand));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        // WORKER"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        // model.addEntity(CLARA);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        // model.addEntity(BENSON);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        DeleteCommand deleteFirstWorkerCommand \u003d new DeleteCommand("
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                Index.fromZeroBased(FIRST_WORKER_ID_NUM.getIdNum()), \"w\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        DeleteCommand deleteSecondWorkerCommand \u003d new DeleteCommand("
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                Index.fromZeroBased(SECOND_WORKER_ID_NUM.getIdNum()), \"w\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertTrue(deleteFirstWorkerCommand.equals(deleteFirstWorkerCommand));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        DeleteCommand deleteFirstWorkerCommandCopy \u003d"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                new DeleteCommand(Index.fromZeroBased(FIRST_WORKER_ID_NUM.getIdNum()), \"w\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertTrue(deleteFirstWorkerCommand.equals(deleteFirstWorkerCommandCopy));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertFalse(deleteFirstWorkerCommand.equals(1));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertFalse(deleteFirstWorkerCommand.equals(null));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        // different worker -\u003e returns false"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertFalse(deleteFirstWorkerCommand.equals(deleteSecondWorkerCommand));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        // todo FRIDGE"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        DeleteCommand deleteFirstFridgeCommand \u003d"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                new DeleteCommand(Index.fromZeroBased(FIRST_FRIDGE_ID_NUM.getIdNum()), \"f\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        DeleteCommand deleteSecondFridgeCommand \u003d"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                new DeleteCommand(Index.fromZeroBased(SECOND_FRIDGE_ID_NUM.getIdNum()), \"f\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertTrue(deleteFirstFridgeCommand.equals(deleteFirstFridgeCommand));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        DeleteCommand deleteFirstFridgeCommandCopy \u003d"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                new DeleteCommand(Index.fromZeroBased(FIRST_FRIDGE_ID_NUM.getIdNum()), \"f\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertTrue(deleteFirstFridgeCommand.equals(deleteFirstFridgeCommandCopy));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertFalse(deleteFirstFridgeCommand.equals(1));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertFalse(deleteFirstFridgeCommand.equals(null));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        // different worker -\u003e returns false"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertFalse(deleteFirstFridgeCommand.equals(deleteSecondFridgeCommand));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 1,
      "arjavibahety": 150,
      "ambervoong": 35,
      "-": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_BODIES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_FLAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_WORKERS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import static seedu.address.testutil.TypicalBodies.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import static seedu.address.testutil.TypicalBodies.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import static seedu.address.testutil.TypicalWorkers.BENSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import static seedu.address.testutil.TypicalWorkers.CHARLIE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import seedu.address.model.entity.body.BodyNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import seedu.address.model.entity.worker.WorkerNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    private static final String BODY_FLAG \u003d \"b\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    private static final String WORKER_FLAG \u003d \"w\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        List\u003cString\u003e firstList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        List\u003cString\u003e secondList \u003d Collections.singletonList(\"second\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstList, BODY_FLAG);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondList, BODY_FLAG);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstList, BODY_FLAG);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    public void execute_noFlagGiven_invalidCommand() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        String expectedMessage \u003d MESSAGE_NO_FLAG;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        List\u003cString\u003e predicateList \u003d prepareList(\" \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        BodyNameContainsKeywordsPredicate predicate \u003d new BodyNameContainsKeywordsPredicate(predicateList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicateList, \"\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        expectedModel.updateFilteredBodyList(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        assertCommandSuccess(command, model, expectedResult, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    public void execute_zeroKeywords_noBodyFound() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BODIES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        List\u003cString\u003e predicateList \u003d prepareList(\" \");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        BodyNameContainsKeywordsPredicate predicate \u003d new BodyNameContainsKeywordsPredicate(predicateList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicateList, BODY_FLAG);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        expectedModel.updateFilteredBodyList(predicate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        assertCommandSuccess(command, model, expectedResult, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredBodyList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    public void execute_zeroKeywords_noWorkerFound() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_WORKERS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        List\u003cString\u003e predicateList \u003d prepareList(\" \");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        WorkerNameContainsKeywordsPredicate predicate \u003d new WorkerNameContainsKeywordsPredicate(predicateList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicateList, WORKER_FLAG);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        expectedModel.updateFilteredWorkerList(predicate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        assertCommandSuccess(command, model, expectedResult, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredWorkerList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    public void execute_multipleKeywords_multipleBodiesFound() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BODIES_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        List\u003cString\u003e predicateList \u003d prepareList(\"Alice Bob\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        BodyNameContainsKeywordsPredicate predicate \u003d new BodyNameContainsKeywordsPredicate(predicateList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicateList, BODY_FLAG);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        expectedModel.updateFilteredBodyList(predicate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        assertCommandSuccess(command, model, expectedResult, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BOB), model.getFilteredBodyList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    public void execute_multipleKeywords_multipleWorkersFound() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_WORKERS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        List\u003cString\u003e predicateList \u003d prepareList(\"Benson Charlie\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        WorkerNameContainsKeywordsPredicate predicate \u003d new WorkerNameContainsKeywordsPredicate(predicateList);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicateList, WORKER_FLAG);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        expectedModel.updateFilteredWorkerList(predicate);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        assertCommandSuccess(command, model, expectedResult, expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        assertEquals(Arrays.asList(BENSON, CHARLIE), model.getFilteredWorkerList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    private List\u003cString\u003e prepareList(String userInput) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        return Arrays.asList(userInput.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalisc": 70,
      "arjavibahety": 1,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/GenReportCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ENTITY_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import static seedu.address.logic.commands.GenReportCommand.MESSAGE_GENREPORT_SUCCESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import static seedu.address.testutil.TypicalBodies.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import static seedu.address.testutil.TypicalBodies.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import static seedu.address.testutil.TypicalIdentificationNumbers.FIRST_BODY_ID_NUM;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import static seedu.address.testutil.TypicalIdentificationNumbers.SECOND_BODY_ID_NUM;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.model.entity.IdentificationNumber;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "public class GenReportCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public void execute_validBodyId_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        List\u003cBody\u003e bodyList \u003d model.getFilteredBodyList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        for (Body body : bodyList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            if (body.getIdNum().equals(FIRST_BODY_ID_NUM)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "                GenReportCommand genReportCommand \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "                        new GenReportCommand(Index.fromZeroBased(FIRST_BODY_ID_NUM.getIdNum()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "                String expectedBodyMessage \u003d String.format(MESSAGE_GENREPORT_SUCCESS, body);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "                assertCommandSuccess(genReportCommand, model, expectedBodyMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public void execute_invalidBodyId_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        IdentificationNumber outOfBoundBodyIndex \u003d IdentificationNumber.customGenerateId(\"B\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "                model.getFilteredBodyList().size() + 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        GenReportCommand genReportCommand \u003d new GenReportCommand(Index.fromZeroBased(outOfBoundBodyIndex.getIdNum()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        assertCommandFailure(genReportCommand, model, MESSAGE_INVALID_ENTITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        model.addEntity(ALICE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        model.addEntity(BOB);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        GenReportCommand genFirstBodyReportCommand \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "                new GenReportCommand(Index.fromZeroBased(FIRST_BODY_ID_NUM.getIdNum()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        GenReportCommand genSecondBodyReportCommand \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "                new GenReportCommand(Index.fromZeroBased(SECOND_BODY_ID_NUM.getIdNum()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        assertEquals(genFirstBodyReportCommand, genFirstBodyReportCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        GenReportCommand genFirstBodyCommandCopy \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "                new GenReportCommand(Index.fromZeroBased(FIRST_BODY_ID_NUM.getIdNum()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        assertEquals(genFirstBodyReportCommand, genFirstBodyCommandCopy);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        assertNotEquals(1, genFirstBodyReportCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        assertNotEquals(null, genFirstBodyReportCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        assertNotEquals(genFirstBodyReportCommand, genSecondBodyReportCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bernicechio": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        assertCommandSuccess(new ListBodyCommand(), model, ListBodyCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        assertCommandSuccess(new ListWorkerCommand(), model, ListWorkerCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        assertCommandSuccess(new ListFridgeCommand(), model, ListFridgeCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() { //?"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bernicechio": 4,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/NotifCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.model.entity.body.BodyStatus.PENDING_CLAIM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.model.entity.body.BodyStatus.PENDING_POLICE_REPORT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.testutil.TypicalNotifs.ALICE_NOTIF;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.testutil.TypicalNotifs.BOB_NOTIF;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "public class NotifCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private static final long ONE_SECOND \u003d 1000;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public void execute_notifChangesBodyStatus_changeSuccessful() throws CommandException, InterruptedException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        NotifCommand notifCommand \u003d new NotifCommand(BOB_NOTIF, 500, TimeUnit.MILLISECONDS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        notifCommand.execute(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        Thread.sleep(ONE_SECOND);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertEquals(Optional.of(PENDING_POLICE_REPORT), BOB_NOTIF.getBody().getBodyStatus());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public void execute_notifNotChangesBodyStatus_notChangeSuccessful() throws CommandException, InterruptedException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        NotifCommand notifCommand \u003d new NotifCommand(ALICE_NOTIF, 500, TimeUnit.MILLISECONDS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        notifCommand.execute(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        Thread.sleep(ONE_SECOND);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertEquals(Optional.of(PENDING_CLAIM), ALICE_NOTIF.getBody().getBodyStatus());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.commands.RedoCommand.MESSAGE_EMPTY_REDO_HISTORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.commands.UpdateCommand.MESSAGE_UPDATE_ENTITY_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.testutil.TypicalUndoableCommands.TYPICAL_BODY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.testutil.TypicalUndoableCommands.TYPICAL_UPDATE_BODY_DESCRIPTOR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.testutil.TypicalUndoableCommands.TYPICAL_UPDATE_COMMAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.parser.utility.UpdateBodyDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "//@@author ambervoong"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand, and UndoableCommands)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "class RedoCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void execute_redoUpdateCommand_success() throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body body \u003d TYPICAL_BODY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        model.addEntity(body);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateBodyDescriptor descriptor \u003d TYPICAL_UPDATE_BODY_DESCRIPTOR;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateCommand updateCommand \u003d TYPICAL_UPDATE_COMMAND;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        updateCommand.execute(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        undoCommand.execute(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        RedoCommand redoCommand \u003d new RedoCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_UPDATE_ENTITY_SUCCESS, body);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        expectedModel.addEntity(body);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertCommandSuccess(redoCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void execute_redoExecutedCommand_failure() throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body body \u003d TYPICAL_BODY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        model.addEntity(body);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateCommand updateCommand \u003d TYPICAL_UPDATE_COMMAND;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // The command was executed but hasn\u0027t been undone yet"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        model.addExecutedCommand(updateCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        RedoCommand redoCommand \u003d new RedoCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // Even though the UpdateCommand got added to history, it will not be redone unless it had been undone before."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertCommandFailure(redoCommand, model, MESSAGE_EMPTY_REDO_HISTORY);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void execute_nothingToUndo_failure() throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        RedoCommand redoCommand \u003d new RedoCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        String expectedMessage \u003d MESSAGE_EMPTY_REDO_HISTORY;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertCommandFailure(redoCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambervoong": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showBodyAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "//@@ shaoyi1997-reused"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "//Reused from SE-EDU Address Book Level 4"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Index lastBodyIndex \u003d Index.fromOneBased(model.getFilteredBodyList().size());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertExecutionSuccess(lastBodyIndex);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredBodyList().size() + 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_ENTITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        showBodyAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        showBodyAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        showBodyAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        showBodyAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getBodyList().size());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_ENTITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // different body -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index},"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * and checks that the model\u0027s selected body is set to the body at {@code index} in the filtered body list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_BODY_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        expectedModel.setSelectedBody(model.getFilteredBodyList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertCommandSuccess(selectCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertCommandFailure(selectCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "//@@ shaoyi1997-reused"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 106,
      "arjavibahety": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.commands.UndoCommand.MESSAGE_EMPTY_UNDO_HISTORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.commands.UndoCommand.MESSAGE_UNDO_FAILURE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.commands.UpdateCommand.MESSAGE_UNDO_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.testutil.TypicalUndoableCommands.TYPICAL_BODY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.testutil.TypicalUndoableCommands.TYPICAL_UPDATE_BODY_DESCRIPTOR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.testutil.TypicalUndoableCommands.TYPICAL_UPDATE_COMMAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.parser.utility.UpdateBodyDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "//@@author ambervoong"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " * Contains integration tests (interaction with the Model and UndoableCommands)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "class UndoCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void execute_undoUpdateCommand_success() throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body body \u003d TYPICAL_BODY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        model.addEntity(body);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateBodyDescriptor descriptor \u003d TYPICAL_UPDATE_BODY_DESCRIPTOR;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateCommand updateCommand \u003d TYPICAL_UPDATE_COMMAND;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        updateCommand.execute(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_UNDO_SUCCESS, body);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        expectedModel.setEntity(model.getFilteredBodyList().get(0), body);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertCommandSuccess(undoCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void execute_undoNotExecutedCommand_failure() throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body body \u003d TYPICAL_BODY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        model.addEntity(body);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateBodyDescriptor descriptor \u003d TYPICAL_UPDATE_BODY_DESCRIPTOR;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateCommand updateCommand \u003d TYPICAL_UPDATE_COMMAND;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        model.addExecutedCommand(updateCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // Even though the UpdateCommand got added to history, it will not be undone unless it had been executed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertCommandFailure(undoCommand, model, MESSAGE_UNDO_FAILURE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void execute_nothingToUndo_failure() throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        String expectedMessage \u003d MESSAGE_EMPTY_UNDO_HISTORY;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertCommandFailure(undoCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambervoong": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoableCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.commands.RedoCommand.MESSAGE_EMPTY_REDO_HISTORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.commands.UpdateCommand.MESSAGE_UPDATE_ENTITY_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.testutil.TypicalUndoableCommands.TYPICAL_BODY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.testutil.TypicalUndoableCommands.TYPICAL_UPDATE_COMMAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.parser.utility.UpdateBodyDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.testutil.BodyBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "//@@author ambervoong"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "class UndoableCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void test_commandStateEnum() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(UndoableCommand.UndoableCommandState.UNDOABLE.toString(), \"UNDOABLE\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getCommandState() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // Default command state of an UndoableCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body body \u003d new BodyBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateBodyDescriptor descriptor \u003d new UpdateBodyDescriptor(body);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateCommand command \u003d new UpdateCommand(body.getIdNum(), descriptor);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(UndoableCommand.UndoableCommandState.PRE_EXECUTION, command.getCommandState());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void setUndoableGetCommandState() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateCommand updateCommand \u003d TYPICAL_UPDATE_COMMAND;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        updateCommand.setUndoable();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(updateCommand.getCommandState(), UndoableCommand.UndoableCommandState.UNDOABLE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void setRedoable() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateCommand updateCommand \u003d TYPICAL_UPDATE_COMMAND;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        updateCommand.setRedoable();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(updateCommand.getCommandState(), UndoableCommand.UndoableCommandState.REDOABLE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void execution_autoSetUndoable_true() throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        model.addEntity(TYPICAL_BODY);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateCommand updateCommand \u003d TYPICAL_UPDATE_COMMAND;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        updateCommand.execute(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // Executing a command automatically sets its state to Undoable."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(updateCommand.getCommandState(), UndoableCommand.UndoableCommandState.UNDOABLE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void redoCommand_undoneCommandExists_success() throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        model.addEntity(TYPICAL_BODY);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateCommand updateCommand \u003d TYPICAL_UPDATE_COMMAND;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        updateCommand.execute(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        undoCommand.execute(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        String expectedString \u003d String.format(MESSAGE_UPDATE_ENTITY_SUCCESS, TYPICAL_BODY);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        expectedModel.addEntity(TYPICAL_BODY);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        RedoCommand redoCommand \u003d new RedoCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertCommandSuccess(redoCommand, model, expectedString, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void redoCommand_emptyRedoStack_failure() throws CommandException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        model.addEntity(TYPICAL_BODY);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateCommand updateCommand \u003d TYPICAL_UPDATE_COMMAND;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        updateCommand.execute(model);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        RedoCommand redoCommand \u003d new RedoCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertCommandFailure(redoCommand, model, MESSAGE_EMPTY_REDO_HISTORY);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambervoong": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UpdateCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ENTITY_DISPLAYED_ID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.commands.UndoableCommand.MESSAGE_NOT_EXECUTED_BEFORE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.commands.UpdateCommand.MESSAGE_UNDO_SUCCESS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.testutil.TypicalUndoableCommands.TYPICAL_BODY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.testutil.TypicalUndoableCommands.TYPICAL_UPDATE_COMMAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.parser.utility.UpdateBodyDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.parser.utility.UpdateFridgeDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.IdentificationNumber;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.Sex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.fridge.Fridge;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.fridge.FridgeStatus;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.testutil.BodyBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.testutil.FridgeBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "//@@author ambervoong"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " * UpdateCommand."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "public class UpdateCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void executeBody_allFieldsSpecifiedFilteredList_success() throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body body \u003d new BodyBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        model.addEntity(body);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateBodyDescriptor descriptor \u003d new UpdateBodyDescriptor(body);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(body.getIdNum(), descriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        updateCommand.execute(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_ENTITY_SUCCESS, body);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        expectedModel.setEntity(model.getFilteredBodyList().get(0), body);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // Checks integration with UndoableCommand"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(updateCommand.getCommandState(), UndoableCommand.UndoableCommandState.UNDOABLE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertCommandSuccess(updateCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void executeBody_someFieldsSpecifiedFilteredList_success() throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body body \u003d new BodyBuilder().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        body.setSex(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        body.setCauseOfDeath(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        model.addEntity(body);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateBodyDescriptor descriptor \u003d new UpdateBodyDescriptor(body);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setSex(null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setCauseOfDeath(null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(body.getIdNum(), descriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        updateCommand.execute(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_ENTITY_SUCCESS, body);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        expectedModel.setEntity(model.getFilteredBodyList().get(0), body);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertCommandSuccess(updateCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void executeBody_bodyIdNotInFilteredList_failure() throws CommandException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // Fails because the Body was not added to the model."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body body \u003d new BodyBuilder().build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(body.getIdNum(), new UpdateBodyDescriptor());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        String expectedMessage \u003d MESSAGE_INVALID_ENTITY_DISPLAYED_ID;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertCommandFailure(updateCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    // Note that a Fridge\u0027s status is automatically set to UNOCCUPIED if does not contain a body."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void executeFridge_fridgeStatusSpecifiedFilteredList_success() throws CommandException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Fridge fridge \u003d new FridgeBuilder().build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        model.addEntity(fridge);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateFridgeDescriptor descriptor \u003d new UpdateFridgeDescriptor(fridge);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setFridgeStatus(FridgeStatus.OCCUPIED);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(fridge.getIdNum(), descriptor);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        updateCommand.execute(model);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Fridge otherFridge \u003d new FridgeBuilder().build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        otherFridge.setFridgeStatus(FridgeStatus.OCCUPIED);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        //expectedModel.addEntity(otherFridge);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_ENTITY_SUCCESS, fridge);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertCommandSuccess(updateCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void getEntityFromId_invalidBodyId_failure() throws CommandException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                IdentificationNumber.customGenerateId(\"B\", 2), new UpdateBodyDescriptor());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        String expectedMessage \u003d MESSAGE_INVALID_ENTITY_DISPLAYED_ID;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertCommandFailure(updateCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void getEntityFromId_validBodyId_success() throws CommandException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body body \u003d new BodyBuilder().build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        model.addEntity(body);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        IdentificationNumber id \u003d IdentificationNumber.customGenerateId(\"B\", 1);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateBodyDescriptor descriptor \u003d new UpdateBodyDescriptor();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                IdentificationNumber.customGenerateId(\"B\", 1), descriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(body, updateCommand.getEntityFromId(model, id, descriptor));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void getBodyFromId_validBodyId_failure() throws CommandException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body body \u003d new BodyBuilder().build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        model.addEntity(body);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        IdentificationNumber id \u003d IdentificationNumber.customGenerateId(\"B\", 1);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateFridgeDescriptor descriptor \u003d new UpdateFridgeDescriptor();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand("
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                IdentificationNumber.customGenerateId(\"F\", 1), descriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateFridgeDescriptor descriptorCopy \u003d new UpdateFridgeDescriptor();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptorCopy.setNewBody(body);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(descriptorCopy, updateCommand.getBodyFromId(model, id, descriptor));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void saveOriginalFields_body_success() throws CommandException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body body \u003d new BodyBuilder().build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateBodyDescriptor descriptor \u003d (UpdateBodyDescriptor) UpdateCommand.saveOriginalFields(body);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(descriptor.getCauseOfDeath().get(), body.getCauseOfDeath().get());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void undo_previouslyExecuted_success() throws CommandException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UndoableCommand updateCommand \u003d TYPICAL_UPDATE_COMMAND;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        model.addEntity(TYPICAL_BODY);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        updateCommand.execute(model);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        expectedModel.addEntity(TYPICAL_BODY);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        expectedModel.addExecutedCommand(updateCommand);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_UNDO_SUCCESS, TYPICAL_BODY);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertCommandSuccess(undoCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void undo_notExecutedBefore_undoFailureException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UndoableCommand updateCommand \u003d TYPICAL_UPDATE_COMMAND;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e updateCommand.undo(model), MESSAGE_NOT_EXECUTED_BEFORE);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body body \u003d new BodyBuilder().build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateBodyDescriptor descriptor \u003d new UpdateBodyDescriptor(body);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(body.getIdNum(), descriptor);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateBodyDescriptor copyDescriptor \u003d new UpdateBodyDescriptor(body);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateCommand commandWithSameValues \u003d new UpdateCommand(new BodyBuilder().build().getIdNum(),"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                copyDescriptor);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertTrue(updateCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertTrue(updateCommand.equals(updateCommand));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(updateCommand.equals(null));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(updateCommand.equals(new ExitCommand()));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // different identification number -\u003e returns false"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        IdentificationNumber diffId \u003d IdentificationNumber.customGenerateId(\"B\", 2);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(updateCommand.equals(new UpdateCommand(diffId, copyDescriptor)));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        copyDescriptor.setSex(Sex.FEMALE);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(updateCommand.equals(new UpdateCommand(body.getIdNum(), copyDescriptor)));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        commandWithSameValues \u003d new UpdateCommand(body.getIdNum(), descriptor);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(updateCommand.hashCode(), commandWithSameValues.hashCode());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambervoong": 203,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/history/CommandHistoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "package seedu.address.logic.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.history.CommandHistory.MAX_SIZE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.parser.utility.UpdateBodyDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.testutil.BodyBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "//@@author ambervoong"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "class CommandHistoryTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void addGetExecutedCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body body \u003d new BodyBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateBodyDescriptor descriptor \u003d new UpdateBodyDescriptor(body);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(body.getIdNum(), descriptor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // It\u0027s okay that the command was not executed before, because no attempt was made to undo it."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        history.addExecutedCommand(updateCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(history.getExecutedCommand(), updateCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void addExecutedCommand_maxSizeReached_successfullyRemovedOlderCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body body \u003d new BodyBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateBodyDescriptor descriptor \u003d new UpdateBodyDescriptor(body);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(body.getIdNum(), descriptor);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d MAX_SIZE + 5; ++i) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            // Number of commands added goes over max history size"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            history.addExecutedCommand(updateCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // History size does not go over MAX_SIZE."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(MAX_SIZE, history.getSize());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambervoong": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_JOINED_DESC_XENIA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_JOINED_DESC_ZACH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_OF_ADMISSION_DESC_JOHN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_OF_DEATH_DESC_JOHN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_JANE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_JOHN;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_XENIA;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_ZACH;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SEX_DESC_JOHN;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SEX_DESC_XENIA;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SEX_DESC_ZACH;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BODY_FLAG;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_JOINED_XENIA;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_OF_ADMISSION_JOHN;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_OF_DEATH_JOHN;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_JOHN;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_XENIA;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SEX_JOHN;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SEX_XENIA;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WORKER_FLAG;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.testutil.TypicalBodies.JOHN;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.testutil.TypicalWorkers.XENIA;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.worker.Worker;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.testutil.BodyBuilder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.testutil.WorkerBuilder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Worker expectedWorker \u003d new WorkerBuilder(XENIA).withEmploymentStatus(\"\").withDateOfBirth(\"\").withPhone(\"\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                .withDesignation(\"\").build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Body expectedBody \u003d new BodyBuilder(JOHN).withCauseOfDeath(\"\").withFridgeId(\"\").withKinPhoneNumber(\"\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                .withNric(\"\").withNextOfKin(\"\").withOrgansForDonation(\"\").withRelationship(\"\").withReligion(\"\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                        .withStatus(\"\").withDateOfBirth(\"\").build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // Worker: multiple names - last name accepted"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertParseSuccess(parser, VALID_WORKER_FLAG + NAME_DESC_ZACH + NAME_DESC_XENIA + DATE_JOINED_DESC_XENIA"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                + SEX_DESC_XENIA, new AddCommand(expectedWorker));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // Worker: multiple dateJoined - last dateJoined accepted"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertParseSuccess(parser, VALID_WORKER_FLAG + NAME_DESC_XENIA + DATE_JOINED_DESC_ZACH"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                + DATE_JOINED_DESC_XENIA + SEX_DESC_XENIA, new AddCommand(expectedWorker));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // Worker:  multiple sexes - last sex accepted"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertParseSuccess(parser, VALID_WORKER_FLAG + NAME_DESC_XENIA + DATE_JOINED_DESC_XENIA + SEX_DESC_ZACH"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                + SEX_DESC_XENIA, new AddCommand(expectedWorker));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // Body: multiple names - last name accepted"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertParseSuccess(parser, VALID_BODY_FLAG + NAME_DESC_JANE + NAME_DESC_JOHN"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + DATE_OF_ADMISSION_DESC_JOHN + SEX_DESC_JOHN + DATE_OF_DEATH_DESC_JOHN, new AddCommand(expectedBody));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        //Worker: no phone"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Worker expectedWorker \u003d new WorkerBuilder(XENIA).withEmploymentStatus(\"\").withDateOfBirth(\"\").withPhone(\"\")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            .withDesignation(\"\").build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertParseSuccess(parser, VALID_WORKER_FLAG + NAME_DESC_XENIA + DATE_JOINED_DESC_XENIA + SEX_DESC_XENIA,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                new AddCommand(expectedWorker));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        //Body: no cause of death"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Body expectedBody \u003d new BodyBuilder(JOHN).withCauseOfDeath(\"\").withFridgeId(\"\").withKinPhoneNumber(\"\")"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            .withNric(\"\").withNextOfKin(\"\").withOrgansForDonation(\"\").withRelationship(\"\").withReligion(\"\")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            .withStatus(\"\").withDateOfBirth(\"\").build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertParseSuccess(parser, VALID_BODY_FLAG + NAME_DESC_JOHN + SEX_DESC_JOHN"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                + DATE_OF_ADMISSION_DESC_JOHN + DATE_OF_DEATH_DESC_JOHN, new AddCommand(expectedBody));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // Worker: missing name prefix"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertParseFailure(parser, VALID_WORKER_FLAG + VALID_NAME_XENIA + DATE_JOINED_DESC_XENIA + SEX_DESC_XENIA,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // Worker: all prefixes missing"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertParseFailure(parser, VALID_WORKER_FLAG + VALID_NAME_XENIA + VALID_SEX_XENIA"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                + VALID_DATE_JOINED_XENIA, expectedMessage);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // Body: missing name prefix"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertParseFailure(parser, VALID_BODY_FLAG + VALID_NAME_JOHN + SEX_DESC_JOHN"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                + DATE_OF_ADMISSION_DESC_JOHN + DATE_OF_DEATH_DESC_JOHN, expectedMessage);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // Worker: all prefixes missing"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertParseFailure(parser, VALID_BODY_FLAG + VALID_NAME_JOHN + VALID_SEX_JOHN"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            + VALID_DATE_OF_ADMISSION_JOHN + VALID_DATE_OF_DEATH_JOHN, expectedMessage);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 75,
      "-": 135
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IDENTIFICATION_NUMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.testutil.TypicalIdentificationNumbers.FIRST_BODY_ID_NUM;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.testutil.TypicalIdentificationNumbers.FIRST_WORKER_ID_NUM;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.logic.commands.ListBodyCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.logic.commands.ListWorkerCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.parser.utility.UpdateBodyDescriptor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.Sex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.testutil.BodyBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    private static final String PREFIX_FLAG \u003d \"-\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    private static final String BODY_FLAG \u003d \"b\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    private static final String WORKER_FLAG \u003d \"w\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        DeleteCommand bodyCommand \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + PREFIX_FLAG + \"b \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                        + FIRST_BODY_ID_NUM.getIdNum());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertEquals(new DeleteCommand(Index.fromZeroBased(FIRST_BODY_ID_NUM.getIdNum()), \"b\"), bodyCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        DeleteCommand workerCommand \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + PREFIX_FLAG + \"b \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                        + FIRST_WORKER_ID_NUM.getIdNum());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertEquals(new DeleteCommand(Index.fromZeroBased(FIRST_WORKER_ID_NUM.getIdNum()), \"w\"), workerCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        // todo add parser test for fridge class"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateCommand command \u003d (UpdateCommand) parser.parseCommand(UpdateCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(new UpdateCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    //@@author ambervoong"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void parseCommand_update() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body body \u003d new BodyBuilder().build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateBodyDescriptor descriptor \u003d new UpdateBodyDescriptor();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setSex(Sex.MALE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateCommand command \u003d (UpdateCommand) parser.parseCommand(UpdateCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                + PREFIX_FLAG + \"b \""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                + PREFIX_IDENTIFICATION_NUMBER + \" 1 \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                + PREFIX_SEX + \" male\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(new UpdateCommand(body.getIdNum(), descriptor), command);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void parseCommand_undo() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD + \" 1\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void parseCommand_redo() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD + \" 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        FindCommand command1 \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + PREFIX_FLAG + BODY_FLAG + \" \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                        + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        assertEquals(new FindCommand(keywords, BODY_FLAG), command1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        FindCommand command2 \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + PREFIX_FLAG + WORKER_FLAG + \" \""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                        + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        assertEquals(new FindCommand(keywords, WORKER_FLAG), command2);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" -b\") instanceof ListBodyCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" -w\") instanceof ListWorkerCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        //assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" -f\") instanceof ListFridgeCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalisc": 13,
      "arjavibahety": 13,
      "ambervoong": 39,
      "bernicechio": 5,
      "-": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FLAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // Tests PREFIX_FLAG"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        argsString \u003d \"add -f\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, PREFIX_FLAG);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertPreamblePresent(argMultimap, \"add\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertArgumentPresent(argMultimap, PREFIX_FLAG, \"f\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 7,
      "-": 150
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FLAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.testutil.TypicalIdentificationNumbers.FIRST_BODY_ID_NUM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.testutil.TypicalIdentificationNumbers.FIRST_WORKER_ID_NUM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_FLAG + \"b 1\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                new DeleteCommand(Index.fromZeroBased(FIRST_BODY_ID_NUM.getIdNum()), \"B\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_FLAG + \"w 1\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                new DeleteCommand(Index.fromZeroBased(FIRST_WORKER_ID_NUM.getIdNum()),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                        \"W\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        // todo add test for fridge!!"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        // Invalid string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_FLAG + \"b a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        // Invalid flag"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_FLAG + \"k a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        // No input given"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_FLAG + \"b\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        // No input given"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_FLAG + \"b \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 28,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    private static final String BODY_FLAG \u003d \"b\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    private static final String WORKER_FLAG \u003d \"w\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        FindCommand expectedFindCommand1 \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                new FindCommand(Arrays.asList(\"Alice\", \"Bob\"), BODY_FLAG);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        FindCommand expectedFindCommand2 \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                new FindCommand(Arrays.asList(\"Alice\", \"Bob\"), WORKER_FLAG);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        assertParseSuccess(parser, \" -b Alice Bob\", expectedFindCommand1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        assertParseSuccess(parser, \" -w Alice Bob\", expectedFindCommand1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        assertParseSuccess(parser, \" -b   Alice  Bob  \", expectedFindCommand1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        assertParseSuccess(parser, \" -w   Alice  Bob  \", expectedFindCommand1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalisc": 11,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/GenReportCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import static seedu.address.testutil.TypicalIdentificationNumbers.FIRST_BODY_ID_NUM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.logic.commands.GenReportCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "public class GenReportCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    private GenReportCommandParser parser \u003d new GenReportCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public void parse_validArgs_returnsGenReportCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        assertParseSuccess(parser, \"B1\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "                new GenReportCommand(Index.fromZeroBased(FIRST_BODY_ID_NUM.getIdNum())));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        //Invalid string"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        assertParseFailure(parser, \"B\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "                GenReportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        //Invalid first char"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        assertParseFailure(parser, \"A1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "                GenReportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        //No input given"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "                GenReportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bernicechio": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ListCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.logic.commands.ListBodyCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.logic.commands.ListFridgeCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "import seedu.address.logic.commands.ListWorkerCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "public class ListCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    private ListCommandParser parser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public void parse_validArgs_returnsListCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        assertParseSuccess(parser, \" -b\", new ListBodyCommand());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        assertParseSuccess(parser, \" -w\", new ListWorkerCommand());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        assertParseSuccess(parser, \" -f\", new ListFridgeCommand());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        assertParseFailure(parser, \" -a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bernicechio": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.IdentificationNumber;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.Sex;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.body.Nric;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.fridge.FridgeStatus;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final String INVALID_SEX \u003d \"queer\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final String INVALID_NRIC \u003d \"S12356A\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final String INVALID_ID \u003d \"B000001\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final String VALID_SEX \u003d \"male\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final String VALID_NRIC \u003d \"S1234567A\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final String VALID_ID \u003d \"F01\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final String VALID_ORGANS_FOR_DONATION \u003d \"kidney, cornea\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void parseSex_validMale_returnsMale() throws Exception {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(Sex.MALE, ParserUtil.parseSex(VALID_SEX));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void parseSex_invalidSex_throwsParseException() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseSex(INVALID_SEX));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void parseNric_validNric_returnsNric() throws Exception {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Nric expectedNric \u003d new Nric(VALID_NRIC);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(expectedNric, ParserUtil.parseNric(VALID_NRIC));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void parseNric_invalidNric_throwsParseException() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNric(INVALID_NRIC));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void parseIdentificationNumber_validId_returnsId() throws Exception {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        IdentificationNumber expectedId \u003d IdentificationNumber.customGenerateId(\"F\", 1);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(expectedId, ParserUtil.parseIdentificationNumber(VALID_ID));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void parseIdentificationNumber_invalidId_throwsParseException() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIdentificationNumber(INVALID_ID));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void parseOrgansForDonation_validString_returnListOfOrgans() throws Exception {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        List\u003cString\u003e expectedListOfOrgans \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        expectedListOfOrgans.add(\"kidney\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        expectedListOfOrgans.add(\"cornea\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(expectedListOfOrgans, ParserUtil.parseOrgansForDonation(VALID_ORGANS_FOR_DONATION));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    //@@author ambervoong"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void parseFridgeStatus_validString_returnFridgeStatus () throws ParseException {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(FridgeStatus.OCCUPIED, ParserUtil.parseFridgeStatus(\"occupied\"));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(FridgeStatus.UNOCCUPIED, ParserUtil.parseFridgeStatus(\"unoccupied\"));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(FridgeStatus.UNOCCUPIED, ParserUtil.parseFridgeStatus(\"Unoccupied\"));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(FridgeStatus.UNOCCUPIED, ParserUtil.parseFridgeStatus(\"unoccUPied\"));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void parseFridgeStatus_invalidString_throwParseException () throws ParseException {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseFridgeStatus(\"melonelon\"));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseFridgeStatus(\"\"));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 53,
      "ambervoong": 17,
      "-": 196
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "//@@ shaoyi1997-reused"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "//Reused from SE-EDU Address Book Level 4"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class SelectCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "//@@ shaoyi1997-reused"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/UpdateCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BODY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CAUSE_OF_DEATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_JOINED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_BIRTH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FLAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IDENTIFICATION_NUMBER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEX;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.testutil.BodyBuilder.DEFAULT_NAME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.testutil.TypicalBodies.ALICE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.parser.utility.UpdateBodyDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.parser.utility.UpdateFridgeDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.parser.utility.UpdateWorkerDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.IdentificationNumber;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.Sex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.fridge.Fridge;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.worker.Worker;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.testutil.BodyBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.testutil.FridgeBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.testutil.WorkerBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "//@@author ambervoong"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "public class UpdateCommandParserTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private UpdateCommandParser parser \u003d new UpdateCommandParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseFailure(parser, DEFAULT_NAME, IdentificationNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseFailure(parser, \"1\", IdentificationNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseFailure(parser, \"\", IdentificationNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseFailure(parser, \"-5\", IdentificationNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseFailure(parser, \"0\", IdentificationNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", IdentificationNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", IdentificationNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // invalid characters"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseFailure(parser, \"@#!$!@#$raf3,1947889\u0027\u0027\", IdentificationNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseFailure(parser, \" شتا تاتا تاتا [كاملة\", IdentificationNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseFailure(parser, \"汉字汉字汉字\", IdentificationNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /* To be added after the name prefix has been removed from person."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void parse_allfieldsPresent_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body expectedBody \u003d new BodyBuilder(ALICE).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateBodyDescriptor descriptor \u003d new UpdateBodyDescriptor(BOB);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        .withDateOfAdmission(\"01/01/1991\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                .withName(\"Bob Chachki\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                .withSex(Sex.MALE)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                .withNric(\"S1224567A\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                .withReligion(Religion.CHRISTIANITY)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                .withCauseOfDeath(\"NECROSIS\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                .withOrgansForDonation(new ArrayList\u003c\u003e())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                .withStatus(BodyStatus.ARRIVED)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                .withFridgeId(1)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                .withDateOfBirth(\"02/09/1982\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                .withDateOfDeath(\"01/06/1971\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                .withNextOfKin(\"Ben Chachki\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                .withRelationship(\"Father\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                .withKinPhoneNumber(\"87120919\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // Update command only requires one field to be specified at minimum"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_FLAG + \"b \" + PREFIX_IDENTIFICATION_NUMBER + \" 1 \""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                        + PREFIX_SEX + \" male\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                new UpdateCommand(expectedBody.getBodyIdNum(), descriptor));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setCauseOfDeath(\"asphyxiation\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // Two fields specified"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_FLAG + \"b \" + PREFIX_IDENTIFICATION_NUMBER + \" 1 \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                        + PREFIX_SEX + \" male \" + PREFIX_CAUSE_OF_DEATH + \" asphyxiation\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                new UpdateCommand(expectedBody.getBodyIdNum(), descriptor));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void parseBody_fieldsPresent_success() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body expectedBody \u003d new BodyBuilder(ALICE).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateBodyDescriptor descriptor \u003d new UpdateBodyDescriptor();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setSex(Sex.MALE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // Update command only requires one field to be specified at minimum"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_FLAG + \"b \" + PREFIX_IDENTIFICATION_NUMBER + \" 1 \""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                        + PREFIX_SEX + \" male\","
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                new UpdateCommand(expectedBody.getIdNum(), descriptor));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setCauseOfDeath(\"asphyxiation\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // Two fields specified"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_FLAG + \"b \" + PREFIX_IDENTIFICATION_NUMBER + \" 1 \""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                        + PREFIX_SEX + \" male \" + PREFIX_CAUSE_OF_DEATH + \" asphyxiation\","
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                new UpdateCommand(expectedBody.getIdNum(), descriptor));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void parse_noFieldsPresent_failure() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // Update command requires one field to be specified at minimum"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_FLAG + \"b \" + PREFIX_IDENTIFICATION_NUMBER + \" 1\","
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_FLAG + \"w \" + PREFIX_IDENTIFICATION_NUMBER + \" 1\","
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_FLAG + \"f \" + PREFIX_IDENTIFICATION_NUMBER + \" 1\","
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void parse_invalidId_failure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_FLAG + \"b \" + PREFIX_IDENTIFICATION_NUMBER + \" -1 \""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                        + PREFIX_SEX + \" male\","
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                IdentificationNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_FLAG + \"b \" + PREFIX_IDENTIFICATION_NUMBER + \" 0 \""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                        + PREFIX_SEX + \" male\","
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                IdentificationNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_FLAG + \"b \" + PREFIX_IDENTIFICATION_NUMBER + \" abc \""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                        + PREFIX_SEX + \" male\","
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                IdentificationNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_FLAG + \"b \" + PREFIX_IDENTIFICATION_NUMBER + \" \""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                        + PREFIX_SEX + \" male\","
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                IdentificationNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_FLAG + \"b \" + PREFIX_IDENTIFICATION_NUMBER + \"\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                        + PREFIX_SEX + \" male\","
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                IdentificationNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void parse_invalidFields_failure() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_FLAG + \"b \" + PREFIX_IDENTIFICATION_NUMBER + \" 1 \""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                        + PREFIX_NAME + \"!!\","
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // Invalid gender"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_FLAG + \"b \" + PREFIX_IDENTIFICATION_NUMBER + \" 1 \""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                    + PREFIX_SEX + \"Gerbil\","
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                Sex.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // Invalid date"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_FLAG + \"b \" + PREFIX_IDENTIFICATION_NUMBER + \" 1 \""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                        + PREFIX_DATE_OF_BIRTH + \"12//1212\","
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                \"Wrong date format\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_FLAG + \"b \" + PREFIX_IDENTIFICATION_NUMBER + \" 1 \""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                        + PREFIX_DATE_OF_BIRTH + \"1aaa1212\","
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                \"Wrong date format\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_FLAG + \"b \" + PREFIX_IDENTIFICATION_NUMBER + \" 1 \""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                        + PREFIX_DATE_OF_BIRTH + \"00/00/a000\","
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                \"Wrong date format\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_FLAG + \"b \" + PREFIX_IDENTIFICATION_NUMBER + \" 1 \""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                        + PREFIX_DATE_OF_BIRTH + \"\","
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                UpdateCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_FLAG + \"b \" + PREFIX_IDENTIFICATION_NUMBER + \" 1 \""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                        + PREFIX_DATE_OF_BIRTH + \" \","
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                UpdateCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // Valid field plus invalid field."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_FLAG + \"b \" + PREFIX_IDENTIFICATION_NUMBER + \" 1 \""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                        + PREFIX_SEX + \" male \""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                        + PREFIX_DATE_OF_BIRTH + \" aaa\","
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                \"Wrong date format\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // Multiple invalid fields. Error output is for the first invalid field."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_FLAG + \"b \" + PREFIX_IDENTIFICATION_NUMBER + \" 1 \""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                        + PREFIX_SEX + \" Gerbil \""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                        + PREFIX_DATE_OF_BIRTH + \" aaa\","
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                Sex.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void parseWorker_fieldsPresent_success() throws ParseException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Worker worker \u003d new WorkerBuilder().build();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateWorkerDescriptor descriptor \u003d new UpdateWorkerDescriptor();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setDateJoined(ParserUtil.parseDate(\"01/02/1313\"));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // Update command only requires one field to be specified at minimum"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_FLAG + \"w \" + PREFIX_IDENTIFICATION_NUMBER + \" 1 \""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                        + PREFIX_DATE_JOINED + \" 01/02/1313\","
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                new UpdateCommand(worker.getIdNum(), descriptor));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void parseFridge_fieldsPresent_success() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Fridge expectedFridge \u003d new FridgeBuilder().build();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateFridgeDescriptor descriptor \u003d new UpdateFridgeDescriptor();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setBodyId(IdentificationNumber.customGenerateId(\"B\", 1));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // Update command only requires one field to be specified at minimum"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_FLAG + \"f \" + PREFIX_IDENTIFICATION_NUMBER + \" 1 \""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                        + PREFIX_BODY + \" 1\","
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                new UpdateCommand(expectedFridge.getIdNum(), descriptor));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        IdentificationNumber targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        IdentificationNumber targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        IdentificationNumber targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        IdentificationNumber targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        IdentificationNumber targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambervoong": 310,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/utility/UpdateBodyDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "package seedu.address.logic.parser.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.testutil.TypicalBodies.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.IdentificationNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.PhoneNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.Sex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.body.BodyStatus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.body.Nric;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.body.Religion;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.testutil.BodyBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "//@@author ambervoong"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "class UpdateBodyDescriptorTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void isAnyFieldEdited_fieldEdited_true() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateBodyDescriptor descriptor \u003d new UpdateBodyDescriptor();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setCauseOfDeath(\"Evisceration\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertTrue(descriptor.isAnyFieldEdited());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void isAnyFieldEdited_fieldNotEdited_false() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateBodyDescriptor descriptor \u003d new UpdateBodyDescriptor();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(descriptor.isAnyFieldEdited());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void apply_fieldsPresent_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body body \u003d new BodyBuilder(ALICE).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateBodyDescriptor descriptor \u003d new UpdateBodyDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setSex(Sex.MALE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body bodyCopy \u003d new BodyBuilder(ALICE).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        bodyCopy.setSex(Sex.MALE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertTrue(descriptor.apply(body).equals(bodyCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void apply_allFieldsNotPresent_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        //  Success because apply does not check whether fields are present or not."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body body \u003d new BodyBuilder(ALICE).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateBodyDescriptor descriptor \u003d new UpdateBodyDescriptor();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body bodyCopy \u003d new BodyBuilder(ALICE).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertTrue(descriptor.apply(body).equals(bodyCopy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getSetName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body body \u003d new BodyBuilder(ALICE).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateBodyDescriptor descriptor \u003d new UpdateBodyDescriptor(body);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setName(new Name(\"Long Tetulu\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(new Name(\"Long Tetulu\"), descriptor.getName().get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getSetSex() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body body \u003d new BodyBuilder(ALICE).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateBodyDescriptor descriptor \u003d new UpdateBodyDescriptor(body);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setSex(Sex.MALE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(Sex.MALE, descriptor.getSex().get());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getSetNric() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body body \u003d new BodyBuilder(ALICE).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateBodyDescriptor descriptor \u003d new UpdateBodyDescriptor(body);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setNric(new Nric(\"F9123456B\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(new Nric(\"F9123456B\"), descriptor.getNric().get());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getSetReligion() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body body \u003d new BodyBuilder(ALICE).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateBodyDescriptor descriptor \u003d new UpdateBodyDescriptor(body);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setReligion(Religion.ISLAM);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(Religion.ISLAM, descriptor.getReligion().get());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getSetCauseOfDeath() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body body \u003d new BodyBuilder(ALICE).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateBodyDescriptor descriptor \u003d new UpdateBodyDescriptor(body);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setCauseOfDeath(\"Sepsis\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(\"Sepsis\", descriptor.getCauseOfDeath().get());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getSetOrgansForDonation() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body body \u003d new BodyBuilder(ALICE).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateBodyDescriptor descriptor \u003d new UpdateBodyDescriptor(body);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        ArrayList\u003cString\u003e list \u003d new ArrayList\u003c\u003e(3);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        list.add(\"kidney\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        list.add(\"cornea\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setOrgansForDonation(list);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(list, descriptor.getOrgansForDonation().get());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getSetStatus() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body body \u003d new BodyBuilder(ALICE).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateBodyDescriptor descriptor \u003d new UpdateBodyDescriptor(body);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setBodyStatus(BodyStatus.PENDING_IDENTIFICATION);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(BodyStatus.PENDING_IDENTIFICATION, descriptor.getBodyStatus().get());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getSetFridgeId() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body body \u003d new BodyBuilder(ALICE).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateBodyDescriptor descriptor \u003d new UpdateBodyDescriptor(body);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setFridgeId(IdentificationNumber.customGenerateId(\"F\", 5));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(IdentificationNumber.customGenerateId(\"F\", 5), descriptor.getFridgeId().get());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getSetDateOfBirth() throws ParseException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body body \u003d new BodyBuilder(ALICE).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateBodyDescriptor descriptor \u003d new UpdateBodyDescriptor(body);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Date birthday \u003d ParserUtil.parseDate(\"01/02/2018\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setDateOfBirth(birthday);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(birthday, descriptor.getDateOfBirth().get());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getSetDateOfDeath() throws ParseException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body body \u003d new BodyBuilder(ALICE).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateBodyDescriptor descriptor \u003d new UpdateBodyDescriptor(body);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Date deathDay \u003d ParserUtil.parseDate(\"01/05/2018\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setDateOfDeath(deathDay);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(deathDay, descriptor.getDateOfDeath().get());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getSetNextOfKin() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body body \u003d new BodyBuilder(ALICE).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateBodyDescriptor descriptor \u003d new UpdateBodyDescriptor(body);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setNextOfKin(new Name(\"Sepe Lok Aew\"));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(new Name(\"Sepe Lok Aew\"), descriptor.getNextOfKin().get());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getSetRelationship() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body body \u003d new BodyBuilder(ALICE).build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateBodyDescriptor descriptor \u003d new UpdateBodyDescriptor(body);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setRelationship(\"Mother\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(\"Mother\", descriptor.getRelationship().get());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getSetKinPhoneNumber() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body body \u003d new BodyBuilder(ALICE).build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateBodyDescriptor descriptor \u003d new UpdateBodyDescriptor(body);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setKinPhoneNumber(new PhoneNumber(\"98981234\"));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(new PhoneNumber(\"98981234\"), descriptor.getKinPhoneNumber().get());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void equals() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body body \u003d new BodyBuilder().build();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateBodyDescriptor descriptor \u003d new UpdateBodyDescriptor(body);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateBodyDescriptor copyDescriptor \u003d new UpdateBodyDescriptor(body);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(descriptor, copyDescriptor);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(descriptor.hashCode(), copyDescriptor.hashCode());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambervoong": 179
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/utility/UpdateFridgeDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "package seedu.address.logic.parser.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.testutil.TypicalBodies.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.fridge.Fridge;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.fridge.FridgeStatus;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.testutil.BodyBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.testutil.FridgeBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "//@@author ambervoong"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "class UpdateFridgeDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void isAnyFieldEdited_fieldEdited_true() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateFridgeDescriptor descriptor \u003d new UpdateFridgeDescriptor();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setFridgeStatus(FridgeStatus.OCCUPIED);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertTrue(descriptor.isAnyFieldEdited());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void isAnyFieldEdited_fieldNotEdited_false() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateFridgeDescriptor descriptor \u003d new UpdateFridgeDescriptor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(descriptor.isAnyFieldEdited());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void apply_fieldsPresent_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Fridge fridge \u003d new FridgeBuilder().build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body body \u003d new BodyBuilder(ALICE).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateFridgeDescriptor descriptor \u003d new UpdateFridgeDescriptor();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setBodyId(body.getIdNum());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setNewBody(body);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setFridgeStatus(FridgeStatus.OCCUPIED);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Fridge fridgeCopy \u003d new FridgeBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        fridgeCopy.setBody(body);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        fridgeCopy.setFridgeStatus(FridgeStatus.OCCUPIED);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertTrue(descriptor.apply(fridge).equals(fridgeCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void apply_allFieldsNotPresent_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        //  Success because apply does not check whether fields are present or not."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Fridge fridge \u003d new FridgeBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body body \u003d new BodyBuilder(ALICE).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateFridgeDescriptor descriptor \u003d new UpdateFridgeDescriptor();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setNewBody(body);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setBodyId(body.getIdNum());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Fridge fridgeCopy \u003d new FridgeBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        fridgeCopy.setBody(body);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertTrue(descriptor.apply(fridge).equals(fridgeCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getSetBody() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body body \u003d new BodyBuilder(ALICE).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateFridgeDescriptor descriptor \u003d new UpdateFridgeDescriptor();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setBodyId(body.getIdNum());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(descriptor.getBodyId().get(), body.getIdNum());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getSetFridgeStatus() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateFridgeDescriptor descriptor \u003d new UpdateFridgeDescriptor();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setFridgeStatus(FridgeStatus.OCCUPIED);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(descriptor.getFridgeStatus().get(), FridgeStatus.OCCUPIED);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getSetNewBody() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body body \u003d new BodyBuilder().build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateFridgeDescriptor descriptor \u003d new UpdateFridgeDescriptor();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setNewBody(body);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(descriptor.getNewBody().get(), body);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void equals() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Fridge fridge \u003d new FridgeBuilder().build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateFridgeDescriptor descriptor \u003d new UpdateFridgeDescriptor(fridge);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateFridgeDescriptor copyDescriptor \u003d new UpdateFridgeDescriptor(fridge);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(descriptor, copyDescriptor);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(descriptor.hashCode(), copyDescriptor.hashCode());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambervoong": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/utility/UpdateWorkerDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "package seedu.address.logic.parser.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.testutil.TypicalWorkers.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.PhoneNumber;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.Sex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.worker.Worker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.testutil.WorkerBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "//@@author ambervoong"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "class UpdateWorkerDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void isAnyFieldEdited_fieldEdited_true() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateWorkerDescriptor descriptor \u003d new UpdateWorkerDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setDesignation(\"Technician\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertTrue(descriptor.isAnyFieldEdited());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void isAnyFieldEdited_fieldNotEdited_false() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateWorkerDescriptor descriptor \u003d new UpdateWorkerDescriptor();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(descriptor.isAnyFieldEdited());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void apply_fieldsPresent_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Worker worker \u003d new WorkerBuilder(ALICE).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateWorkerDescriptor descriptor \u003d new UpdateWorkerDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setSex(Sex.MALE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Worker workerCopy \u003d new WorkerBuilder(ALICE).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        workerCopy.setSex(Sex.MALE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertTrue(descriptor.apply(worker).equals(workerCopy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void apply_allFieldsNotPresent_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        //  Success because apply does not check whether fields are present or not."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Worker worker \u003d new WorkerBuilder(ALICE).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateWorkerDescriptor descriptor \u003d new UpdateWorkerDescriptor();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Worker workerCopy \u003d new WorkerBuilder(ALICE).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertTrue(descriptor.apply(worker).equals(workerCopy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getSetPhone() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Worker worker \u003d new WorkerBuilder().build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateWorkerDescriptor descriptor \u003d new UpdateWorkerDescriptor(worker);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setPhone(new PhoneNumber(\"98731567\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(new PhoneNumber(\"98731567\"), descriptor.getPhone().get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getSetSex() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Worker worker \u003d new WorkerBuilder().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateWorkerDescriptor descriptor \u003d new UpdateWorkerDescriptor(worker);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setSex(Sex.FEMALE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(Sex.FEMALE, descriptor.getSex().get());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getSetDateOfBirth() throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Worker worker \u003d new WorkerBuilder().build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateWorkerDescriptor descriptor \u003d new UpdateWorkerDescriptor(worker);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setDateOfBirth(ParserUtil.parseDate(\"06/11/1987\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(ParserUtil.parseDate(\"06/11/1987\"),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                descriptor.getDateOfBirth().get());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getSetDateJoined() throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Worker worker \u003d new WorkerBuilder().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateWorkerDescriptor descriptor \u003d new UpdateWorkerDescriptor(worker);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setDateJoined(ParserUtil.parseDate(\"06/11/1987\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(ParserUtil.parseDate(\"06/11/1987\"), descriptor.getDateJoined().get());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getSetDesignation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Worker worker \u003d new WorkerBuilder().build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateWorkerDescriptor descriptor \u003d new UpdateWorkerDescriptor(worker);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setDesignation(\"manager\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(\"manager\", descriptor.getDesignation().get());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getSetEmploymentStatus() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Worker worker \u003d new WorkerBuilder().build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateWorkerDescriptor descriptor \u003d new UpdateWorkerDescriptor(worker);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        descriptor.setEmploymentStatus(\"Probation\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(\"Probation\", descriptor.getEmploymentStatus().get());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void equals() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Worker worker \u003d new WorkerBuilder().build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateWorkerDescriptor descriptor \u003d new UpdateWorkerDescriptor(worker);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UpdateWorkerDescriptor copyDescriptor \u003d new UpdateWorkerDescriptor(worker);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(descriptor, copyDescriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(descriptor.hashCode(), copyDescriptor.hashCode());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambervoong": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.fridge.Fridge;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.worker.Worker;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.notif.Notif;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasEntity(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertFalse(addressBook.hasEntity(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        addressBook.addEntity(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertTrue(addressBook.hasEntity(ALICE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        addressBook.addEntity(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertTrue(addressBook.hasEntity(editedAlice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void addListener_withInvalidationListener_listenerAdded() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        addressBook.addListener(listener);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        addressBook.addEntity(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(1, counter.get());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void removeListener_withInvalidationListener_listenerRemoved() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        addressBook.addListener(listener);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        addressBook.removeListener(listener);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        addressBook.addEntity(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(0, counter.get());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        private final ObservableList\u003cWorker\u003e workers \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        private final ObservableList\u003cBody\u003e bodies \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        private final ObservableList\u003cNotif\u003e notifs \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        private final ObservableList\u003cFridge\u003e fridges \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        public ObservableList\u003cWorker\u003e getWorkerList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return workers;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        public ObservableList\u003cBody\u003e getBodyList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return bodies;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        public ObservableList\u003cFridge\u003e getFridgeList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            return fridges;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        public ObservableList\u003cNotif\u003e getNotifList() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            return notifs;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 58,
      "arjavibahety": 7,
      "-": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.testutil.TypicalUndoableCommands.TYPICAL_UPDATE_COMMAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.commands.UndoableCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void addExecutedCommand_validUndoableCommand_successfullyAdded() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UndoableCommand updateCommand \u003d TYPICAL_UPDATE_COMMAND;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        modelManager.addExecutedCommand(updateCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(modelManager.getExecutedCommand(), updateCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void addExecutedCommand_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        UndoableCommand updateCommand \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003emodelManager.addExecutedCommand(updateCommand));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasEntity(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertFalse(modelManager.hasEntity(ALICE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        modelManager.addEntity(ALICE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertTrue(modelManager.hasEntity(ALICE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // different filteredListPerson -\u003e returns false"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 5,
      "ambervoong": 14,
      "-": 128
    }
  },
  {
    "path": "src/test/java/seedu/address/model/entity/IdentificationNumberTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.testutil.TypicalBodies.JANE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.testutil.TypicalBodies.JOHN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.testutil.TypicalFridges.EMPTY_FRIDGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.testutil.TypicalWorkers.ZACH;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "class IdentificationNumberTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static UniqueIdentificationNumberMaps uniqueIds \u003d new UniqueIdentificationNumberMaps();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void constructorIdNum_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new IdentificationNumber(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    void generateNewBodyId_true() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uniqueIds.clearAllEntries();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        IdentificationNumber testId \u003d IdentificationNumber.generateNewBodyId(JOHN);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(\"B00000001\", testId.toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    void generateNewWorkerId_true() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uniqueIds.clearAllEntries();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        IdentificationNumber testId \u003d IdentificationNumber.generateNewWorkerId(ZACH);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(\"W00001\", testId.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    void generateNewFridgeId_true() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uniqueIds.clearAllEntries();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        IdentificationNumber testId \u003d IdentificationNumber.generateNewFridgeId(EMPTY_FRIDGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(\"F01\", testId.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    void testEquals_differentAndNull_notEqual() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        IdentificationNumber testId \u003d IdentificationNumber.generateNewBodyId(JOHN);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertNotEquals(testId, IdentificationNumber.generateNewBodyId(JANE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertNotEquals(testId, IdentificationNumber.generateNewFridgeId(EMPTY_FRIDGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertNotEquals(testId, IdentificationNumber.generateNewWorkerId(ZACH));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertNotEquals(testId, null);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    void isValidIdentificationNumber_true() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertTrue(IdentificationNumber.isValidIdentificationNumber(\"F01\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertTrue(IdentificationNumber.isValidIdentificationNumber(\"W00005\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertTrue(IdentificationNumber.isValidIdentificationNumber(\"B00000001\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    void isValidIdentificationNumber_false() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertFalse(IdentificationNumber.isValidIdentificationNumber(\"\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertFalse(IdentificationNumber.isValidIdentificationNumber(\" \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertFalse(IdentificationNumber.isValidIdentificationNumber(\"F1\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertFalse(IdentificationNumber.isValidIdentificationNumber(\"W0005\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertFalse(IdentificationNumber.isValidIdentificationNumber(\"B0000001\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/model/entity/UniqueIdentificationNumberMapsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.testutil.TypicalBodies.JOHN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.testutil.TypicalFridges.EMPTY_FRIDGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.testutil.TypicalWorkers.ZACH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "class UniqueIdentificationNumberMapsTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static UniqueIdentificationNumberMaps uniqueIds \u003d new UniqueIdentificationNumberMaps();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    void addBody_returnsIdOne() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uniqueIds.clearAllEntries();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(1, uniqueIds.addEntity(JOHN));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(1, uniqueIds.addEntity(ZACH));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(1, uniqueIds.addEntity(EMPTY_FRIDGE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    void containsWorkerId_true() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uniqueIds.addEntity(ZACH);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uniqueIds.containsWorkerId(1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    void containsBodyId_true() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uniqueIds.addEntity(JOHN);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uniqueIds.containsBodyId(1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    void containsFridgeId_true() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uniqueIds.addEntity(EMPTY_FRIDGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uniqueIds.containsFridgeId(1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/entity/body/BodyNameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalisc"
        },
        "content": "package seedu.address.model.entity.body;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import seedu.address.testutil.BodyBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalisc"
        },
        "content": "public class BodyNameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        BodyNameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                new BodyNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        BodyNameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                new BodyNameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        BodyNameContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                new BodyNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        BodyNameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                new BodyNameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        assertTrue(predicate.test(new BodyBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        predicate \u003d new BodyNameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        assertTrue(predicate.test(new BodyBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        predicate \u003d new BodyNameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        assertTrue(predicate.test(new BodyBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        predicate \u003d new BodyNameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        assertTrue(predicate.test(new BodyBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        BodyNameContainsKeywordsPredicate predicate \u003d new BodyNameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        assertFalse(predicate.test(new BodyBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        predicate \u003d new BodyNameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        assertFalse(predicate.test(new BodyBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        predicate \u003d new BodyNameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"mother\", \"homicide\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        assertFalse(predicate.test(new BodyBuilder().withName(\"Alice\").withNextOfKin(\"Bob\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                .withCauseOfDeath(\"homicide\").withRelationship(\"Mother\").build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dalisc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalisc": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/model/entity/body/BodyStatusTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "package seedu.address.model.entity.body;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "//@@author ambervoong"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "class BodyStatusTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void enumerateStatus_indexOne_correct() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(BodyStatus.CLAIMED.toString(), \"CLAIMED\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambervoong": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/model/entity/body/BodyTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "package seedu.address.model.entity.body;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.testutil.BodyBuilder.DEFAULT_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.testutil.TypicalBodies.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.testutil.TypicalBodies.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.testutil.TypicalWorkers.CLARA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.IdentificationNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.PhoneNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.Sex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.fridge.Fridge;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.worker.Worker;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.testutil.BodyBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.testutil.FridgeBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.testutil.WorkerBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "//@@author ambervoong"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "class BodyTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void isSameBody() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertTrue(ALICE.isSameBody(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(ALICE.isSameBody(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(ALICE.isSameBody(BOB));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // Still equal because only NRIC is considered"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body editedAlice \u003d new BodyBuilder(ALICE).withSex(\"FEMALE\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertTrue(ALICE.isSameBody(editedAlice));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // Not equal because the NRIC is different."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        editedAlice \u003d new BodyBuilder(ALICE).withNric(\"F9531049B\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(ALICE.isSameBody(editedAlice));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void isSameBodyIdNum() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body alice \u003d new BodyBuilder(ALICE).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body bob \u003d new BodyBuilder(BOB).build(1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertTrue(alice.isSameBodyIdNum(bob));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body differentId \u003d new BodyBuilder(BOB).build(2);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(alice.isSameBodyIdNum(differentId));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void isSameEntity() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body alice \u003d new BodyBuilder(ALICE).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body bob \u003d new BodyBuilder(BOB).build(1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Worker worker \u003d new WorkerBuilder(CLARA).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(alice.isSameEntity(bob));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // Test equality with non-Body entity."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(alice.isSameEntity(worker));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertTrue(alice.isSameEntity(alice));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body aliceCopy \u003d new BodyBuilder(ALICE).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(ALICE.hashCode(), aliceCopy.hashCode());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // Different fields"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Body editedAlice \u003d new BodyBuilder(ALICE).withName(DEFAULT_NAME).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getBodyIdNum() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // Final field; does not have a setter method."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(IdentificationNumber.customGenerateId(\"B\", 1), ALICE.getIdNum());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getSetName() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        ALICE.setName(new Name(\"Penny\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(new NameStub(\"Penny\"), ALICE.getName());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getSetSex() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        ALICE.setSex(Sex.MALE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(Sex.MALE, ALICE.getSex());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getDateOfAdmission() throws ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(ParserUtil.parseDate(\"01/01/1991\"), ALICE.getDateOfAdmission());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getSetDateOfBirth() throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        ALICE.setDateOfBirth(ParserUtil.parseDate(\"01/01/1991\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(ParserUtil.parseDate(\"01/01/1991\"), ALICE.getDateOfBirth().get());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getSetDateOfDeath() throws ParseException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        ALICE.setDateOfDeath(ParserUtil.parseDate(\"01/01/1991\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(ParserUtil.parseDate(\"01/01/1991\"), ALICE.getDateOfDeath());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getSetNric() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        ALICE.setNric(new NricStub(\"S1234567A\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(new NricStub(\"S1234567A\"), ALICE.getNric().get());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getSetReligion() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        ALICE.setReligion(Religion.SIKHISM);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(Religion.SIKHISM, ALICE.getReligion().get());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getSetNextOfKin() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        ALICE.setNextOfKin(new NameStub(\"Alicia Pong\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(new NameStub(\"Alicia Pong\"), ALICE.getNextOfKin().get());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getSetRelationship() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        ALICE.setRelationship(\"Father\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(\"Father\", ALICE.getRelationship().get());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getSetKinPhoneNumber() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        ALICE.setKinPhoneNumber(new PhoneNumber(\"87871234\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(new PhoneNumber(\"87871234\"), ALICE.getKinPhoneNumber().get());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getSetCauseOfDeath() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        ALICE.setCauseOfDeath(\"Gangrene\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(\"Gangrene\", ALICE.getCauseOfDeath().get());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getSetOrgansForDonation() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        ArrayList\u003cString\u003e list \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        list.add(\"Liver\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        ALICE.setOrgansForDonation(list);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(\"Liver\", ALICE.getOrgansForDonation().get().get(0));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getSetStatus() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        ALICE.setBodyStatus(BodyStatus.ARRIVED);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(BodyStatus.ARRIVED, ALICE.getBodyStatus().get());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getSetFridgeId() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        ALICE.setFridgeId(IdentificationNumber.customGenerateId(\"F\", 5));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(IdentificationNumber.customGenerateId(\"F\", 5), ALICE.getFridgeId().get());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        ALICE.setFridgeId(IdentificationNumber.customGenerateId(\"F\", 1));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // Check that it works with an actual fridge."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Fridge fridge \u003d new FridgeBuilder().build();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(fridge.getIdNum(), ALICE.getFridgeId().get());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    // Stub Classes"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * A Name stub that just stores the name it is given."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private static class NameStub extends Name {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        public NameStub(String name) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            super(name);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * An NRIC stub that just stores the ID it is given."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private static class NricStub extends Nric {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        public NricStub(String nric) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            super(nric);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 1,
      "ambervoong": 201
    }
  },
  {
    "path": "src/test/java/seedu/address/model/entity/body/NricTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "package seedu.address.model.entity.body;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "//@@author ambervoong"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "class NricTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void constructorNric_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Nric(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void constructorNric_emptyString_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        String invalidNric \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Nric(invalidNric));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void constructorNric_invalidNric_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        String invalidNric \u003d \"S12345678\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Nric(invalidNric));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getNric_true() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Nric testNric \u003d new Nric(\"S1234567A\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(\"S1234567A\", testNric.getNric());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void testEquals_self_true() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Nric testNric \u003d new Nric(\"S1234567A\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Nric otherNric \u003d new Nric(\"S1234567A\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(testNric, testNric);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(testNric, otherNric);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(testNric.hashCode(), otherNric.hashCode());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void testEquals_differentAndNull_notEqual() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Nric testNric \u003d new Nric(\"S1234567A\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertNotEquals(testNric, new Nric(\"S7654321A\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertNotEquals(testNric, null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void isValidNric() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // Null Nric"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Nric.isValidNric(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // Invalid Nrics"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(Nric.isValidNric(\"\")); // empty string"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(Nric.isValidNric(\" \")); // spaces only"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(Nric.isValidNric(\"S7643A\")); // Not enough digits"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(Nric.isValidNric(\"T94abcd0Z\")); // Alphabets in number."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(Nric.isValidNric(\"A1234567A\")); // Invalid starting digit"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(Nric.isValidNric(\"@#!@4a\u0026*(\")); // Not digit"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // Valid Nrics"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertTrue(Nric.isValidNric(\"F4320125A\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertTrue(Nric.isValidNric(\"S5201443B\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void isDigitAndLengthSeven() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(Nric.isDigitAndLengthSeven(\"abcdefg\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(Nric.isDigitAndLengthSeven(\"123456z\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(Nric.isDigitAndLengthSeven(\"@#!$%^\u0026\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(Nric.isDigitAndLengthSeven(\"abcdefg\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(Nric.isDigitAndLengthSeven(\"aaaaaaaaaa\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(Nric.isDigitAndLengthSeven(\"a3aa3a3atbfb1\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(Nric.isDigitAndLengthSeven(\"\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertTrue(Nric.isDigitAndLengthSeven(\"1212125\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertTrue(Nric.isDigitAndLengthSeven(\"8734028\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void isValidStartEndAlphabet() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(Nric.isValidStartEndAlphabet(\u0027W\u0027, \u0027!\u0027));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(Nric.isValidStartEndAlphabet(\u0027S\u0027, \u0027)\u0027));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(Nric.isValidStartEndAlphabet(\u0027F\u0027, \u0027#\u0027));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(Nric.isValidStartEndAlphabet(\u0027Z\u0027, \u0027A\u0027));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertTrue(Nric.isValidStartEndAlphabet(\u0027S\u0027, \u0027A\u0027));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertTrue(Nric.isValidStartEndAlphabet(\u0027F\u0027, \u0027Z\u0027));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertTrue(Nric.isValidStartEndAlphabet(\u0027T\u0027, \u0027N\u0027));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertTrue(Nric.isValidStartEndAlphabet(\u0027G\u0027, \u0027L\u0027));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambervoong": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/model/entity/body/PhoneNumberTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "package seedu.address.model.entity.body;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.PhoneNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "//@@author ambervoong"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "class PhoneNumberTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new PhoneNumber(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void constructor_invalidNumber_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        String invalidPhoneNumber \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new PhoneNumber(invalidPhoneNumber));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getPhoneNumber_true() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        PhoneNumber testPhone \u003d new PhoneNumber(\"87871234\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(\"87871234\", testPhone.getPhoneNumber());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void testEquals_self_true() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        PhoneNumber testPhone \u003d new PhoneNumber(\"87871234\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        PhoneNumber otherPhone \u003d new PhoneNumber(\"87871234\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(testPhone, testPhone);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(testPhone, otherPhone);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(testPhone.hashCode(), otherPhone.hashCode());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void testEquals_differentAndNull_notEqual() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        PhoneNumber testPhone \u003d new PhoneNumber(\"87871234\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertNotEquals(testPhone, new PhoneNumber(\"98765432\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertNotEquals(testPhone, null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void isValidPhoneNumber() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // Null PhoneNumber"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e PhoneNumber.isValidPhoneNumber(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // Invalid PhoneNumbers"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(PhoneNumber.isValidPhoneNumber(\"\")); // empty string"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(PhoneNumber.isValidPhoneNumber(\" \")); // spaces only"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(PhoneNumber.isValidPhoneNumber(\"8686\")); // Not enough digits"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(PhoneNumber.isValidPhoneNumber(\"4848ab122\")); // Alphabets in number."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(PhoneNumber.isValidPhoneNumber(\"12345678\")); // Invalid starting digit"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(PhoneNumber.isValidPhoneNumber(\"@#!@4a\u0026(\")); // Not digit"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // Valid PhoneNumbers"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertTrue(PhoneNumber.isValidPhoneNumber(\"82371039\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertTrue(PhoneNumber.isValidPhoneNumber(\"98984444\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void toString_equals() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(\"91234567\", new PhoneNumber(\"91234567\").toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambervoong": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/model/entity/body/ReligionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "package seedu.address.model.entity.body;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "//@@author ambervoong"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "class ReligionTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void enumerateReligion_indexOne_correct() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(Religion.ISLAM.toString(), \"ISLAM\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void enumerateReligion_indexOne_wrong() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertNotEquals(Religion.ISLAM.toString(), \"12345\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void enumerateReligion_parseReligion_success() throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(ParserUtil.parseReligion(Religion.ISLAM.toString()), Religion.ISLAM);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 3,
      "ambervoong": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/model/entity/body/SexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "package seedu.address.model.entity.body;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.Sex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "//@@author ambervoong"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "class SexTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void enumerateSex_indexOne_correct() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(Sex.FEMALE.toString(), \"FEMALE\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void enumerateSex_indexOne_wrong() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertNotEquals(Sex.FEMALE.toString(), \"MALE\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void validSex_correct() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertTrue(Sex.isMale(\"Male\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertTrue(Sex.isFemale(\"female\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertTrue(Sex.isValidSex(\"male\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertTrue(Sex.isValidSex(\"Female\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 1,
      "ambervoong": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/model/entity/fridge/FridgeStatusTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "package seedu.address.model.entity.fridge;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "//@author arjavibahety"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "class FridgeStatusTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    void enumerateStatus_indexOne_occupied() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertEquals(FridgeStatus.OCCUPIED.toString(), \"OCCUPIED\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    void enumerateStatus_indexOne_unoccupied() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertEquals(FridgeStatus.UNOCCUPIED.toString(), \"UNOCCUPIED\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/entity/fridge/FridgeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "package seedu.address.model.entity.fridge;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.testutil.FridgeBuilder.DEFAULT_BODY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.testutil.TypicalBodies.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.testutil.TypicalBodies.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.testutil.TypicalBodies.JOHN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.testutil.TypicalFridges.ALICE_FRIDGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.testutil.TypicalFridges.BOB_FRIDGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.testutil.TypicalFridges.EMPTY_FRIDGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.entity.IdentificationNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.testutil.FridgeBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "//@@author arjavibahety"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "public class FridgeTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public void isSameEntity() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertTrue(ALICE_FRIDGE.isSameEntity(ALICE_FRIDGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertTrue(EMPTY_FRIDGE.isSameEntity(EMPTY_FRIDGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertFalse(ALICE_FRIDGE.isSameEntity(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertFalse(EMPTY_FRIDGE.isSameEntity(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        // different fridges entirely -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertFalse(ALICE_FRIDGE.isSameEntity(BOB_FRIDGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertFalse(EMPTY_FRIDGE.isSameEntity(BOB_FRIDGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        Fridge aliceFridgeCopy \u003d new FridgeBuilder(ALICE_FRIDGE).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        Fridge emptyFridgeCopy \u003d new FridgeBuilder(EMPTY_FRIDGE).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertTrue(ALICE_FRIDGE.equals(ALICE_FRIDGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertEquals(ALICE_FRIDGE.hashCode(), aliceFridgeCopy.hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertTrue(ALICE_FRIDGE.equals(aliceFridgeCopy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertTrue(EMPTY_FRIDGE.equals(EMPTY_FRIDGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertEquals(EMPTY_FRIDGE.hashCode(), emptyFridgeCopy.hashCode());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertTrue(EMPTY_FRIDGE.equals(emptyFridgeCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertFalse(ALICE_FRIDGE.equals(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertFalse(EMPTY_FRIDGE.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        // Different fields"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertFalse(ALICE_FRIDGE.equals(BOB_FRIDGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertFalse(ALICE_FRIDGE.equals(EMPTY_FRIDGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        Fridge editedAliceFridge \u003d new FridgeBuilder(ALICE_FRIDGE).withBody(DEFAULT_BODY).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertFalse(ALICE_FRIDGE.equals(editedAliceFridge));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    void getFridgeIdNum() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertEquals(IdentificationNumber.customGenerateId(\"F\", 1),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                EMPTY_FRIDGE.getIdNum());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    void getFridgeStatus() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertEquals(EMPTY_FRIDGE.getFridgeStatus(), FridgeStatus.UNOCCUPIED);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertEquals(ALICE_FRIDGE.getFridgeStatus(), FridgeStatus.OCCUPIED);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    void getBody() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertEquals(EMPTY_FRIDGE.getBody(), null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertEquals(ALICE_FRIDGE.getBody(), ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    void getSetBody() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        ALICE_FRIDGE.setBody(BOB);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertTrue(ALICE_FRIDGE.getBody() \u003d\u003d BOB);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        ALICE_FRIDGE.setBody(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        EMPTY_FRIDGE.setBody(BOB);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertTrue(EMPTY_FRIDGE.getBody() \u003d\u003d BOB);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        EMPTY_FRIDGE.setBody(null);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    void getSetStatus() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        ALICE_FRIDGE.setFridgeStatus(FridgeStatus.UNOCCUPIED);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertTrue(ALICE_FRIDGE.getFridgeStatus() \u003d\u003d FridgeStatus.UNOCCUPIED);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        ALICE_FRIDGE.setFridgeStatus(FridgeStatus.OCCUPIED);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        EMPTY_FRIDGE.setFridgeStatus(FridgeStatus.OCCUPIED);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertTrue(EMPTY_FRIDGE.getFridgeStatus() \u003d\u003d FridgeStatus.OCCUPIED);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        EMPTY_FRIDGE.setFridgeStatus(FridgeStatus.UNOCCUPIED);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    void toString_occupiedFridge() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        Fridge occupiedFridge \u003d new Fridge(true);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        occupiedFridge.setBody(JOHN);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertEquals(\" Fridge ID: F01 Status: OCCUPIED Body: \" + JOHN, occupiedFridge.toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    void toString_emptyFridge() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertEquals(\" Fridge ID: F01 Status: UNOCCUPIED\", EMPTY_FRIDGE.toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 1,
      "arjavibahety": 113
    }
  },
  {
    "path": "src/test/java/seedu/address/model/entity/worker/WorkerNameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalisc"
        },
        "content": "package seedu.address.model.entity.worker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import seedu.address.testutil.WorkerBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalisc"
        },
        "content": "public class WorkerNameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        WorkerNameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                new WorkerNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        WorkerNameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                new WorkerNameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        WorkerNameContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                new WorkerNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        WorkerNameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                new WorkerNameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        assertTrue(predicate.test(new WorkerBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        predicate \u003d new WorkerNameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        assertTrue(predicate.test(new WorkerBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        predicate \u003d new WorkerNameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        assertTrue(predicate.test(new WorkerBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        predicate \u003d new WorkerNameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        assertTrue(predicate.test(new WorkerBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        WorkerNameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                new WorkerNameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        assertFalse(predicate.test(new WorkerBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        predicate \u003d new WorkerNameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        assertFalse(predicate.test(new WorkerBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        predicate \u003d new WorkerNameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"mother\", \"homicide\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        assertFalse(predicate.test(new WorkerBuilder().withName(\"Alice\").withEmploymentStatus(\"Full-time\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dalisc"
        },
        "content": "                .withDesignation(\"Mrs\").build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dalisc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalisc": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/model/entity/worker/WorkerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package seedu.address.model.entity.worker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.model.entity.Sex.FEMALE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.testutil.TypicalWorkers.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.testutil.TypicalWorkers.BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.testutil.WorkerBuilder.DEFAULT_DATE_JOINED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.testutil.WorkerBuilder.DEFAULT_DATE_OF_BIRTH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.testutil.WorkerBuilder.DEFAULT_DESIGNATION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.testutil.WorkerBuilder.DEFAULT_EMPLOYMENT_STATUS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.testutil.WorkerBuilder.DEFAULT_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.testutil.WorkerBuilder.DEFAULT_PHONE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.testutil.WorkerBuilder.DEFAULT_SEX;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.IdentificationNumber;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.PhoneNumber;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.testutil.WorkerBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "class WorkerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @SuppressWarnings(\"checkstyle:Regexp\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void isSameWorker() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertTrue(ALICE.isSameWorker(ALICE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertFalse(ALICE.isSameWorker(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // different person entirely -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertFalse(ALICE.isSameWorker(BENSON));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // different phone -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Worker editedAlice \u003d new WorkerBuilder(ALICE).withPhone(WorkerBuilder.DEFAULT_PHONE).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertTrue(ALICE.isSameWorker(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        editedAlice \u003d new WorkerBuilder(ALICE).withName(DEFAULT_NAME).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertFalse(ALICE.isSameWorker(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        editedAlice \u003d new WorkerBuilder(ALICE).withDateJoined(WorkerBuilder.DEFAULT_DATE_JOINED)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            .withDateOfBirth(WorkerBuilder.DEFAULT_DATE_OF_BIRTH)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            .withEmploymentStatus(WorkerBuilder.DEFAULT_EMPLOYMENT_STATUS).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertTrue(ALICE.isSameWorker(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Worker aliceCopy \u003d new WorkerBuilder(ALICE).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // same hashcode -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(ALICE.hashCode(), aliceCopy.hashCode());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertFalse(ALICE.equals(BENSON));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Worker editedAlice \u003d new WorkerBuilder(ALICE).withName(DEFAULT_NAME).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        editedAlice \u003d new WorkerBuilder(ALICE).withPhone(WorkerBuilder.DEFAULT_PHONE).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // different sex -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        editedAlice \u003d new WorkerBuilder(ALICE).withSex(WorkerBuilder.DEFAULT_SEX).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    void gettersAndSetters_correct() throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(IdentificationNumber.customGenerateId(\"W\", 1), ALICE.getIdNum());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Worker testWorker \u003d new WorkerBuilder().build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // Name"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(new Name(DEFAULT_NAME), testWorker.getName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // Date"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Date newDate \u003d ParserUtil.parseDate(\"2/2/2000\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        testWorker.setDateJoined(newDate);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(newDate, testWorker.getDateJoined());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        testWorker.setDateOfBirth(newDate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(newDate, testWorker.getDateOfBirth().get());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // Designation"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        testWorker.setDesignation(\"manager\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(\"manager\", testWorker.getDesignation().get());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // Phone number"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        PhoneNumber newPhone \u003d new PhoneNumber(\"90000001\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        testWorker.setPhone(newPhone);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(newPhone, testWorker.getPhone().get());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // Sex"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        testWorker.setSex(FEMALE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(FEMALE, testWorker.getSex());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // Employment status"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        testWorker.setEmploymentStatus(\"Test status\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(\"Test status\", testWorker.getEmploymentStatus().get());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    void toString_correct() throws ParseException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(DEFAULT_NAME + \" Worker ID: W00001\" + \" Sex: \" + DEFAULT_SEX + \" Phone: \" + DEFAULT_PHONE"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                + \" Date of Birth: \" + ParserUtil.parseDate(DEFAULT_DATE_OF_BIRTH)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                + \" Date Joined: \" + ParserUtil.parseDate(DEFAULT_DATE_JOINED)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                + \" Designation: \" + DEFAULT_DESIGNATION + \" Employment Status: \" + DEFAULT_EMPLOYMENT_STATUS,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                new WorkerBuilder().build().toString());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 132
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniqueEntityListsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMPLOYMENT_STATUS_XENIA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.testutil.TypicalWorkers.XENIA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.testutil.TypicalWorkers.ZACH;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.exceptions.DuplicateEntityException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.exceptions.EntityNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.worker.Worker;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.testutil.WorkerBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class UniqueEntityListsTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private final UniqueEntityLists uniqueEntityLists \u003d new UniqueEntityLists();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void contains_nullEntity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEntityLists.contains(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void contains_entityNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertFalse(uniqueEntityLists.contains(ZACH));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void contains_entityInList_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uniqueEntityLists.add(ZACH);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertTrue(uniqueEntityLists.contains(ZACH));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void contains_entityWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uniqueEntityLists.add(ZACH);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Worker editedZach \u003d new WorkerBuilder(ZACH).withEmploymentStatus(VALID_EMPLOYMENT_STATUS_XENIA).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertTrue(uniqueEntityLists.contains(editedZach));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void add_nullEntity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEntityLists.add(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void add_duplicateEntity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uniqueEntityLists.add(ZACH);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertThrows(DuplicateEntityException.class, () -\u003e uniqueEntityLists.add(ZACH));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void setEntity_nullTargetEntity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEntityLists.setEntity(null, ZACH));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void setEntity_nullEditedEntity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEntityLists.setEntity(ZACH, null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void setEntity_targetEntityNotInList_throwsEntityNotFoundException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertThrows(EntityNotFoundException.class, () -\u003e uniqueEntityLists.setEntity(ZACH, ZACH));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void setEntity_editedEntityIsSameEntity_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uniqueEntityLists.add(ZACH);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uniqueEntityLists.setEntity(ZACH, ZACH);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        UniqueEntityLists expectedUniqueEntityList \u003d new UniqueEntityLists();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        expectedUniqueEntityList.add(ZACH);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(expectedUniqueEntityList, uniqueEntityLists);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void setEntity_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uniqueEntityLists.add(ZACH);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Worker editedZach \u003d new WorkerBuilder(ZACH).withEmploymentStatus(VALID_EMPLOYMENT_STATUS_XENIA).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uniqueEntityLists.setEntity(ZACH, editedZach);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        UniqueEntityLists expectedUniqueEntityList \u003d new UniqueEntityLists();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        expectedUniqueEntityList.add(editedZach);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(expectedUniqueEntityList, uniqueEntityLists);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void setEntity_editedEntityHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uniqueEntityLists.add(ZACH);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uniqueEntityLists.setEntity(ZACH, XENIA);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        UniqueEntityLists expectedUniqueEntityList \u003d new UniqueEntityLists();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        expectedUniqueEntityList.add(XENIA);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(expectedUniqueEntityList, uniqueEntityLists);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void setEntity_editedEntityHasNonUniqueIdentity_throwsDuplicateEntityException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uniqueEntityLists.add(ZACH);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uniqueEntityLists.add(XENIA);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertThrows(DuplicateEntityException.class, () -\u003e uniqueEntityLists.setEntity(ZACH, XENIA));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void remove_nullEntity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEntityLists.remove(null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void remove_entityDoesNotExist_throwsEntityNotFoundException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertThrows(EntityNotFoundException.class, () -\u003e uniqueEntityLists.remove(ZACH));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void remove_existingEntity_removesEntity() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uniqueEntityLists.add(ZACH);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uniqueEntityLists.remove(ZACH);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        UniqueEntityLists expectedUniqueEntityList \u003d new UniqueEntityLists();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(expectedUniqueEntityList, uniqueEntityLists);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEntityLists.setPersons((UniqueEntityLists) null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uniqueEntityLists.add(ALICE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        UniqueEntityLists expectedUniqueEntityList \u003d new UniqueEntityLists();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        expectedUniqueEntityList.add(BOB);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uniqueEntityLists.setPersons(expectedUniqueEntityList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(expectedUniqueEntityList, uniqueEntityLists);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEntityLists.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uniqueEntityLists.add(ALICE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uniqueEntityLists.setPersons(personList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        UniqueEntityLists expectedUniqueEntityList \u003d new UniqueEntityLists();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        expectedUniqueEntityList.add(BOB);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(expectedUniqueEntityList, uniqueEntityLists);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniqueEntityLists.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void asUnmodifiableObservableListWorker_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            -\u003e uniqueEntityLists.asUnmodifiableObservableListWorker().remove(0));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void asUnmodifiableObservableListBody_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            -\u003e uniqueEntityLists.asUnmodifiableObservableListBody().remove(0));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void asUnmodifiableObservableListFridge_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            -\u003e uniqueEntityLists.asUnmodifiableObservableListFridge().remove(0));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 90,
      "-": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/notif/NotifTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "package seedu.address.notif;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.testutil.TypicalBodies.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.testutil.TypicalBodies.BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.testutil.TypicalNotifs.ALICE_NOTIF;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.testutil.TypicalNotifs.BOB_NOTIF;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.notif.Notif;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.testutil.NotifBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "//@@author arjavibahety"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "public class NotifTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public void isSameNotif() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertTrue(ALICE_NOTIF.isSameNotif(ALICE_NOTIF));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertFalse(ALICE_NOTIF.isSameNotif(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertFalse(BOB_NOTIF.isSameNotif(ALICE_NOTIF));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        // Not equal because Body is different"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        Notif editedNotif \u003d new NotifBuilder(BOB).withBody(ALICE).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertFalse(BOB_NOTIF.isSameNotif(editedNotif));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public void isSameBody() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        Notif aliceNotif \u003d new NotifBuilder(ALICE).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        Notif bobNotif \u003d new NotifBuilder(BOB).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertTrue(aliceNotif.getBody() \u003d\u003d ALICE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertFalse(aliceNotif.getBody() \u003d\u003d BOB);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertFalse(aliceNotif.getBody() \u003d\u003d bobNotif.getBody());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        Notif aliceNotifCopy \u003d new NotifBuilder(ALICE).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        Notif bobNotifCopy \u003d new NotifBuilder(BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertTrue(ALICE_NOTIF.equals(ALICE_NOTIF));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertEquals(BOB_NOTIF.hashCode(), bobNotifCopy.hashCode());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertTrue(ALICE_NOTIF.equals(aliceNotifCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertFalse(ALICE_NOTIF.equals(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        // Different fields"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertFalse(ALICE_NOTIF.equals(BOB_NOTIF));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        original.addEntity(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        original.removeEntity(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        original.addEntity(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 3,
      "-": 107
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        addressBook.addEntity(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/BodyBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TEST_PARAMETERS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.IdentificationNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.PhoneNumber;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.Sex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.body.BodyStatus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.body.Nric;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.body.Religion;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "//@@author ambervoong"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " * A utility class to build Body objects."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "public class BodyBuilder {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final String MESSAGE_INVALID_TEST_DATE \u003d \"Invalid date parameters. A correct date should have a \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + \"format of DD/MM/YYYY\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"John Doe\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final Sex DEFAULT_SEX \u003d Sex.MALE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final String DEFAULT_NRIC \u003d \"S8765432A\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final Religion DEFAULT_RELIGION \u003d Religion.NONRELIGIOUS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final String DEFAULT_CAUSE_OF_DEATH \u003d \"Heart Attack\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final String DEFAULT_ORGANS_FOR_DONATION \u003d \"Liver Cornea Kidney\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final BodyStatus DEFAULT_BODY_STATUS \u003d BodyStatus.ARRIVED;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final int DEFAULT_FRIDGE_ID \u003d 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final String DEFAULT_DATE_OF_BIRTH \u003d \"12/12/2012\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final String DEFAULT_DATE_OF_DEATH \u003d \"02/10/2019\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final String DEFAULT_DATE_OF_ADMISSION \u003d \"03/10/2019\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final String DEFAULT_NEXT_OF_KIN \u003d \"Jane Doe\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final String DEFAULT_RELATIONSHIP \u003d \"Mother\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final String DEFAULT_KIN_PHONE \u003d \"81234568\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private Sex sex;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private Nric nric;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private Religion religion;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private String causeOfDeath;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private List\u003cString\u003e organsForDonation;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private BodyStatus bodyStatus;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private IdentificationNumber fridgeId;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private Date dateOfBirth;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private Date dateOfDeath;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private Date dateOfAdmission;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    // Next of kin details"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private Name nextOfKin;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private String relationship;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private PhoneNumber kinPhoneNumber;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public BodyBuilder() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        sex \u003d DEFAULT_SEX;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        nric \u003d new Nric(DEFAULT_NRIC);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        religion \u003d DEFAULT_RELIGION;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        causeOfDeath \u003d DEFAULT_CAUSE_OF_DEATH;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        organsForDonation \u003d Arrays.asList(DEFAULT_ORGANS_FOR_DONATION.split(\" \"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        bodyStatus \u003d DEFAULT_BODY_STATUS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        fridgeId \u003d IdentificationNumber.customGenerateId(\"F\", DEFAULT_FRIDGE_ID);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        nextOfKin \u003d new Name(DEFAULT_NEXT_OF_KIN);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        relationship \u003d DEFAULT_RELATIONSHIP;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        kinPhoneNumber \u003d new PhoneNumber(DEFAULT_KIN_PHONE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            dateOfBirth \u003d ParserUtil.parseDate(DEFAULT_DATE_OF_BIRTH);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            dateOfDeath \u003d ParserUtil.parseDate(DEFAULT_DATE_OF_DEATH);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            dateOfAdmission \u003d ParserUtil.parseDate(DEFAULT_DATE_OF_ADMISSION);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            System.out.println(MESSAGE_INVALID_TEST_DATE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Initializes the BodyBuilder with the data of {@code bodyToCopy}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public BodyBuilder(Body bodyToCopy) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        name \u003d bodyToCopy.getName();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        sex \u003d bodyToCopy.getSex();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        nric \u003d bodyToCopy.getNric().orElse(null);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        religion \u003d bodyToCopy.getReligion().orElse(null);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        causeOfDeath \u003d bodyToCopy.getCauseOfDeath().orElse(null);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        organsForDonation \u003d bodyToCopy.getOrgansForDonation().orElse(null);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        bodyStatus \u003d bodyToCopy.getBodyStatus().orElse(null);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        fridgeId \u003d bodyToCopy.getFridgeId().orElse(null);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        nextOfKin \u003d bodyToCopy.getNextOfKin().orElse(null);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        relationship \u003d bodyToCopy.getRelationship().orElse(null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        kinPhoneNumber \u003d bodyToCopy.getKinPhoneNumber().orElse(null);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        dateOfDeath \u003d bodyToCopy.getDateOfDeath();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        dateOfBirth \u003d bodyToCopy.getDateOfBirth().orElse(null);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        dateOfAdmission \u003d bodyToCopy.getDateOfAdmission();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Sets the {@code Name} of the {@code Body} that we are building."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public BodyBuilder withName(String name) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            this.name \u003d ParserUtil.parseName(name);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            System.out.println(e.getMessage() + MESSAGE_INVALID_TEST_PARAMETERS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Sets the {@code sex} of the {@code Body} that we are building."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public BodyBuilder withSex(String sex) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.sex \u003d Sex.valueOf(sex);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Sets the {@code nric} of the {@code Body} that we are building."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public BodyBuilder withNric(String nric) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            this.nric \u003d ParserUtil.parseNric(nric);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            System.out.println(e.getMessage() + MESSAGE_INVALID_TEST_PARAMETERS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Sets the {@code causeOfDeath} of the {@code Body} that we are building."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public BodyBuilder withCauseOfDeath(String causeOfDeath) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.causeOfDeath \u003d ParserUtil.parseStringFields(causeOfDeath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Sets the list of {@code organsForDonation} of the {@code Body} that we are building."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public BodyBuilder withOrgansForDonation(String organsForDonation) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.organsForDonation \u003d ParserUtil.parseOrgansForDonation(organsForDonation);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Sets the {@code status} of the {@code Body} that we are building."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public BodyBuilder withStatus(String bodyStatus) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            this.bodyStatus \u003d ParserUtil.parseBodyStatus(bodyStatus);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            System.out.println(e.getMessage() + MESSAGE_INVALID_TEST_PARAMETERS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Sets the {@code fridgeId} of the {@code Body} that we are building."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public BodyBuilder withFridgeId(String fridgeId) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            this.fridgeId \u003d ParserUtil.parseIdentificationNumber(fridgeId);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            System.out.println(e.getMessage() + MESSAGE_INVALID_TEST_PARAMETERS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Sets the {@code nextOfKin} of the {@code Body} that we are building."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public BodyBuilder withNextOfKin(String nextOfKin) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            this.nextOfKin \u003d ParserUtil.parseName(nextOfKin);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            System.out.println(e.getMessage() + MESSAGE_INVALID_TEST_PARAMETERS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Sets the next-of-kin {@code relationship} of the {@code Body} that we are building."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public BodyBuilder withRelationship(String relationship) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.relationship \u003d ParserUtil.parseStringFields(relationship);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Sets the {@code religion} of the {@code Body} that we are building."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public BodyBuilder withReligion(String religion) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            this.religion \u003d ParserUtil.parseReligion(religion);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            System.out.println(e.getMessage() + MESSAGE_INVALID_TEST_PARAMETERS);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Sets the {@code kinPhoneNumber} of the {@code Body} that we are building."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public BodyBuilder withKinPhoneNumber(String kinPhoneNumber) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            this.kinPhoneNumber \u003d ParserUtil.parsePhoneNumber(kinPhoneNumber);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            System.out.println(e.getMessage() + MESSAGE_INVALID_TEST_PARAMETERS);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Sets the {@code dateOfBirth} of the {@code Body} that we are building."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public BodyBuilder withDateOfBirth(String dateOfBirth) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            this.dateOfBirth \u003d ParserUtil.parseDate(dateOfBirth);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            System.out.println(MESSAGE_INVALID_TEST_DATE);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Sets the {@code dateOfDeath} of the {@code Body} that we are building."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public BodyBuilder withDateOfDeath(String dateOfDeath) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            this.dateOfDeath \u003d ParserUtil.parseDate(dateOfDeath);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            System.out.println(MESSAGE_INVALID_TEST_DATE);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Sets the {@code dateOfAdmission} of the {@code Body} that we are building."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public BodyBuilder withDateOfAdmission(String dateOfAdmission) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            this.dateOfAdmission \u003d ParserUtil.parseDate(dateOfAdmission);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            System.out.println(MESSAGE_INVALID_TEST_DATE);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Creates a Body object using the parameters currently in this BodyBuilder object."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Body build() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return new Body(true, 1, dateOfAdmission, name, sex, nric, religion, causeOfDeath,"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                organsForDonation, bodyStatus, fridgeId, dateOfBirth, dateOfDeath, nextOfKin, relationship,"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                kinPhoneNumber);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Creates a Body object using the parameters currently in this BodyBuilder object and a user-input custom ID."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public Body build(int id) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return new Body(true, id, dateOfAdmission, name, sex, nric, religion, causeOfDeath,"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                organsForDonation, bodyStatus, fridgeId, dateOfBirth, dateOfDeath, nextOfKin, relationship,"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "                kinPhoneNumber);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 4,
      "ambervoong": 276
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/FridgeBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.entity.fridge.Fridge;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "//@@author arjavibahety"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " * A utility class to build Fridge objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "public class FridgeBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public static final Body DEFAULT_BODY \u003d null;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private Body body;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public FridgeBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        body \u003d DEFAULT_BODY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Initializes the FridgeBuilder with the data of {@code fridgeToCopy}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @param fridgeToCopy"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public FridgeBuilder(Fridge fridgeToCopy) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        body \u003d fridgeToCopy.getBody();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Sets the {@code Body} of the {@code Fridge} that we are building."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public FridgeBuilder withBody(Body body) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        this.body \u003d body;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Creates a fridge using the parameters currently in this FridgeBuilder object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @return Fridge"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public Fridge build() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        if (body \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            return new Fridge(true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            return new Fridge(body, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/NotifBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.testutil.TypicalBodies.BOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.notif.Notif;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " * A utility class to help with building Notif objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "public class NotifBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public static final Body DEFUALT_BODY \u003d BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private Body body;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public NotifBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        body \u003d DEFUALT_BODY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Initializes the NotifBuilder with the data of {@code bodyToCopy}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @param bodyToCopy"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public NotifBuilder(Body bodyToCopy) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        body \u003d bodyToCopy;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Sets the {@code Body} of the {@code Notif} that we are building."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public NotifBuilder withBody(Body body) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        this.body \u003d body;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public Notif build() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return new Notif(body);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE_NUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        sb.append(PREFIX_PHONE_NUMBER + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 2,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalAddressBook.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.entity.fridge.Fridge;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.entity.worker.Worker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.notif.Notif;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " * A utility class containing an {@code AddressBook} object to be used in tests."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "public class TypicalAddressBook {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical bodies, workers, fridges, and notifs."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        for (Body body : TypicalBodies.getTypicalBodies()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            ab.addEntity(body);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        for (Worker worker : TypicalWorkers.getTypicalWorkers()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            ab.addEntity(worker);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        for (Fridge fridge : TypicalFridges.getTypicalFridges()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            ab.addEntity(fridge);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        for (Notif notif : TypicalNotifs.getTypicalNotifs()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            ab.addNotif(notif);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalBodies.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_OF_ADMISSION_JANE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_OF_ADMISSION_JOHN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_OF_DEATH_JANE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_OF_DEATH_JOHN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_JANE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_JOHN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SEX_JANE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SEX_JOHN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "//@@author ambervoong"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " * A utility class containing {@code Body} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "public class TypicalBodies {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final Body ALICE \u003d new BodyBuilder()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .withDateOfAdmission(\"01/01/1991\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .withSex(\"FEMALE\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .withNric(\"S1234567A\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .withReligion(\"ISLAM\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .withCauseOfDeath(\"Stroke\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .withOrgansForDonation(\"\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .withStatus(\"PENDING CLAIM\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .withFridgeId(\"F01\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .withDateOfBirth(\"03/09/1982\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .withDateOfDeath(\"01/01/1991\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .withNextOfKin(\"Ben Joseph\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .withRelationship(\"Husband\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .withKinPhoneNumber(\"87120909\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final Body BOB \u003d new BodyBuilder()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .withDateOfAdmission(\"01/01/1991\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .withName(\"Bob Chachki\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .withSex(\"MALE\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .withNric(\"S1224567A\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .withReligion(\"CHRISTIANITY\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .withCauseOfDeath(\"NECROSIS\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .withOrgansForDonation(\"\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .withStatus(\"ARRIVED\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .withFridgeId(\"F01\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .withDateOfBirth(\"02/09/1982\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .withDateOfDeath(\"01/06/1971\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .withNextOfKin(\"Ben Chachki\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .withRelationship(\"Father\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .withKinPhoneNumber(\"87120919\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    // Manually added - Workers\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final Body JOHN \u003d new BodyBuilder().withName(VALID_NAME_JOHN).withSex(VALID_SEX_JOHN)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        .withDateOfAdmission(VALID_DATE_OF_ADMISSION_JOHN).withDateOfDeath(VALID_DATE_OF_DEATH_JOHN).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final Body JANE \u003d new BodyBuilder().withName(VALID_NAME_JANE).withSex(VALID_SEX_JANE)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        .withDateOfAdmission(VALID_DATE_OF_ADMISSION_JANE).withDateOfDeath(VALID_DATE_OF_DEATH_JANE).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private TypicalBodies() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static List\u003cBody\u003e getTypicalBodies() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BOB));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 8,
      "dalisc": 2,
      "ambervoong": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalFridges.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.testutil.TypicalBodies.ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.testutil.TypicalBodies.BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.entity.fridge.Fridge;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "//@author arjavibahety"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " * A utility class containing {@code Fridge} objects to be used in tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "public class TypicalFridges {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public static final Fridge EMPTY_FRIDGE \u003d new FridgeBuilder().build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public static final Fridge ALICE_FRIDGE \u003d new FridgeBuilder().withBody(ALICE).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public static final Fridge BOB_FRIDGE \u003d new FridgeBuilder().withBody(BOB).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private TypicalFridges() {} // prevents instantiation"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public static List\u003cFridge\u003e getTypicalFridges() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(EMPTY_FRIDGE, ALICE_FRIDGE, BOB_FRIDGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIdentificationNumbers.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.entity.IdentificationNumber;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " * A utility class containing a list of {@code IdentificationNumber} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "public class TypicalIdentificationNumbers {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final IdentificationNumber FIRST_BODY_ID_NUM \u003d IdentificationNumber.customGenerateTestId(\"B\", 1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final IdentificationNumber SECOND_BODY_ID_NUM \u003d IdentificationNumber.customGenerateTestId(\"B\", 2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final IdentificationNumber FIRST_WORKER_ID_NUM \u003d IdentificationNumber.customGenerateTestId(\"W\", 1);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final IdentificationNumber SECOND_WORKER_ID_NUM \u003d IdentificationNumber.customGenerateTestId(\"W\", 2);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final IdentificationNumber FIRST_FRIDGE_ID_NUM \u003d IdentificationNumber.customGenerateTestId(\"F\", 1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final IdentificationNumber SECOND_FRIDGE_ID_NUM \u003d IdentificationNumber.customGenerateTestId(\"F\", 2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 6,
      "arjavibahety": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalNotifs.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.testutil.TypicalBodies.ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static seedu.address.testutil.TypicalBodies.BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.model.notif.Notif;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " * A utility class containing a list of {@code notifs} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "public class TypicalNotifs {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public static final Notif ALICE_NOTIF \u003d new NotifBuilder().withBody(ALICE).build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public static final Notif BOB_NOTIF \u003d new NotifBuilder().withBody(BOB).build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private TypicalNotifs() {} // prevents instantiation"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public static List\u003cNotif\u003e getTypicalNotifs() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE_NOTIF, BOB_NOTIF));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            ab.addEntity(person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 1,
      "-": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalUndoableCommands.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.logic.parser.utility.UpdateBodyDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import seedu.address.model.entity.body.Body;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "//@@author ambervoong"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " * Contains various UndoableCommands for use in testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "public class TypicalUndoableCommands {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final Body TYPICAL_BODY \u003d new BodyBuilder().build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final UpdateBodyDescriptor TYPICAL_UPDATE_BODY_DESCRIPTOR \u003d new UpdateBodyDescriptor(TYPICAL_BODY);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final UpdateCommand TYPICAL_UPDATE_COMMAND \u003d new UpdateCommand(TYPICAL_BODY.getIdNum(),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            TYPICAL_UPDATE_BODY_DESCRIPTOR);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final AddCommand TYPICAL_ADD_COMMAND \u003d new AddCommand(TYPICAL_BODY);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final DeleteCommand TYPICAL_DELETE_COMMAND \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            new DeleteCommand(Index.fromZeroBased(TYPICAL_BODY.getIdNum().getIdNum()), \"B\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 1,
      "ambervoong": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalWorkers.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_JOINED_XENIA;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_JOINED_ZACH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_XENIA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_ZACH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SEX_XENIA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SEX_ZACH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalisc"
        },
        "content": "import seedu.address.model.entity.worker.Worker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * A utility class containing a list of {@code Workers} objects to be used in tests."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class TypicalWorkers {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    // initialized with only mandatory fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final Worker ALICE \u003d new WorkerBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        .withPhone(\"94351253\").withDateJoined(\"12/12/2019\").withSex(\"FEMALE\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        .withEmploymentStatus(\"cleaning\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final Worker BENSON \u003d new WorkerBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        .withPhone(\"98765432\").withDateJoined(\"12/12/2019\").withSex(\"FEMALE\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        .withEmploymentStatus(\"transporting\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    public static final Worker CHARLIE \u003d new WorkerBuilder().withName(\"Charlie Binder\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            .withPhone(\"98765432\").withDateJoined(\"12/12/2019\").withSex(\"MALE\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalisc"
        },
        "content": "            .withEmploymentStatus(\"transporting\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public static final Worker CLARA \u003d new WorkerBuilder().withName(\"Clara Doe\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            .withPhone(\"84371233\").withDateJoined(\"13/12/2019\").withSex(\"FEMALE\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            .withEmploymentStatus(\"cleaning\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    // Manually added - Workers\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final Worker ZACH \u003d new WorkerBuilder().withName(VALID_NAME_ZACH).withSex(VALID_SEX_ZACH)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        .withDateJoined(VALID_DATE_JOINED_ZACH).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final Worker XENIA \u003d new WorkerBuilder().withName(VALID_NAME_XENIA).withSex(VALID_SEX_XENIA)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        .withDateJoined(VALID_DATE_JOINED_XENIA).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private TypicalWorkers() {} // prevents instantiation"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dalisc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    public static List\u003cWorker\u003e getTypicalWorkers() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalisc"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CHARLIE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalisc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 32,
      "dalisc": 12,
      "arjavibahety": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/WorkerBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TEST_PARAMETERS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.PhoneNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.Sex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.entity.worker.Worker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * A utility class to help with building Worker objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class WorkerBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"John Doe\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"91234567\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String DEFAULT_SEX \u003d \"MALE\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String DEFAULT_DATE_OF_BIRTH \u003d \"01/01/1997\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String DEFAULT_DATE_JOINED \u003d \"01/01/2019\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String DEFAULT_DESIGNATION \u003d \"technician\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static final String DEFAULT_EMPLOYMENT_STATUS \u003d \"cleaning\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private PhoneNumber phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private Sex sex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private Date dateOfBirth;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private Date dateJoined;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private String designation;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private String employmentStatus;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public WorkerBuilder() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        phone \u003d new PhoneNumber(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            sex \u003d ParserUtil.parseSex(DEFAULT_SEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            dateOfBirth \u003d ParserUtil.parseDate(DEFAULT_DATE_OF_BIRTH);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            dateJoined \u003d ParserUtil.parseDate(DEFAULT_DATE_JOINED);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            System.out.println(e.getMessage() + MESSAGE_INVALID_TEST_PARAMETERS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        designation \u003d DEFAULT_DESIGNATION;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        employmentStatus \u003d DEFAULT_EMPLOYMENT_STATUS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Initializes the WorkerBuilder with the data of {@code workerToCopy}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public WorkerBuilder(Worker workerToCopy) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        name \u003d workerToCopy.getName();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        phone \u003d workerToCopy.getPhone().orElse(null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        sex \u003d workerToCopy.getSex();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        dateOfBirth \u003d workerToCopy.getDateOfBirth().orElse(null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        dateJoined \u003d workerToCopy.getDateJoined();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        designation \u003d workerToCopy.getDesignation().orElse(null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        employmentStatus \u003d workerToCopy.getEmploymentStatus().orElse(null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Sets the {@code Name} of the {@code Worker} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public WorkerBuilder withName(String name) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Sets the {@code sex} of the {@code Worker} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public WorkerBuilder withSex(String sex) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        this.sex \u003d Sex.valueOf(sex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Sets the {@code employmentStatus} of the {@code Worker} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public WorkerBuilder withEmploymentStatus(String employmentStatus) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        this.employmentStatus \u003d ParserUtil.parseStringFields(employmentStatus);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Sets the {@code Phone} of the {@code Worker} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public WorkerBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            this.phone \u003d ParserUtil.parsePhoneNumber(phone);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            System.out.println(e.getMessage() + MESSAGE_INVALID_TEST_PARAMETERS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Sets the {@code dateOfBirth} of the {@code Worker} that we are building."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public WorkerBuilder withDateOfBirth(String dateOfBirth) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            this.dateOfBirth \u003d ParserUtil.parseDate(dateOfBirth);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            System.out.println(e.getMessage() + MESSAGE_INVALID_TEST_PARAMETERS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Sets the {@code dateJoined} of the {@code Worker} that we are building."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public WorkerBuilder withDateJoined(String dateJoined) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            this.dateJoined \u003d ParserUtil.parseDate(dateJoined);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            System.out.println(e.getMessage() + MESSAGE_INVALID_TEST_PARAMETERS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Sets the {@code designation} of the {@code Worker} that we are building."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public WorkerBuilder withDesignation(String designation) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        this.designation \u003d ParserUtil.parseStringFields(designation);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public Worker build() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return new Worker(name, phone, sex, employmentStatus, dateOfBirth, dateJoined, designation, true);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 132
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandBoxTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private final ArrayList\u003cString\u003e history \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(commandText -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            if (commandText.equals(COMMAND_THAT_SUCCEEDS)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                return new CommandResult(\"Command successful\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            throw new CommandException(\"Command failed\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uiPartExtension.setUiPart(commandBox);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    **/"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 161
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GuiUnitTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import org.junit.jupiter.api.extension.RegisterExtension;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.ui.testutil.UiPartExtension;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * A GUI unit test class for AddressBook."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    // TODO: Remove this workaround after using JavaFX version 13 or above"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    // This is a workaround to solve headless test failure on Windows OS"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    // Refer to https://github.com/javafxports/openjdk-jfx/issues/66 for more details."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (System.getProperty(\"os.name\").toLowerCase().startsWith(\"win\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            System.loadLibrary(\"WindowsCodecs\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @RegisterExtension"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public final UiPartExtension uiPartExtension \u003d new UiPartExtension();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MainWindowCloseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager(jsonAddressBookStorage, jsonUserPrefsStorage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new LogicManager(new ModelManager(), storageManager));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void close_menuBarExitButton_allWindowsClosed() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        mainWindowHandle.clickOnMenuHelpButton();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertTrue(HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "         */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "         */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "         * Opens the {@code HelpWindow} by clicking on the menu bar\u0027s help button."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "         */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        private void clickOnMenuHelpButton() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            guiRobot.clickOn(\"Help\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            guiRobot.clickOn(\"F1\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PersonCardTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class PersonCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Person personWithNoTags \u003d new PersonBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        PersonCard personCard \u003d new PersonCard(personWithNoTags, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uiPartExtension.setUiPart(personCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertCardDisplay(personCard, personWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Person personWithTags \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        personCard \u003d new PersonCard(personWithTags, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uiPartExtension.setUiPart(personCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertCardDisplay(personCard, personWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        PersonCard personCard \u003d new PersonCard(person, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // same person, same index -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        PersonCard copy \u003d new PersonCard(person, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertTrue(personCard.equals(copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertTrue(personCard.equals(personCard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertFalse(personCard.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertFalse(personCard.equals(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // different person, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Person differentPerson \u003d new PersonBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertFalse(personCard.equals(new PersonCard(differentPerson, 0)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // same person, different index -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertFalse(personCard.equals(new PersonCard(person, 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private void assertCardDisplay(PersonCard personCard, Person expectedPerson, int expectedId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        PersonCardHandle personCardHandle \u003d new PersonCardHandle(personCard.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", personCardHandle.getId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // verify person details are displayed correctly"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertCardDisplaysPerson(expectedPerson, personCardHandle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PersonListPanelTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class PersonListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final ObservableList\u003cPerson\u003e TYPICAL_PERSONS \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            FXCollections.observableList(getTypicalPersons());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private final SimpleObjectProperty\u003cPerson\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private PersonListPanelHandle personListPanelHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            personListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            Person expectedPerson \u003d TYPICAL_PERSONS.get(i);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            assertCardDisplaysPerson(expectedPerson, actualCard);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Verifies that creating and deleting large number of persons in {@code PersonListPanel} requires lesser than"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        ObservableList\u003cPerson\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }, \"Creation and deletion of person cards exceeded time limit\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Returns a list of persons containing {@code personCount} persons that is used to populate the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * {@code PersonListPanel}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private ObservableList\u003cPerson\u003e createBackingList(int personCount) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        ObservableList\u003cPerson\u003e backingList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        for (int i \u003d 0; i \u003c personCount; i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            Name name \u003d new Name(i + \"a\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            Phone phone \u003d new Phone(\"000\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            Email email \u003d new Email(\"a@aa\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            Address address \u003d new Address(\"a\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            Person person \u003d new Person(name, phone, email, address, Collections.emptySet());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            backingList.add(person);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return backingList;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Initializes {@code personListPanelHandle} with a {@code PersonListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code PersonListPanel}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private void initUi(ObservableList\u003cPerson\u003e backingList) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        PersonListPanel personListPanel \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                new PersonListPanel(backingList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uiPartExtension.setUiPart(personListPanel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 90
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ResultDisplayTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class ResultDisplayTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private ResultDisplayHandle resultDisplayHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uiPartExtension.setUiPart(resultDisplay);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // default result text"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(\"\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // new result received"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        guiRobot.interact(() -\u003e resultDisplay.setFeedbackToUser(\"Dummy feedback to user\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(\"Dummy feedback to user\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, addressBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        uiPartExtension.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // after address book is updated"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        guiRobot.interact(() -\u003e addressBook.addEntity(ALICE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).sorted().collect(Collectors.toList()),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.length; i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            personListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        int numberOfPeople \u003d personListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/StageExtension.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import org.junit.jupiter.api.extension.AfterEachCallback;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import org.junit.jupiter.api.extension.BeforeEachCallback;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import org.junit.jupiter.api.extension.ExtensionContext;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * Properly sets up and tears down a JavaFx stage for our testing purposes."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class StageExtension implements BeforeEachCallback, AfterEachCallback {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void beforeEach(ExtensionContext context) throws Exception {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void afterEach(ExtensionContext context) throws Exception {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/UiPartExtension.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * Provides an isolated stage to test an individual {@code UiPart}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class UiPartExtension extends StageExtension {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final String[] CSS_FILES \u003d {\"view/DarkTheme.css\", \"view/Extensions.css\"};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void setUiPart(final UiPart\u003c? extends Parent\u003e uiPart) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            FxToolkit.setupScene(() -\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                Scene scene \u003d new Scene(uiPart.getRoot());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                scene.getStylesheets().setAll(CSS_FILES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                return scene;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            });"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            throw new AssertionError(\"Timeout should not happen.\", te);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 29
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Person toAdd \u003d AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except phone and email"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "         */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        /* Case: add a person with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        /** todo: adapt to mortago"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "         */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        /* Case: add a duplicate person -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_ENTITY);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        /* Case: add a duplicate person except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_ENTITY);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        /* Case: add a duplicate person except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_ENTITY);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        /* Case: add a duplicate person except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_ENTITY);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        /* Case: add a duplicate person except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_ENTITY);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private void assertCommandSuccess(Person toAdd) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Person)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private void assertCommandSuccess(String command, Person toAdd) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        expectedModel.addEntity(toAdd);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * 2. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 225
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import org.junit.jupiter.api.extension.RegisterExtension;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    // TODO: Remove this workaround after using JavaFX version 13 or above"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    // This is a workaround to solve headless test failure on Windows OS"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    // Refer to https://github.com/javafxports/openjdk-jfx/issues/66 for more details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        if (System.getProperty(\"os.name\").toLowerCase().startsWith(\"win\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            System.loadLibrary(\"WindowsCodecs\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @RegisterExtension"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static ClockExtension clockExtension \u003d new ClockExtension();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.json\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final Path PREF_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                getPrefFileLocation());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    protected Path getPrefFileLocation() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return PREF_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        clockExtension.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" -b \" + keyword);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(new AddressBook(expectedModel.getAddressBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url is now displaying the"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * default page."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * {@link ClockExtension#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        String timestamp \u003d new Date(clockExtension.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 257
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class ClearCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "         */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 73
    }
  },
  {
    "path": "src/test/java/systemtests/ClockExtension.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import org.junit.jupiter.api.extension.AfterEachCallback;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import org.junit.jupiter.api.extension.BeforeEachCallback;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import org.junit.jupiter.api.extension.ExtensionContext;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * This rule makes the time stamp in the status bar predictable during a test."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * Before the test starts, the rule replaces the clock in the status bar with a fixed clock."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * At the end of the test, the rule restores the original clock."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * @see Clock#fixed(Instant, ZoneId)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class ClockExtension implements BeforeEachCallback, AfterEachCallback {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private Clock injectedClock;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void afterEach(ExtensionContext context) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void beforeEach(ExtensionContext context) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public Clock getInjectedClock() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return injectedClock;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Replaces the clock in the status bar with a fixed clock having the current time as its instance."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void setInjectedClockToCurrentTime() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 44
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static final Predicate\u003cPerson\u003e PREDICATE_MATCHING_NO_PERSONS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cPerson\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Optional\u003cPredicate\u003cPerson\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        model.updateFilteredPersonList(predicate.orElse(PREDICATE_MATCHING_NO_PERSONS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static void setFilteredList(Model model, Person... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Person} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private static Predicate\u003cPerson\u003e getPredicateMatching(Person other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return person -\u003e person.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 39
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class SampleDataTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void addressBook_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        Person[] expectedList \u003d SampleDataUtil.getSamplePersons();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 51
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyAddressBook\u003e addressBook, Path saveFileLocation,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            Path prefFileLocation) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(addressBook, saveFileLocation, prefFileLocation));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            });"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaoyi1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaoyi1997": 75
    }
  },
  {
    "path": "target/classes/view/CommandBox.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "bernicechio": 9
    }
  },
  {
    "path": "target/classes/view/DarkTheme.css",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "bernicechio"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "bernicechio"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bernicechio"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "bernicechio"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bernicechio": 352
    }
  },
  {
    "path": "target/classes/view/Extensions.css",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background: #383838;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bernicechio": 20
    }
  },
  {
    "path": "target/classes/view/HelpWindow.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "bernicechio": 39
    }
  },
  {
    "path": "target/classes/view/MainWindow.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "bernicechio": 60
    }
  },
  {
    "path": "target/classes/view/PersonListCard.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "bernicechio": 36
    }
  },
  {
    "path": "target/classes/view/PersonListPanel.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "  \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "bernicechio": 8
    }
  },
  {
    "path": "target/classes/view/ResultDisplay.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "bernicechio": 9
    }
  },
  {
    "path": "target/classes/view/StatusBarFooter.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003cGridPane styleClass\u003d\"fridgeStatus-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveLocationStatus\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "bernicechio": 12
    }
  },
  {
    "path": "target/test-classes/view/UiPartTest/invalidFile.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "Not a valid FXML file"
      }
    ],
    "authorContributionMap": {
      "bernicechio": 1
    }
  },
  {
    "path": "target/test-classes/view/UiPartTest/validFile.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?import seedu.address.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "bernicechio": 4
    }
  },
  {
    "path": "target/test-classes/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bernicechio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003cfx:root type\u003d\"seedu.address.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bernicechio"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "bernicechio": 6
    }
  },
  {
    "path": "unused/BodyIdentificationNumber.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "package seedu.address.model.entity.body;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author ambervoong-unused"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " *  Represents a body\u0027s identification number in Mortago."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambervoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "public class BodyIdentificationNumber {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static final String VALID_ID \u003d \"A valid body identification number has a length of 9, \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            + \"starts with \u0027B\u0027, which is followed by 8 digits.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    private final String identificationNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public BodyIdentificationNumber(String identificationNumber) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        requireNonNull(identificationNumber);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        checkArgument(isValidIdentificationNumber(identificationNumber), VALID_ID);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        this.identificationNumber \u003d identificationNumber;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public String getIdentificationNumber() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return identificationNumber;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        BodyIdentificationNumber that \u003d (BodyIdentificationNumber) o;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return getIdentificationNumber().equals(that.getIdentificationNumber());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return Objects.hash(getIdentificationNumber());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * Checks if a given string is a valid body identification number. A valid body identification number has a"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * length of 9, starts with \u0027B\u0027, which is followed by 8 digits."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @param identificationNumber String that represents a given body identification number."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     * @return true if the string is a valid body identification number, false otherwise."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public static boolean isValidIdentificationNumber(String identificationNumber) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        if (identificationNumber.length() !\u003d 9) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        String digits \u003d identificationNumber.substring(1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        boolean isStartB \u003d identificationNumber.charAt(0) \u003d\u003d \u0027B\u0027;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        boolean isEightLength \u003d digits.length() \u003d\u003d 8;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        String regex \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(regex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        boolean isDigits \u003d (pattern.matcher(digits).matches());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        return isStartB \u0026\u0026 isEightLength \u0026\u0026 isDigits;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambervoong": 68,
      "-": 1
    }
  },
  {
    "path": "unused/BodyIdentificationNumberTest.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "package seedu.address.model.entity.body;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author ambervoong-unused"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "class BodyIdentificationNumberTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void constructorBodyId_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new BodyIdentificationNumber(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void constructorBodyId_emptyString_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        String invalidId \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new BodyIdentificationNumber(invalidId));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    public void constructorBodyIdentificationNumber_invalidBodyId_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        String invalidId \u003d \"C00000000\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new BodyIdentificationNumber(invalidId));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void getIdentificationNumber_true() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        BodyIdentificationNumber testId \u003d new BodyIdentificationNumber(\"B00000002\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(\"B00000002\", testId.getIdentificationNumber());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void testEquals_self_true() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        BodyIdentificationNumber testId \u003d new BodyIdentificationNumber(\"B00000002\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        BodyIdentificationNumber otherId \u003d new BodyIdentificationNumber(\"B00000002\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(testId, testId);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(testId, otherId);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertEquals(testId.hashCode(), otherId.hashCode());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void testEquals_differentAndNull_notEqual() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        BodyIdentificationNumber testId \u003d new BodyIdentificationNumber(\"B00000002\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertNotEquals(testId, new BodyIdentificationNumber(\"B00000111\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertNotEquals(testId, null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    void isValidIdentificationNumber() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // Null BodyIdentificationNumber"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e BodyIdentificationNumber.isValidIdentificationNumber(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // Invalid BodyIdentificationNumbers"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(BodyIdentificationNumber.isValidIdentificationNumber(\"\")); // empty string"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(BodyIdentificationNumber.isValidIdentificationNumber(\" \")); // spaces only"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(BodyIdentificationNumber.isValidIdentificationNumber(\"B1234\")); // Not enough digits"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(BodyIdentificationNumber.isValidIdentificationNumber(\"B1234bp12\")); // Alphabets in number."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(BodyIdentificationNumber.isValidIdentificationNumber(\"A12345678\")); // Invalid starting digit"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertFalse(BodyIdentificationNumber.isValidIdentificationNumber(\"@#!@4a\u0026*(^\")); // Not digit"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        // Valid BodyIdentificationNumbers"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertTrue(BodyIdentificationNumber.isValidIdentificationNumber(\"B00000002\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertTrue(BodyIdentificationNumber.isValidIdentificationNumber(\"B00000072\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "        assertTrue(BodyIdentificationNumber.isValidIdentificationNumber(\"B97590072\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ambervoong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ambervoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambervoong": 73,
      "-": 1
    }
  }
]
